
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee98  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800f048  0800f048  0001f048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0b0  0800f0b0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0b0  0800f0b0  0001f0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0b8  0800f0b8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f0b8  0800f0b8  0001f0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0c0  0800f0c0  0001f0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800f0c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026c0  2000007c  0800f140  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000273c  0800f140  0002273c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198e3  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ffb  00000000  00000000  0003998f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001660  00000000  00000000  0003c990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001540  00000000  00000000  0003dff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f65  00000000  00000000  0003f530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010826  00000000  00000000  00067495  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5678  00000000  00000000  00077cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d333  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006540  00000000  00000000  0015d3b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f030 	.word	0x0800f030

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800f030 	.word	0x0800f030

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b972 	b.w	8000ef4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4688      	mov	r8, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14b      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4615      	mov	r5, r2
 8000c3a:	d967      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0720 	rsb	r7, r2, #32
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c4e:	4095      	lsls	r5, r2
 8000c50:	ea47 0803 	orr.w	r8, r7, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c60:	fa1f fc85 	uxth.w	ip, r5
 8000c64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18eb      	adds	r3, r5, r3
 8000c76:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7a:	f080 811b 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8118 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000c84:	3f02      	subs	r7, #2
 8000c86:	442b      	add	r3, r5
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9c:	45a4      	cmp	ip, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	192c      	adds	r4, r5, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	442c      	add	r4, r5
 8000cb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cb8:	eba4 040c 	sub.w	r4, r4, ip
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	b11e      	cbz	r6, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0xbe>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80eb 	beq.w	8000eae <__udivmoddi4+0x286>
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e9c6 0100 	strd	r0, r1, [r6]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f783 	clz	r7, r3
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d147      	bne.n	8000d7e <__udivmoddi4+0x156>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xd0>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80fa 	bhi.w	8000eec <__udivmoddi4+0x2c4>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4698      	mov	r8, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0e0      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d06:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0a:	e7dd      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d0c:	b902      	cbnz	r2, 8000d10 <__udivmoddi4+0xe8>
 8000d0e:	deff      	udf	#255	; 0xff
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f040 808f 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d1a:	1b49      	subs	r1, r1, r5
 8000d1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d20:	fa1f f885 	uxth.w	r8, r5
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb08 f10c 	mul.w	r1, r8, ip
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3c:	18eb      	adds	r3, r5, r3
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4299      	cmp	r1, r3
 8000d46:	f200 80cd 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x14c>
 8000d64:	192c      	adds	r4, r5, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x14a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80b6 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e79f      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d9c:	4325      	orrs	r5, r4
 8000d9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da2:	0c2c      	lsrs	r4, r5, #16
 8000da4:	fb08 3319 	mls	r3, r8, r9, r3
 8000da8:	fa1f fa8e 	uxth.w	sl, lr
 8000dac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db0:	fb09 f40a 	mul.w	r4, r9, sl
 8000db4:	429c      	cmp	r4, r3
 8000db6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dba:	fa00 f107 	lsl.w	r1, r0, r7
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4473      	add	r3, lr
 8000dd8:	1b1b      	subs	r3, r3, r4
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000de8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dec:	45a2      	cmp	sl, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1e 0404 	adds.w	r4, lr, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a2      	cmp	sl, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4474      	add	r4, lr
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0a:	eba4 040a 	sub.w	r4, r4, sl
 8000e0e:	454c      	cmp	r4, r9
 8000e10:	46c2      	mov	sl, r8
 8000e12:	464b      	mov	r3, r9
 8000e14:	d354      	bcc.n	8000ec0 <__udivmoddi4+0x298>
 8000e16:	d051      	beq.n	8000ebc <__udivmoddi4+0x294>
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	d069      	beq.n	8000ef0 <__udivmoddi4+0x2c8>
 8000e1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e20:	eb64 0403 	sbc.w	r4, r4, r3
 8000e24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e28:	40fd      	lsrs	r5, r7
 8000e2a:	40fc      	lsrs	r4, r7
 8000e2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e30:	e9c6 5400 	strd	r5, r4, [r6]
 8000e34:	2700      	movs	r7, #0
 8000e36:	e747      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000e38:	f1c2 0320 	rsb	r3, r2, #32
 8000e3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e40:	4095      	lsls	r5, r2
 8000e42:	fa01 f002 	lsl.w	r0, r1, r2
 8000e46:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e4e:	4338      	orrs	r0, r7
 8000e50:	0c01      	lsrs	r1, r0, #16
 8000e52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e56:	fa1f f885 	uxth.w	r8, r5
 8000e5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb07 f308 	mul.w	r3, r7, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3f02      	subs	r7, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	b281      	uxth	r1, r0
 8000e82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8e:	fb00 f308 	mul.w	r3, r0, r8
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x27e>
 8000e96:	1869      	adds	r1, r5, r1
 8000e98:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e9c:	d217      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d915      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4429      	add	r1, r5
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eac:	e73b      	b.n	8000d26 <__udivmoddi4+0xfe>
 8000eae:	4637      	mov	r7, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e709      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	e6e7      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000ebc:	4541      	cmp	r1, r8
 8000ebe:	d2ab      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ec8:	3801      	subs	r0, #1
 8000eca:	4613      	mov	r3, r2
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4660      	mov	r0, ip
 8000ed0:	e7e9      	b.n	8000ea6 <__udivmoddi4+0x27e>
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4667      	mov	r7, ip
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	4681      	mov	r9, r0
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	442c      	add	r4, r5
 8000ee2:	e747      	b.n	8000d74 <__udivmoddi4+0x14c>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	442b      	add	r3, r5
 8000eea:	e72f      	b.n	8000d4c <__udivmoddi4+0x124>
 8000eec:	4638      	mov	r0, r7
 8000eee:	e708      	b.n	8000d02 <__udivmoddi4+0xda>
 8000ef0:	4637      	mov	r7, r6
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0xa0>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <_ZN7DCMotorC1ERVm>:


#include "DCMotor.h"


DCMotor::DCMotor(volatile uint32_t& ccrx):CCRx(ccrx){
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	615a      	str	r2, [r3, #20]
	this->Speed         = 0 ;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
	this->pinbackword   = 0 ;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	81da      	strh	r2, [r3, #14]
	this->pinforward    = 0 ;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	819a      	strh	r2, [r3, #12]

}
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_ZN7DCMotor7setGPIOEP12GPIO_TypeDefS1_tt>:

void DCMotor::setGPIO(GPIO_TypeDef* GPIOx1 ,GPIO_TypeDef* GPIOx2 ,uint16_t pin1  ,uint16_t pin2){
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	807b      	strh	r3, [r7, #2]
	this->gpio_typedef1 = GPIOx1 ;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	605a      	str	r2, [r3, #4]
	this->gpio_typedef2 = GPIOx2 ;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	609a      	str	r2, [r3, #8]
	this->pinforward    = pin1 ;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	887a      	ldrh	r2, [r7, #2]
 8000f46:	819a      	strh	r2, [r3, #12]
	this->pinbackword   = pin2 ;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	8b3a      	ldrh	r2, [r7, #24]
 8000f4c:	81da      	strh	r2, [r3, #14]
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_ZN7DCMotor7setCCRxERVm>:

void DCMotor::setCCRx(volatile uint32_t& ccrx){
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
	*(&this->otherVariable + 1) = (volatile uint32_t)&ccrx;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3310      	adds	r3, #16
 8000f68:	3304      	adds	r3, #4
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	601a      	str	r2, [r3, #0]
	this->CCRx = this->Speed;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	601a      	str	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_ZN7DCMotor11moveForwordEh>:

void DCMotor::moveForword(uint8_t speed){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
	if(speed > 255){
		this->Speed = 255 ;
	}else{
		this->Speed = speed;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	78fa      	ldrb	r2, [r7, #3]
 8000f94:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(gpio_typedef2, pinbackword, GPIO_PIN_RESET);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6898      	ldr	r0, [r3, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	89db      	ldrh	r3, [r3, #14]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f008 fc13 	bl	80097cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_typedef1, pinforward, GPIO_PIN_SET);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6858      	ldr	r0, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	899b      	ldrh	r3, [r3, #12]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f008 fc0b 	bl	80097cc <HAL_GPIO_WritePin>
	this->CCRx = speed;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	78fa      	ldrb	r2, [r7, #3]
 8000fbc:	601a      	str	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZN7DCMotor12moveBackwordEh>:

void DCMotor::moveBackword(uint8_t speed){
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
	if(speed > 255){
		this->Speed = 255 ;
	}else{
		this->Speed = speed;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	78fa      	ldrb	r2, [r7, #3]
 8000fd6:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(gpio_typedef1, pinforward, GPIO_PIN_RESET);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6858      	ldr	r0, [r3, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	899b      	ldrh	r3, [r3, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f008 fbf2 	bl	80097cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_typedef2, pinbackword, GPIO_PIN_SET);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6898      	ldr	r0, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	89db      	ldrh	r3, [r3, #14]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f008 fbea 	bl	80097cc <HAL_GPIO_WritePin>
	this->CCRx = speed;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	78fa      	ldrb	r2, [r7, #3]
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_ZN7DCMotor9togglepinEv>:
	HAL_GPIO_WritePin(gpio_typedef1, pinforward, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(gpio_typedef2, pinbackword, GPIO_PIN_RESET);
	this->CCRx = 0;
	this->Speed = 0 ;
}
void DCMotor::togglepin(){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(gpio_typedef1, pinforward);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	899b      	ldrh	r3, [r3, #12]
 8001018:	4619      	mov	r1, r3
 800101a:	4610      	mov	r0, r2
 800101c:	f008 fbef 	bl	80097fe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(gpio_typedef2, pinbackword);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	89db      	ldrh	r3, [r3, #14]
 8001028:	4619      	mov	r1, r3
 800102a:	4610      	mov	r0, r2
 800102c:	f008 fbe7 	bl	80097fe <HAL_GPIO_TogglePin>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_ZN7DCMotor8resetpinEv>:
void DCMotor::resetpin(){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(gpio_typedef1, pinforward, GPIO_PIN_RESET);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6858      	ldr	r0, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	899b      	ldrh	r3, [r3, #12]
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	f008 fbbe 	bl	80097cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_typedef2, pinbackword, GPIO_PIN_RESET);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6898      	ldr	r0, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	89db      	ldrh	r3, [r3, #14]
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	f008 fbb6 	bl	80097cc <HAL_GPIO_WritePin>
	this->CCRx = 0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
	this->Speed = 0 ;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_ZN7DCMotor8setSpeedEh>:
void DCMotor::setSpeed(uint8_t speed){
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	70fb      	strb	r3, [r7, #3]
	if(speed < 256){
		this->Speed = speed ;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	78fa      	ldrb	r2, [r7, #3]
 8001086:	701a      	strb	r2, [r3, #0]
		this->CCRx = speed;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	78fa      	ldrb	r2, [r7, #3]
 800108e:	601a      	str	r2, [r3, #0]
	}
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_ZN7DCMotor8speed_upEh>:

void DCMotor::speed_up(uint8_t by){
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	uint16_t temp = by+this->Speed;
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4413      	add	r3, r2
 80010b4:	81fb      	strh	r3, [r7, #14]
	if(temp < 256){
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	2bff      	cmp	r3, #255	; 0xff
 80010ba:	d807      	bhi.n	80010cc <_ZN7DCMotor8speed_upEh+0x30>
		this->Speed += by ;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	4413      	add	r3, r2
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e002      	b.n	80010d2 <_ZN7DCMotor8speed_upEh+0x36>
	}else{
		this->Speed = 255 ;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	22ff      	movs	r2, #255	; 0xff
 80010d0:	701a      	strb	r2, [r3, #0]
	}
	this->CCRx = this->Speed;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_ZN7DCMotor10speed_downEh>:

void DCMotor::speed_down(uint8_t by){
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	int temp = this->Speed-by;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	60fb      	str	r3, [r7, #12]
	if(temp >= 0){
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db07      	blt.n	8001116 <_ZN7DCMotor10speed_downEh+0x2e>
		this->Speed -= by ;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	b2da      	uxtb	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e002      	b.n	800111c <_ZN7DCMotor10speed_downEh+0x34>
	}else{
		this->Speed = 0 ;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
	}
	this->CCRx = this->Speed;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	601a      	str	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_ZN8DCSystemC1ER7DCMotorS1_>:
uint8_t DCMotor::getSpeed(){
	return this->Speed;
}
/******************************************************************************************************************************************************/

DCSystem::DCSystem(DCMotor& r , DCMotor& l):R(r),L(l){
 8001132:	b480      	push	{r7}
 8001134:	b085      	sub	sp, #20
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	611a      	str	r2, [r3, #16]
	this->state         = IDEL ;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2204      	movs	r2, #4
 800114e:	771a      	strb	r2, [r3, #28]
}
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_ZN8DCSystem11moveForwordEh>:
void DCSystem::setCCRx(volatile uint32_t& ccrx_X , volatile uint32_t& ccrx_Y){
	R.setCCRx(ccrx_X);
	L.setCCRx(ccrx_Y);
}

void DCSystem::moveForword(uint8_t speed){
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	70fb      	strb	r3, [r7, #3]
	this->state = MOVINGFORWARD ;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	771a      	strb	r2, [r3, #28]
	R.moveForword(0);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff04 	bl	8000f84 <_ZN7DCMotor11moveForwordEh>
	L.moveForword(0);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fefe 	bl	8000f84 <_ZN7DCMotor11moveForwordEh>
	R.setSpeed(speed);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	78fa      	ldrb	r2, [r7, #3]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff70 	bl	8001076 <_ZN7DCMotor8setSpeedEh>
	L.setSpeed(speed);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	78fa      	ldrb	r2, [r7, #3]
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff69 	bl	8001076 <_ZN7DCMotor8setSpeedEh>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <_ZN8DCSystem12moveBackwordEh>:

void DCSystem::moveBackword(uint8_t speed){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	70fb      	strb	r3, [r7, #3]
	this->state = MOVINGBACKWORD ;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	771a      	strb	r2, [r3, #28]
	R.moveBackword(0);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fefe 	bl	8000fc6 <_ZN7DCMotor12moveBackwordEh>
	L.moveBackword(0);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fef8 	bl	8000fc6 <_ZN7DCMotor12moveBackwordEh>
	R.setSpeed(speed);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	78fa      	ldrb	r2, [r7, #3]
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff49 	bl	8001076 <_ZN7DCMotor8setSpeedEh>
	L.setSpeed(speed);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	78fa      	ldrb	r2, [r7, #3]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff42 	bl	8001076 <_ZN7DCMotor8setSpeedEh>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_ZN8DCSystem8turnLeftEh>:
void DCSystem::turnLeft(uint8_t speed){
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	70fb      	strb	r3, [r7, #3]
	this->state = TURNINGLEFT ;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2202      	movs	r2, #2
 800120a:	771a      	strb	r2, [r3, #28]
	R.moveForword(speed);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	78fa      	ldrb	r2, [r7, #3]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff feb5 	bl	8000f84 <_ZN7DCMotor11moveForwordEh>
	L.moveBackword(speed);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	78fa      	ldrb	r2, [r7, #3]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fecf 	bl	8000fc6 <_ZN7DCMotor12moveBackwordEh>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <_ZN8DCSystem9turnRightEh>:
void DCSystem::turnRight(uint8_t speed){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
	this->state = TURNINGRIGHT ;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2203      	movs	r2, #3
 8001240:	771a      	strb	r2, [r3, #28]
	R.moveBackword(speed);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	78fa      	ldrb	r2, [r7, #3]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff febb 	bl	8000fc6 <_ZN7DCMotor12moveBackwordEh>
	L.moveForword(speed);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	78fa      	ldrb	r2, [r7, #3]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe93 	bl	8000f84 <_ZN7DCMotor11moveForwordEh>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZN8DCSystem4stopEv>:

void DCSystem::stop(){
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
	this->state = IDEL ;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2204      	movs	r2, #4
 8001272:	771a      	strb	r2, [r3, #28]
	L.togglepin();
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fec5 	bl	8001008 <_ZN7DCMotor9togglepinEv>
	R.togglepin();
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fec0 	bl	8001008 <_ZN7DCMotor9togglepinEv>
	HAL_Delay(40);
 8001288:	2028      	movs	r0, #40	; 0x28
 800128a:	f007 f81f 	bl	80082cc <HAL_Delay>
	this->L.resetpin();
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fed0 	bl	8001038 <_ZN7DCMotor8resetpinEv>
	this->R.resetpin();
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fecb 	bl	8001038 <_ZN7DCMotor8resetpinEv>



}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_ZN8DCSystem8set_FdisEh>:

uint8_t DCSystem::getSpeed(){
	return this->L.getSpeed();
}

void DCSystem::set_Fdis(uint8_t dis){
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	70fb      	strb	r3, [r7, #3]
	this->FDistance = dis ;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	78fa      	ldrb	r2, [r7, #3]
 80012ba:	701a      	strb	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_ZN8DCSystem8set_LdisEh>:
void DCSystem::set_Ldis(uint8_t dis){
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
	this->LDistance = dis ;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	705a      	strb	r2, [r3, #1]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_ZN8DCSystem8set_RdisEh>:
void DCSystem::set_Rdis(uint8_t dis){
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	70fb      	strb	r3, [r7, #3]
	this->RDistance = dis ;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	78fa      	ldrb	r2, [r7, #3]
 80012f6:	709a      	strb	r2, [r3, #2]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_ZN8DCSystem12set_encodersEPmS0_>:

void DCSystem::set_encoders(uint32_t* left ,uint32_t* right ){
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	this->encoderL = left ;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	605a      	str	r2, [r3, #4]
	this->encoderR = right ;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_ZN8DCSystem7advanceEtPhS0_>:
uint16_t DCSystem::advance(uint16_t by , uint8_t leftSide[30] ,uint8_t rightSide[30]){
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b08b      	sub	sp, #44	; 0x2c
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	460b      	mov	r3, r1
 8001336:	817b      	strh	r3, [r7, #10]
	uint8_t MINSPEED = 130 ;
 8001338:	2382      	movs	r3, #130	; 0x82
 800133a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint16_t advanced = 0 ,temp = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001342:	2300      	movs	r3, #0
 8001344:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t pulses = (uint32_t)by*17.7;
 8001346:	897b      	ldrh	r3, [r7, #10]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f893 	bl	8000474 <__aeabi_ui2d>
 800134e:	a368      	add	r3, pc, #416	; (adr r3, 80014f0 <_ZN8DCSystem7advanceEtPhS0_+0x1c8>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f908 	bl	8000568 <__aeabi_dmul>
 8001358:	4603      	mov	r3, r0
 800135a:	460c      	mov	r4, r1
 800135c:	4618      	mov	r0, r3
 800135e:	4621      	mov	r1, r4
 8001360:	f7ff fbda 	bl	8000b18 <__aeabi_d2uiz>
 8001364:	4603      	mov	r3, r0
 8001366:	61fb      	str	r3, [r7, #28]
	int error = 0 ;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
	int abserror = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
	*encoderL = 0 ;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
	*encoderR = 0 ;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
	leftSide[0] = this->LDistance;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	785a      	ldrb	r2, [r3, #1]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	701a      	strb	r2, [r3, #0]
	rightSide[0] = this->RDistance;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	789a      	ldrb	r2, [r3, #2]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	701a      	strb	r2, [r3, #0]
	this->moveForword(MINSPEED);
 8001390:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001394:	4619      	mov	r1, r3
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7ff fee1 	bl	800115e <_ZN8DCSystem11moveForwordEh>
	while(*encoderL < pulses && *encoderR < pulses){
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f240 8085 	bls.w	80014b4 <_ZN8DCSystem7advanceEtPhS0_+0x18c>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d97e      	bls.n	80014b4 <_ZN8DCSystem7advanceEtPhS0_+0x18c>
		if(this->FDistance < 10){
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b09      	cmp	r3, #9
 80013bc:	d979      	bls.n	80014b2 <_ZN8DCSystem7advanceEtPhS0_+0x18a>
			break;
		}
		error = *encoderL-*encoderR;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	61bb      	str	r3, [r7, #24]
		if(error >= 1 || error <= -1){
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dc02      	bgt.n	80013da <_ZN8DCSystem7advanceEtPhS0_+0xb2>
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da29      	bge.n	800142e <_ZN8DCSystem7advanceEtPhS0_+0x106>
			if(error < 0){
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da13      	bge.n	8001408 <_ZN8DCSystem7advanceEtPhS0_+0xe0>
				abserror = error * -1;
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	425b      	negs	r3, r3
 80013e4:	617b      	str	r3, [r7, #20]
				this->L.speed_up(abserror);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fe53 	bl	800109c <_ZN7DCMotor8speed_upEh>
				this->R.speed_down(abserror);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fe71 	bl	80010e8 <_ZN7DCMotor10speed_downEh>
			if(error < 0){
 8001406:	e018      	b.n	800143a <_ZN8DCSystem7advanceEtPhS0_+0x112>
			}
			else{
				abserror = error;
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	617b      	str	r3, [r7, #20]
				this->R.speed_up(abserror);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fe40 	bl	800109c <_ZN7DCMotor8speed_upEh>
				this->L.speed_down(abserror);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe5e 	bl	80010e8 <_ZN7DCMotor10speed_downEh>
			if(error < 0){
 800142c:	e005      	b.n	800143a <_ZN8DCSystem7advanceEtPhS0_+0x112>
			}
		}
		else{
			this->moveForword(MINSPEED);
 800142e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001432:	4619      	mov	r1, r3
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7ff fe92 	bl	800115e <_ZN8DCSystem11moveForwordEh>
		}
		temp = (uint16_t)((*encoderL)/17.7);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f817 	bl	8000474 <__aeabi_ui2d>
 8001446:	a32a      	add	r3, pc, #168	; (adr r3, 80014f0 <_ZN8DCSystem7advanceEtPhS0_+0x1c8>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f9b6 	bl	80007bc <__aeabi_ddiv>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	4618      	mov	r0, r3
 8001456:	4621      	mov	r1, r4
 8001458:	f7ff fb5e 	bl	8000b18 <__aeabi_d2uiz>
 800145c:	4603      	mov	r3, r0
 800145e:	847b      	strh	r3, [r7, #34]	; 0x22
		if(temp > advanced){
 8001460:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001462:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001464:	429a      	cmp	r2, r3
 8001466:	d999      	bls.n	800139c <_ZN8DCSystem7advanceEtPhS0_+0x74>
			advanced = temp ;
 8001468:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800146a:	84fb      	strh	r3, [r7, #38]	; 0x26
			leftSide[temp%30] = this->LDistance;
 800146c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <_ZN8DCSystem7advanceEtPhS0_+0x1d0>)
 8001470:	fba3 1302 	umull	r1, r3, r3, r2
 8001474:	0919      	lsrs	r1, r3, #4
 8001476:	460b      	mov	r3, r1
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	1a5b      	subs	r3, r3, r1
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	b29b      	uxth	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	7852      	ldrb	r2, [r2, #1]
 800148c:	701a      	strb	r2, [r3, #0]
			rightSide[temp%30] = this->RDistance;
 800148e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <_ZN8DCSystem7advanceEtPhS0_+0x1d0>)
 8001492:	fba3 1302 	umull	r1, r3, r3, r2
 8001496:	0919      	lsrs	r1, r3, #4
 8001498:	460b      	mov	r3, r1
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	1a5b      	subs	r3, r3, r1
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	7892      	ldrb	r2, [r2, #2]
 80014ae:	701a      	strb	r2, [r3, #0]
	while(*encoderL < pulses && *encoderR < pulses){
 80014b0:	e774      	b.n	800139c <_ZN8DCSystem7advanceEtPhS0_+0x74>
			break;
 80014b2:	bf00      	nop
		}


	}
	this->stop();
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f7ff fed6 	bl	8001266 <_ZN8DCSystem4stopEv>
	advanced = (uint16_t)((*encoderL)/17.7);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffd7 	bl	8000474 <__aeabi_ui2d>
 80014c6:	a30a      	add	r3, pc, #40	; (adr r3, 80014f0 <_ZN8DCSystem7advanceEtPhS0_+0x1c8>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f976 	bl	80007bc <__aeabi_ddiv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	4618      	mov	r0, r3
 80014d6:	4621      	mov	r1, r4
 80014d8:	f7ff fb1e 	bl	8000b18 <__aeabi_d2uiz>
 80014dc:	4603      	mov	r3, r0
 80014de:	84fb      	strh	r3, [r7, #38]	; 0x26
	return advanced;
 80014e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	372c      	adds	r7, #44	; 0x2c
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	f3af 8000 	nop.w
 80014f0:	33333333 	.word	0x33333333
 80014f4:	4031b333 	.word	0x4031b333
 80014f8:	88888889 	.word	0x88888889
 80014fc:	00000000 	.word	0x00000000

08001500 <_ZN8DCSystem8returnByEt>:

uint16_t DCSystem::returnBy(uint16_t by){
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
	uint8_t MINSPEED = 130 ;
 800150c:	2382      	movs	r3, #130	; 0x82
 800150e:	75fb      	strb	r3, [r7, #23]
	uint16_t advanced = 0 ;
 8001510:	2300      	movs	r3, #0
 8001512:	82bb      	strh	r3, [r7, #20]
	uint32_t pulses = (uint32_t)by*17.7;
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ffac 	bl	8000474 <__aeabi_ui2d>
 800151c:	a342      	add	r3, pc, #264	; (adr r3, 8001628 <_ZN8DCSystem8returnByEt+0x128>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f821 	bl	8000568 <__aeabi_dmul>
 8001526:	4603      	mov	r3, r0
 8001528:	460c      	mov	r4, r1
 800152a:	4618      	mov	r0, r3
 800152c:	4621      	mov	r1, r4
 800152e:	f7ff faf3 	bl	8000b18 <__aeabi_d2uiz>
 8001532:	4603      	mov	r3, r0
 8001534:	613b      	str	r3, [r7, #16]
	int error = 0 ;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
	int abserror = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
	*encoderL = 0 ;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
	*encoderR = 0 ;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
	this->moveBackword(MINSPEED);
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fe2a 	bl	80011ac <_ZN8DCSystem12moveBackwordEh>
	while(*encoderL < pulses && *encoderR < pulses){
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d944      	bls.n	80015ee <_ZN8DCSystem8returnByEt+0xee>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	429a      	cmp	r2, r3
 800156e:	d93e      	bls.n	80015ee <_ZN8DCSystem8returnByEt+0xee>

		error = *encoderL-*encoderR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	60fb      	str	r3, [r7, #12]
		if(error > 1 || error < -1){
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b01      	cmp	r3, #1
 8001584:	dc03      	bgt.n	800158e <_ZN8DCSystem8returnByEt+0x8e>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	da29      	bge.n	80015e2 <_ZN8DCSystem8returnByEt+0xe2>
			if(error < 0){
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	da13      	bge.n	80015bc <_ZN8DCSystem8returnByEt+0xbc>
				abserror = error * -1;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	425b      	negs	r3, r3
 8001598:	60bb      	str	r3, [r7, #8]
				this->L.speed_up(abserror);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fd79 	bl	800109c <_ZN7DCMotor8speed_upEh>
				this->R.speed_down(abserror);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fd97 	bl	80010e8 <_ZN7DCMotor10speed_downEh>
			if(error < 0){
 80015ba:	e017      	b.n	80015ec <_ZN8DCSystem8returnByEt+0xec>
			}
			else{
				abserror = error;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	60bb      	str	r3, [r7, #8]
				this->R.speed_up(abserror);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd66 	bl	800109c <_ZN7DCMotor8speed_upEh>
				this->L.speed_down(abserror);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fd84 	bl	80010e8 <_ZN7DCMotor10speed_downEh>
			if(error < 0){
 80015e0:	e004      	b.n	80015ec <_ZN8DCSystem8returnByEt+0xec>
			}
		}else{
			this->moveBackword(MINSPEED);
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fde0 	bl	80011ac <_ZN8DCSystem12moveBackwordEh>
	while(*encoderL < pulses && *encoderR < pulses){
 80015ec:	e7b4      	b.n	8001558 <_ZN8DCSystem8returnByEt+0x58>
		}
	}
	this->stop();
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fe39 	bl	8001266 <_ZN8DCSystem4stopEv>
	advanced = (uint16_t)((*encoderL)/17.7);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff3a 	bl	8000474 <__aeabi_ui2d>
 8001600:	a309      	add	r3, pc, #36	; (adr r3, 8001628 <_ZN8DCSystem8returnByEt+0x128>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7ff f8d9 	bl	80007bc <__aeabi_ddiv>
 800160a:	4603      	mov	r3, r0
 800160c:	460c      	mov	r4, r1
 800160e:	4618      	mov	r0, r3
 8001610:	4621      	mov	r1, r4
 8001612:	f7ff fa81 	bl	8000b18 <__aeabi_d2uiz>
 8001616:	4603      	mov	r3, r0
 8001618:	82bb      	strh	r3, [r7, #20]
	return advanced;
 800161a:	8abb      	ldrh	r3, [r7, #20]
}
 800161c:	4618      	mov	r0, r3
 800161e:	371c      	adds	r7, #28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}
 8001624:	f3af 8000 	nop.w
 8001628:	33333333 	.word	0x33333333
 800162c:	4031b333 	.word	0x4031b333

08001630 <_ZN8DCSystem6turnByEi>:
float DCSystem::turnBy(int by ){
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]

	uint8_t speed = 180 ;
 800163a:	23b4      	movs	r3, #180	; 0xb4
 800163c:	73fb      	strb	r3, [r7, #15]
	uint16_t pt = 0 ;
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
	uint16_t nt = 0 ;
 8001642:	2300      	movs	r3, #0
 8001644:	81bb      	strh	r3, [r7, #12]
	uint16_t dt = 0 ;
 8001646:	2300      	movs	r3, #0
 8001648:	82bb      	strh	r3, [r7, #20]
	float turn = 0;
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
	float GZ = 0 ;
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
	//int error ;
	//int abserror = 0;

	*encoderL = 0 ;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
	*encoderR = 0 ;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
	mpu->reset();
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f9d1 	bl	8001a12 <_ZN7MPU60505resetEv>
	HAL_Delay(100);
 8001670:	2064      	movs	r0, #100	; 0x64
 8001672:	f006 fe2b 	bl	80082cc <HAL_Delay>
	if(mpu->init()){
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f944 	bl	8001908 <_ZN7MPU60504initEv>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80ef 	beq.w	8001866 <_ZN8DCSystem6turnByEi+0x236>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
		if(by > 0){
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	dd72      	ble.n	8001774 <_ZN8DCSystem6turnByEi+0x144>
//			this->turnLeft(speed);
			while(1){
				if(mpu->MPU_getGyroZ(&GZ)){
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f107 0208 	add.w	r2, r7, #8
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fa1f 	bl	8001adc <_ZN7MPU605012MPU_getGyroZEPf>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d04c      	beq.n	800173e <_ZN8DCSystem6turnByEi+0x10e>
					//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
					if(GZ < 0){GZ *= -1.0;}
 80016a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80016a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	d505      	bpl.n	80016be <_ZN8DCSystem6turnByEi+0x8e>
 80016b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016b6:	eef1 7a67 	vneg.f32	s15, s15
 80016ba:	edc7 7a02 	vstr	s15, [r7, #8]
					//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
					this->turnLeft(speed);
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	4619      	mov	r1, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fd99 	bl	80011fa <_ZN8DCSystem8turnLeftEh>
					nt = __HAL_TIM_GET_COUNTER(this->tim);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	81bb      	strh	r3, [r7, #12]
					if(nt <= pt){
 80016d2:	89ba      	ldrh	r2, [r7, #12]
 80016d4:	8afb      	ldrh	r3, [r7, #22]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d808      	bhi.n	80016ec <_ZN8DCSystem6turnByEi+0xbc>
						dt = (10000 - pt) + nt ;
 80016da:	89ba      	ldrh	r2, [r7, #12]
 80016dc:	8afb      	ldrh	r3, [r7, #22]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80016e6:	3310      	adds	r3, #16
 80016e8:	82bb      	strh	r3, [r7, #20]
 80016ea:	e003      	b.n	80016f4 <_ZN8DCSystem6turnByEi+0xc4>
					}else {
						dt = nt - pt ;
 80016ec:	89ba      	ldrh	r2, [r7, #12]
 80016ee:	8afb      	ldrh	r3, [r7, #22]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	82bb      	strh	r3, [r7, #20]
					}
					pt = nt ;
 80016f4:	89bb      	ldrh	r3, [r7, #12]
 80016f6:	82fb      	strh	r3, [r7, #22]
					turn += (float)(GZ*dt/100000.0) ;
 80016f8:	8abb      	ldrh	r3, [r7, #20]
 80016fa:	ee07 3a90 	vmov	s15, r3
 80016fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001702:	edd7 7a02 	vldr	s15, [r7, #8]
 8001706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170a:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800187c <_ZN8DCSystem6turnByEi+0x24c>
 800170e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001712:	ed97 7a04 	vldr	s14, [r7, #16]
 8001716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171a:	edc7 7a04 	vstr	s15, [r7, #16]
					if(turn > by){
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001728:	ed97 7a04 	vldr	s14, [r7, #16]
 800172c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	dc19      	bgt.n	800176a <_ZN8DCSystem6turnByEi+0x13a>
						}
					}else{
						this->turnLeft(speed);
					}
*/
					HAL_Delay(2);
 8001736:	2002      	movs	r0, #2
 8001738:	f006 fdc8 	bl	80082cc <HAL_Delay>
 800173c:	e7a7      	b.n	800168e <_ZN8DCSystem6turnByEi+0x5e>
				}else{
					//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
					//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
					this->stop();
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fd91 	bl	8001266 <_ZN8DCSystem4stopEv>
					//mpu->reset();
					return turnBy(by-turn);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175a:	ee17 1a90 	vmov	r1, s15
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ff66 	bl	8001630 <_ZN8DCSystem6turnByEi>
 8001764:	eef0 7a40 	vmov.f32	s15, s0
 8001768:	e083      	b.n	8001872 <_ZN8DCSystem6turnByEi+0x242>
						break ;
 800176a:	bf00      	nop
				}
			}
			this->stop();
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fd7a 	bl	8001266 <_ZN8DCSystem4stopEv>
 8001772:	e075      	b.n	8001860 <_ZN8DCSystem6turnByEi+0x230>
			//mpu->reset();
			/*
			if(turn > by+2.5){
				return turnBy(by-turn);
			}*/
		}else if (by < 0){
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	da72      	bge.n	8001860 <_ZN8DCSystem6turnByEi+0x230>
//			this->turnRight(speed);
			while(1){
				if(mpu->MPU_getGyroZ(&GZ)){
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f107 0208 	add.w	r2, r7, #8
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f000 f9a9 	bl	8001adc <_ZN7MPU605012MPU_getGyroZEPf>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d04d      	beq.n	800182c <_ZN8DCSystem6turnByEi+0x1fc>
					//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
					if(GZ < 0){GZ *= -1.0;}
 8001790:	edd7 7a02 	vldr	s15, [r7, #8]
 8001794:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179c:	d505      	bpl.n	80017aa <_ZN8DCSystem6turnByEi+0x17a>
 800179e:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a2:	eef1 7a67 	vneg.f32	s15, s15
 80017a6:	edc7 7a02 	vstr	s15, [r7, #8]
					//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
					this->turnRight(speed);
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fd3e 	bl	8001230 <_ZN8DCSystem9turnRightEh>
					nt = __HAL_TIM_GET_COUNTER(this->tim);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	81bb      	strh	r3, [r7, #12]
					if(nt <= pt){
 80017be:	89ba      	ldrh	r2, [r7, #12]
 80017c0:	8afb      	ldrh	r3, [r7, #22]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d808      	bhi.n	80017d8 <_ZN8DCSystem6turnByEi+0x1a8>
						dt = (10000 - pt) + nt ;
 80017c6:	89ba      	ldrh	r2, [r7, #12]
 80017c8:	8afb      	ldrh	r3, [r7, #22]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80017d2:	3310      	adds	r3, #16
 80017d4:	82bb      	strh	r3, [r7, #20]
 80017d6:	e003      	b.n	80017e0 <_ZN8DCSystem6turnByEi+0x1b0>
					}else {
						dt = nt - pt ;
 80017d8:	89ba      	ldrh	r2, [r7, #12]
 80017da:	8afb      	ldrh	r3, [r7, #22]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	82bb      	strh	r3, [r7, #20]
					}
					pt = nt ;
 80017e0:	89bb      	ldrh	r3, [r7, #12]
 80017e2:	82fb      	strh	r3, [r7, #22]
					turn += (float)(GZ*dt/100000.0) ;
 80017e4:	8abb      	ldrh	r3, [r7, #20]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f6:	eddf 6a21 	vldr	s13, [pc, #132]	; 800187c <_ZN8DCSystem6turnByEi+0x24c>
 80017fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001806:	edc7 7a04 	vstr	s15, [r7, #16]
					if(turn > -by){
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	425b      	negs	r3, r3
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001816:	ed97 7a04 	vldr	s14, [r7, #16]
 800181a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	dc19      	bgt.n	8001858 <_ZN8DCSystem6turnByEi+0x228>
						}
					}else{
						this->turnRight(speed);
					}
*/
					HAL_Delay(2);
 8001824:	2002      	movs	r0, #2
 8001826:	f006 fd51 	bl	80082cc <HAL_Delay>
 800182a:	e7a6      	b.n	800177a <_ZN8DCSystem6turnByEi+0x14a>
				}else{
					this->stop();
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fd1a 	bl	8001266 <_ZN8DCSystem4stopEv>
					//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
					return turnBy(by+turn);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001848:	ee17 1a90 	vmov	r1, s15
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff feef 	bl	8001630 <_ZN8DCSystem6turnByEi>
 8001852:	eef0 7a40 	vmov.f32	s15, s0
 8001856:	e00c      	b.n	8001872 <_ZN8DCSystem6turnByEi+0x242>
						break;
 8001858:	bf00      	nop
				}
			}
			this->stop();
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fd03 	bl	8001266 <_ZN8DCSystem4stopEv>
				return turnBy(by-turn);
			}*/
		}
		//this->stop();
		//mpu->reset();
		return turn ;
 8001860:	edd7 7a04 	vldr	s15, [r7, #16]
 8001864:	e005      	b.n	8001872 <_ZN8DCSystem6turnByEi+0x242>
	}else{
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
		return turnBy(by);
 8001866:	6839      	ldr	r1, [r7, #0]
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fee1 	bl	8001630 <_ZN8DCSystem6turnByEi>
 800186e:	eef0 7a40 	vmov.f32	s15, s0
	}
	return 0 ;
}
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	47c35000 	.word	0x47c35000

08001880 <_ZN8DCSystem6setMPUEP7MPU6050>:
}
int DCSystem::map(int s , int a1 , int a2 , int b1 , int b2 ){
	return (int)(b1+((s-a1)*(b2-b1)/(a2-a1)));
}

void DCSystem::setMPU(MPU6050* mpu ){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
	this->mpu = mpu ;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	615a      	str	r2, [r3, #20]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_ZN8DCSystem6setTIMEP17TIM_HandleTypeDef>:
void DCSystem::setTIM(TIM_HandleTypeDef* tim){
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	this->tim = tim ;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	619a      	str	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_ZN7MPU6050C1Ev>:
 *
 *  Created on: Jun 3, 2021
 *      Author: jwan
 */
#include "MPU6050.h"
MPU6050::MPU6050(){
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <_ZN7MPU6050C1Ev+0x4c>)
 80018dc:	60da      	str	r2, [r3, #12]
	 GoffsetX = 0 ;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
	 GoffsetY = 0 ;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	605a      	str	r2, [r3, #4]
	 GoffsetZ = 0 ;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]

}
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	42830000 	.word	0x42830000

08001908 <_ZN7MPU60504initEv>:

bool MPU6050::init(){
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af04      	add	r7, sp, #16
 800190e:	6078      	str	r0, [r7, #4]
	uint8_t id = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	73bb      	strb	r3, [r7, #14]
	uint8_t Data = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef test = HAL_I2C_Mem_Read(i2c, MPU_ADDR, MPU6050_RA_WHO_AM_I, 1, &id, 1, 1000);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6918      	ldr	r0, [r3, #16]
 800191c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	2301      	movs	r3, #1
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	f107 030e 	add.w	r3, r7, #14
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	2275      	movs	r2, #117	; 0x75
 8001930:	21d0      	movs	r1, #208	; 0xd0
 8001932:	f008 f9c9 	bl	8009cc8 <HAL_I2C_Mem_Read>
 8001936:	4603      	mov	r3, r0
 8001938:	73fb      	strb	r3, [r7, #15]
	if(test == HAL_OK){
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d163      	bne.n	8001a08 <_ZN7MPU60504initEv+0x100>
		Data = 0x0B;
 8001940:	230b      	movs	r3, #11
 8001942:	737b      	strb	r3, [r7, #13]
		test = HAL_I2C_Mem_Write(i2c, MPU_ADDR, MPU6050_RA_PWR_MGMT_1  , 1, &Data, 1, 1000);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6918      	ldr	r0, [r3, #16]
 8001948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194c:	9302      	str	r3, [sp, #8]
 800194e:	2301      	movs	r3, #1
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	f107 030d 	add.w	r3, r7, #13
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	226b      	movs	r2, #107	; 0x6b
 800195c:	21d0      	movs	r1, #208	; 0xd0
 800195e:	f008 f8b9 	bl	8009ad4 <HAL_I2C_Mem_Write>
 8001962:	4603      	mov	r3, r0
 8001964:	73fb      	strb	r3, [r7, #15]
		Data = 0x00;
 8001966:	2300      	movs	r3, #0
 8001968:	737b      	strb	r3, [r7, #13]
		test = HAL_I2C_Mem_Write(i2c, MPU_ADDR, MPU6050_RA_SMPLRT_DIV  , 1, &Data, 1, 1000);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6918      	ldr	r0, [r3, #16]
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	9302      	str	r3, [sp, #8]
 8001974:	2301      	movs	r3, #1
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	f107 030d 	add.w	r3, r7, #13
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2301      	movs	r3, #1
 8001980:	2219      	movs	r2, #25
 8001982:	21d0      	movs	r1, #208	; 0xd0
 8001984:	f008 f8a6 	bl	8009ad4 <HAL_I2C_Mem_Write>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]
		Data = 0x00;
 800198c:	2300      	movs	r3, #0
 800198e:	737b      	strb	r3, [r7, #13]
		test = HAL_I2C_Mem_Write(i2c, MPU_ADDR, MPU6050_RA_CONFIG      , 1, &Data, 1, 1000);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6918      	ldr	r0, [r3, #16]
 8001994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	2301      	movs	r3, #1
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	f107 030d 	add.w	r3, r7, #13
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2301      	movs	r3, #1
 80019a6:	221a      	movs	r2, #26
 80019a8:	21d0      	movs	r1, #208	; 0xd0
 80019aa:	f008 f893 	bl	8009ad4 <HAL_I2C_Mem_Write>
 80019ae:	4603      	mov	r3, r0
 80019b0:	73fb      	strb	r3, [r7, #15]
		Data = 0x08;
 80019b2:	2308      	movs	r3, #8
 80019b4:	737b      	strb	r3, [r7, #13]
		test = HAL_I2C_Mem_Write(i2c, MPU_ADDR, MPU6050_RA_GYRO_CONFIG , 1, &Data, 1, 1000);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6918      	ldr	r0, [r3, #16]
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	2301      	movs	r3, #1
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	f107 030d 	add.w	r3, r7, #13
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	221b      	movs	r2, #27
 80019ce:	21d0      	movs	r1, #208	; 0xd0
 80019d0:	f008 f880 	bl	8009ad4 <HAL_I2C_Mem_Write>
 80019d4:	4603      	mov	r3, r0
 80019d6:	73fb      	strb	r3, [r7, #15]
		Data = 0x00;
 80019d8:	2300      	movs	r3, #0
 80019da:	737b      	strb	r3, [r7, #13]
		test = HAL_I2C_Mem_Write(i2c, MPU_ADDR, MPU6050_RA_ACCEL_CONFIG, 1, &Data, 1, 1000);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6918      	ldr	r0, [r3, #16]
 80019e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e4:	9302      	str	r3, [sp, #8]
 80019e6:	2301      	movs	r3, #1
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	f107 030d 	add.w	r3, r7, #13
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2301      	movs	r3, #1
 80019f2:	221c      	movs	r2, #28
 80019f4:	21d0      	movs	r1, #208	; 0xd0
 80019f6:	f008 f86d 	bl	8009ad4 <HAL_I2C_Mem_Write>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]

		set_GoffsetZ();
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f83a 	bl	8001a78 <_ZN7MPU605012set_GoffsetZEv>
		return true ;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <_ZN7MPU60504initEv+0x102>
	}else{
		return false ;
 8001a08:	2300      	movs	r3, #0
	}
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_ZN7MPU60505resetEv>:

void MPU6050::reset(){
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b088      	sub	sp, #32
 8001a16:	af04      	add	r7, sp, #16
 8001a18:	6078      	str	r0, [r7, #4]
	uint8_t Data = 0x80;
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU_ADDR, MPU6050_RA_PWR_MGMT_1  , 1, &Data, 1, 1000);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6918      	ldr	r0, [r3, #16]
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	f107 030f 	add.w	r3, r7, #15
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2301      	movs	r3, #1
 8001a34:	226b      	movs	r2, #107	; 0x6b
 8001a36:	21d0      	movs	r1, #208	; 0xd0
 8001a38:	f008 f84c 	bl	8009ad4 <HAL_I2C_Mem_Write>
	GoffsetX = 0 ;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
	GoffsetY = 0 ;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]
	GoffsetZ = 0 ;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]

}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_ZN7MPU60507set_i2cEP17I2C_HandleTypeDef>:
	}
	HAL_I2C_Mem_Write(i2c, MPU_ADDR, MPU6050_RA_PWR_MGMT_1  , 1, &Data, 1, 1000);
	return true ;
}

void MPU6050::set_i2c(I2C_HandleTypeDef* i2c){
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	this->i2c = i2c ;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	611a      	str	r2, [r3, #16]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_ZN7MPU605012set_GoffsetZEv>:


void MPU6050::set_GoffsetZ(){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	float sum = 0 ;
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
	float GZ;
	for(int i = 0 ; i < LOOPS ; i++){
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a90:	da14      	bge.n	8001abc <_ZN7MPU605012set_GoffsetZEv+0x44>
		MPU_getGyroZ( &GZ);
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f81f 	bl	8001adc <_ZN7MPU605012MPU_getGyroZEPf>
		sum += GZ;
 8001a9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aa2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aaa:	edc7 7a05 	vstr	s15, [r7, #20]
		HAL_Delay(1);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f006 fc0c 	bl	80082cc <HAL_Delay>
	for(int i = 0 ; i < LOOPS ; i++){
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	e7e6      	b.n	8001a8a <_ZN7MPU605012set_GoffsetZEv+0x12>
	}
	GoffsetZ = (float)sum/LOOPS;
 8001abc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac0:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001ad8 <_ZN7MPU605012set_GoffsetZEv+0x60>
 8001ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	43fa0000 	.word	0x43fa0000

08001adc <_ZN7MPU605012MPU_getGyroZEPf>:
		*gyroY = temp2/gyro_lsb_to_degsec - GoffsetY;
		return true ;
	}
	return false ;
}
bool MPU6050::MPU_getGyroZ(float* gyroZ){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af04      	add	r7, sp, #16
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
	uint8_t temp[2];
	HAL_StatusTypeDef test = HAL_I2C_Mem_Read(i2c, MPU_ADDR, MPU6050_RA_GYRO_ZOUT_H , 1, temp, 2, 1000);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6918      	ldr	r0, [r3, #16]
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	2302      	movs	r3, #2
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2301      	movs	r3, #1
 8001afc:	2247      	movs	r2, #71	; 0x47
 8001afe:	21d0      	movs	r1, #208	; 0xd0
 8001b00:	f008 f8e2 	bl	8009cc8 <HAL_I2C_Mem_Read>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]
	if(test == HAL_OK){
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d11b      	bne.n	8001b46 <_ZN7MPU605012MPU_getGyroZEPf+0x6a>
		int16_t temp2 = (int16_t)(temp[0] << 8 | temp[1]);;
 8001b0e:	7a3b      	ldrb	r3, [r7, #8]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	7a7b      	ldrb	r3, [r7, #9]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	81bb      	strh	r3, [r7, #12]
		*gyroZ = temp2/gyro_lsb_to_degsec - GoffsetZ;
 8001b1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	edc3 7a00 	vstr	s15, [r3]
		return true ;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <_ZN7MPU605012MPU_getGyroZEPf+0x6c>
	}
	return false ;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_ZN7Tracker14watering_palntEv>:
		void restart();

		void set_sunlight_counter(int16_t c){this->sunlight_counter = c ;}
		void set_sunlight_scheduale(int16_t s){this->sunlight_scheduale = s;}

		void watering_palnt(){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
			if(this->watering){
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7cdb      	ldrb	r3, [r3, #19]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01c      	beq.n	8001b9a <_ZN7Tracker14watering_palntEv+0x4a>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b66:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <_ZN7Tracker14watering_palntEv+0x54>)
 8001b68:	f007 fe30 	bl	80097cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2102      	movs	r1, #2
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <_ZN7Tracker14watering_palntEv+0x58>)
 8001b72:	f007 fe2b 	bl	80097cc <HAL_GPIO_WritePin>
				HAL_Delay(2000);
 8001b76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b7a:	f006 fba7 	bl	80082cc <HAL_Delay>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2102      	movs	r1, #2
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <_ZN7Tracker14watering_palntEv+0x58>)
 8001b84:	f007 fe22 	bl	80097cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <_ZN7Tracker14watering_palntEv+0x54>)
 8001b90:	f007 fe1c 	bl	80097cc <HAL_GPIO_WritePin>
				this->watering = false ;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	74da      	strb	r2, [r3, #19]
				/***
				 * to do
				 * watering the plant
				 */
			}
		}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40021000 	.word	0x40021000

08001bac <_ZN7TrackerC1ER8DCSystem>:
	this->matrix[r][c]= 0;
	this->dir = N;
	this->init_graph();
}
*/
Tracker::Tracker(DCSystem& dcsys ):dcSys(dcsys){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	705a      	strb	r2, [r3, #1]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	81da      	strh	r2, [r3, #14]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	821a      	strh	r2, [r3, #16]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	749a      	strb	r2, [r3, #18]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	74da      	strb	r2, [r3, #19]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	615a      	str	r2, [r3, #20]
	for(uint8_t i = 0 ; i < 30 ; i++){
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b1d      	cmp	r3, #29
 8001be8:	d819      	bhi.n	8001c1e <_ZN7TrackerC1ER8DCSystem+0x72>
		for(uint8_t j = 0 ; j < 30 ; j++){
 8001bea:	2300      	movs	r3, #0
 8001bec:	73bb      	strb	r3, [r7, #14]
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	2b1d      	cmp	r3, #29
 8001bf2:	d810      	bhi.n	8001c16 <_ZN7TrackerC1ER8DCSystem+0x6a>
			this->matrix[i][j]= -2;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	7bb8      	ldrb	r0, [r7, #14]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4403      	add	r3, r0
 8001c04:	3306      	adds	r3, #6
 8001c06:	f06f 0201 	mvn.w	r2, #1
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t j = 0 ; j < 30 ; j++){
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	3301      	adds	r3, #1
 8001c12:	73bb      	strb	r3, [r7, #14]
 8001c14:	e7eb      	b.n	8001bee <_ZN7TrackerC1ER8DCSystem+0x42>
	for(uint8_t i = 0 ; i < 30 ; i++){
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e7e2      	b.n	8001be4 <_ZN7TrackerC1ER8DCSystem+0x38>
		}
	}
	this->r = (int)(SIZE)/2 ;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001c24:	3318      	adds	r3, #24
 8001c26:	220f      	movs	r2, #15
 8001c28:	701a      	strb	r2, [r3, #0]
	this->c = (int)(SIZE)/2 ;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001c30:	3319      	adds	r3, #25
 8001c32:	220f      	movs	r2, #15
 8001c34:	701a      	strb	r2, [r3, #0]
	this->matrix[r][c]= 0;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001c3c:	3318      	adds	r3, #24
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001c48:	3319      	adds	r3, #25
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	1a5b      	subs	r3, r3, r1
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4403      	add	r3, r0
 8001c5a:	3306      	adds	r3, #6
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	this->dir = N;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001c68:	331a      	adds	r3, #26
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
	this->init_graph();
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f001 fc44 	bl	80034fc <_ZN7Tracker10init_graphEv>
}
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_ZN7Tracker7restartEv>:

void Tracker::restart(){
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0 ; i < 30 ; i++){
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	2b1d      	cmp	r3, #29
 8001c8e:	d819      	bhi.n	8001cc4 <_ZN7Tracker7restartEv+0x46>
		for(uint8_t j = 0 ; j < 30 ; j++){
 8001c90:	2300      	movs	r3, #0
 8001c92:	73bb      	strb	r3, [r7, #14]
 8001c94:	7bbb      	ldrb	r3, [r7, #14]
 8001c96:	2b1d      	cmp	r3, #29
 8001c98:	d810      	bhi.n	8001cbc <_ZN7Tracker7restartEv+0x3e>
			this->matrix[i][j]= -2;
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	7bb8      	ldrb	r0, [r7, #14]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4403      	add	r3, r0
 8001caa:	3306      	adds	r3, #6
 8001cac:	f06f 0201 	mvn.w	r2, #1
 8001cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t j = 0 ; j < 30 ; j++){
 8001cb4:	7bbb      	ldrb	r3, [r7, #14]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	73bb      	strb	r3, [r7, #14]
 8001cba:	e7eb      	b.n	8001c94 <_ZN7Tracker7restartEv+0x16>
	for(uint8_t i = 0 ; i < 30 ; i++){
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	e7e2      	b.n	8001c8a <_ZN7Tracker7restartEv+0xc>
		}
	}
	this->init_graph();
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f001 fc19 	bl	80034fc <_ZN7Tracker10init_graphEv>
}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <_ZN7Tracker10set_panelsEtttt>:
void Tracker::set_panels(uint16_t tl , uint16_t tr , uint16_t bl , uint16_t br ){
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	4608      	mov	r0, r1
 8001cdc:	4611      	mov	r1, r2
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	817b      	strh	r3, [r7, #10]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	813b      	strh	r3, [r7, #8]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	80fb      	strh	r3, [r7, #6]
	this->panelFL = tl ;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	897a      	ldrh	r2, [r7, #10]
 8001cf0:	80da      	strh	r2, [r3, #6]
	this->panelFR = tr ;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	893a      	ldrh	r2, [r7, #8]
 8001cf6:	811a      	strh	r2, [r3, #8]
	this->panelBL = bl ;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	88fa      	ldrh	r2, [r7, #6]
 8001cfc:	815a      	strh	r2, [r3, #10]
	this->panelBR = br ;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8b3a      	ldrh	r2, [r7, #24]
 8001d02:	819a      	strh	r2, [r3, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_ZN7Tracker8set_FdisEh>:
			dcSys.stop();
	}

}
*/
void Tracker::set_Fdis(uint8_t dis){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
	this->FDistance = dis ;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	709a      	strb	r2, [r3, #2]
	this->dcSys.set_Fdis(dis);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fabd 	bl	80012aa <_ZN8DCSystem8set_FdisEh>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_ZN7Tracker8set_LdisEh>:
void Tracker::set_Ldis(uint8_t dis){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	70fb      	strb	r3, [r7, #3]
	this->LDistance = dis ;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	70da      	strb	r2, [r3, #3]
	this->dcSys.set_Ldis(dis);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fab8 	bl	80012c8 <_ZN8DCSystem8set_LdisEh>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_ZN7Tracker8set_RdisEh>:
void Tracker::set_Rdis(uint8_t dis){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
	this->RDistance = dis ;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	78fa      	ldrb	r2, [r7, #3]
 8001d70:	711a      	strb	r2, [r3, #4]
	this->dcSys.set_Rdis(dis);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fab3 	bl	80012e6 <_ZN8DCSystem8set_RdisEh>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZN7Tracker4copyEPhS0_S0_S0_>:
void Tracker::copy(uint8_t dest1[30] ,uint8_t dest2[30],uint8_t src1[30],uint8_t src2[30]){
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
	for(int i = 0 ; i < 30 ; i++){
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b1d      	cmp	r3, #29
 8001d9e:	dc13      	bgt.n	8001dc8 <_ZN7Tracker4copyEPhS0_S0_S0_+0x40>
		dest1[i] = src1[i];
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	441a      	add	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	440b      	add	r3, r1
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	701a      	strb	r2, [r3, #0]
		dest2[i] = src2[i];
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	6a3a      	ldr	r2, [r7, #32]
 8001db4:	441a      	add	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	440b      	add	r3, r1
 8001dbc:	7812      	ldrb	r2, [r2, #0]
 8001dbe:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 30 ; i++){
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e7e8      	b.n	8001d9a <_ZN7Tracker4copyEPhS0_S0_S0_+0x12>
	}
}
 8001dc8:	bf00      	nop
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_ZN7Tracker4copyEPhS0_hh>:

void Tracker::copy(uint8_t dest1[30] ,uint8_t dest2[30],uint8_t src1,uint8_t src2){
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	70fb      	strb	r3, [r7, #3]
	for(int i = 0 ; i < 30 ; i++){
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b1d      	cmp	r3, #29
 8001dea:	dc0e      	bgt.n	8001e0a <_ZN7Tracker4copyEPhS0_hh+0x36>
		dest1[i] = src1;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	4413      	add	r3, r2
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	701a      	strb	r2, [r3, #0]
		dest2[i] = src2;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e00:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 30 ; i++){
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e7ed      	b.n	8001de6 <_ZN7Tracker4copyEPhS0_hh+0x12>
	}
}
 8001e0a:	bf00      	nop
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_ZN7Tracker5countEPhS0_S0_S0_h>:

void Tracker::count(uint8_t src1[30],uint8_t src2[30],uint8_t* count1,uint8_t* count2,uint8_t lessThan){
 8001e16:	b480      	push	{r7}
 8001e18:	b087      	sub	sp, #28
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	603b      	str	r3, [r7, #0]
	*count1 = 0 ;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
	*count2 = 0 ;
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0 ; i < 30 ; i++){
 8001e30:	2300      	movs	r3, #0
 8001e32:	75fb      	strb	r3, [r7, #23]
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b1d      	cmp	r3, #29
 8001e38:	d81f      	bhi.n	8001e7a <_ZN7Tracker5countEPhS0_S0_S0_h+0x64>
		if(src1[i] < lessThan){(*count1)++;}
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	4413      	add	r3, r2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d905      	bls.n	8001e56 <_ZN7Tracker5countEPhS0_S0_S0_h+0x40>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	701a      	strb	r2, [r3, #0]
		if(src2[i] < lessThan){(*count2)++;}
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d905      	bls.n	8001e72 <_ZN7Tracker5countEPhS0_S0_S0_h+0x5c>
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0 ; i < 30 ; i++){
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	3301      	adds	r3, #1
 8001e76:	75fb      	strb	r3, [r7, #23]
 8001e78:	e7dc      	b.n	8001e34 <_ZN7Tracker5countEPhS0_S0_S0_h+0x1e>
	}
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <_ZN7Tracker8traverseEv>:

uint8_t Tracker::traverse(){
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b09b      	sub	sp, #108	; 0x6c
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	6078      	str	r0, [r7, #4]

	int flag=0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	65fb      	str	r3, [r7, #92]	; 0x5c
	int d = -1 ;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
 8001e98:	65bb      	str	r3, [r7, #88]	; 0x58
	uint8_t leftSide[30] , rightSide[30];
	uint8_t leftobstacles = 0 , rightobstacles = 0 , stucked = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	72fb      	strb	r3, [r7, #11]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	72bb      	strb	r3, [r7, #10]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t fdist_obstacle = 15 ;
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	int c = 0 ;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	653b      	str	r3, [r7, #80]	; 0x50
	int cc= 0 ;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	64fb      	str	r3, [r7, #76]	; 0x4c

	if(this->sunlight_counter > this->sunlight_scheduale){
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	dd04      	ble.n	8001ed0 <_ZN7Tracker8traverseEv+0x48>
		return this->go_to_shadow();
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f002 fe50 	bl	8004b6c <_ZN7Tracker12go_to_shadowEv>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	e367      	b.n	80025a0 <_ZN7Tracker8traverseEv+0x718>
	}
	this->copy(leftSide, rightSide, this->LDistance, this->RDistance);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	78d8      	ldrb	r0, [r3, #3]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	791b      	ldrb	r3, [r3, #4]
 8001ed8:	f107 020c 	add.w	r2, r7, #12
 8001edc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff75 	bl	8001dd4 <_ZN7Tracker4copyEPhS0_hh>
	while(1){
		watering_palnt();
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fe30 	bl	8001b50 <_ZN7Tracker14watering_palntEv>
		if(!enf && !ok){
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f083 0301 	eor.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <_ZN7Tracker8traverseEv+0x8e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	785b      	ldrb	r3, [r3, #1]
 8001f02:	f083 0301 	eor.w	r3, r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d004      	beq.n	8001f16 <_ZN7Tracker8traverseEv+0x8e>
			this->isOP = false ;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	749a      	strb	r2, [r3, #18]
			return 6 ;
 8001f12:	2306      	movs	r3, #6
 8001f14:	e344      	b.n	80025a0 <_ZN7Tracker8traverseEv+0x718>
		}
		flag = 0 ;
 8001f16:	2300      	movs	r3, #0
 8001f18:	65fb      	str	r3, [r7, #92]	; 0x5c
		leftobstacles = 0 ;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	72fb      	strb	r3, [r7, #11]
		rightobstacles= 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	72bb      	strb	r3, [r7, #10]
		stucked = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		this->count(leftSide, rightSide, &leftobstacles, &rightobstacles, 30);
 8001f28:	f107 000b 	add.w	r0, r7, #11
 8001f2c:	f107 020c 	add.w	r2, r7, #12
 8001f30:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001f34:	231e      	movs	r3, #30
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	f107 030a 	add.w	r3, r7, #10
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff68 	bl	8001e16 <_ZN7Tracker5countEPhS0_S0_S0_h>
						}
		///////////////////////////////////////////////
		this->matrix[this->r][this->c] = this->max() ;
		*/

		this->matrix[this->r][this->c] = this->max() ;
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f002 fbf0 	bl	800472c <_ZN7Tracker3maxEv>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001f56:	3318      	adds	r3, #24
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001f62:	3319      	adds	r3, #25
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461c      	mov	r4, r3
 8001f68:	4610      	mov	r0, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	1a5b      	subs	r3, r3, r1
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4423      	add	r3, r4
 8001f76:	3306      	adds	r3, #6
 8001f78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
		if(this->matrix[this->r][this->c] >= PANELNUM){
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001f82:	3318      	adds	r3, #24
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	4619      	mov	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001f8e:	3319      	adds	r3, #25
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1a5b      	subs	r3, r3, r1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4403      	add	r3, r0
 8001fa0:	3306      	adds	r3, #6
 8001fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	dd07      	ble.n	8001fba <_ZN7Tracker8traverseEv+0x132>
			this->isOP = false ;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	749a      	strb	r2, [r3, #18]
			this->mark_unvisited();
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f002 fbe4 	bl	800477e <_ZN7Tracker14mark_unvisitedEv>
			return 5 ;
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	e2f2      	b.n	80025a0 <_ZN7Tracker8traverseEv+0x718>
		}else{
			this->isOP = true ;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	749a      	strb	r2, [r3, #18]
		}
		switch(this->dir){
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001fc6:	331a      	adds	r3, #26
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	f200 8268 	bhi.w	80024a0 <_ZN7Tracker8traverseEv+0x618>
 8001fd0:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <_ZN7Tracker8traverseEv+0x150>)
 8001fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd6:	bf00      	nop
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08002119 	.word	0x08002119
 8001fe0:	08002247 	.word	0x08002247
 8001fe4:	08002377 	.word	0x08002377
			case N:
				if(rightobstacles > 2 && this->c < SIZE-1){          // obstacle on right
 8001fe8:	7abb      	ldrb	r3, [r7, #10]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d92d      	bls.n	800204a <_ZN7Tracker8traverseEv+0x1c2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001ff4:	3319      	adds	r3, #25
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b1c      	cmp	r3, #28
 8001ffa:	d826      	bhi.n	800204a <_ZN7Tracker8traverseEv+0x1c2>
					this->matrix[this->r][this->c+1] = -3 ;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002002:	3318      	adds	r3, #24
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800200e:	3319      	adds	r3, #25
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	1c59      	adds	r1, r3, #1
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4603      	mov	r3, r0
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	1a1b      	subs	r3, r3, r0
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	440b      	add	r3, r1
 8002020:	3306      	adds	r3, #6
 8002022:	f06f 0102 	mvn.w	r1, #2
 8002026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002030:	3318      	adds	r3, #24
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800203c:	3319      	adds	r3, #25
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	461a      	mov	r2, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f001 fb01 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2 && this->c > 0){               // obstacle on the left
 800204a:	7afb      	ldrb	r3, [r7, #11]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d92d      	bls.n	80020ac <_ZN7Tracker8traverseEv+0x224>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002056:	3319      	adds	r3, #25
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d026      	beq.n	80020ac <_ZN7Tracker8traverseEv+0x224>
					this->matrix[this->r][this->c-1] = -3 ;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002064:	3318      	adds	r3, #24
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002070:	3319      	adds	r3, #25
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	1e59      	subs	r1, r3, #1
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4603      	mov	r3, r0
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	1a1b      	subs	r3, r3, r0
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	440b      	add	r3, r1
 8002082:	3306      	adds	r3, #6
 8002084:	f06f 0102 	mvn.w	r1, #2
 8002088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c-1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002092:	3318      	adds	r3, #24
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800209e:	3319      	adds	r3, #25
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	461a      	mov	r2, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f001 fad0 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->r > 0){               // obstacle in the front
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	789b      	ldrb	r3, [r3, #2]
 80020b0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80020b4:	429a      	cmp	r2, r3
 80020b6:	f240 81f5 	bls.w	80024a4 <_ZN7Tracker8traverseEv+0x61c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80020c0:	3318      	adds	r3, #24
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 81ed 	beq.w	80024a4 <_ZN7Tracker8traverseEv+0x61c>
					this->matrix[this->r-1][this->c] = -3 ;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80020d0:	3318      	adds	r3, #24
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	1e5a      	subs	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80020dc:	3319      	adds	r3, #25
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4403      	add	r3, r0
 80020ee:	3306      	adds	r3, #6
 80020f0:	f06f 0202 	mvn.w	r2, #2
 80020f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r-1, this->c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80020fe:	3318      	adds	r3, #24
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	1e59      	subs	r1, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800210a:	3319      	adds	r3, #25
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f001 fa9b 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 8002116:	e1c5      	b.n	80024a4 <_ZN7Tracker8traverseEv+0x61c>
			case E:
				if(rightobstacles > 2 && this->r < SIZE-1){          // obstacle on right
 8002118:	7abb      	ldrb	r3, [r7, #10]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d92c      	bls.n	8002178 <_ZN7Tracker8traverseEv+0x2f0>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002124:	3318      	adds	r3, #24
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b1c      	cmp	r3, #28
 800212a:	d825      	bhi.n	8002178 <_ZN7Tracker8traverseEv+0x2f0>
					this->matrix[this->r+1][this->c] = -3 ;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002132:	3318      	adds	r3, #24
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800213e:	3319      	adds	r3, #25
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4403      	add	r3, r0
 8002150:	3306      	adds	r3, #6
 8002152:	f06f 0202 	mvn.w	r2, #2
 8002156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r+1, this->c);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002160:	3318      	adds	r3, #24
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	1c59      	adds	r1, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800216c:	3319      	adds	r3, #25
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f001 fa6a 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2  && this->r > 0){               // obstacle on the left
 8002178:	7afb      	ldrb	r3, [r7, #11]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d92c      	bls.n	80021d8 <_ZN7Tracker8traverseEv+0x350>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002184:	3318      	adds	r3, #24
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d025      	beq.n	80021d8 <_ZN7Tracker8traverseEv+0x350>
					this->matrix[this->r-1][this->c] = -3 ;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002192:	3318      	adds	r3, #24
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	1e5a      	subs	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800219e:	3319      	adds	r3, #25
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4403      	add	r3, r0
 80021b0:	3306      	adds	r3, #6
 80021b2:	f06f 0202 	mvn.w	r2, #2
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r-1, this->c);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80021c0:	3318      	adds	r3, #24
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	1e59      	subs	r1, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80021cc:	3319      	adds	r3, #25
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f001 fa3a 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->c < SIZE-1){               // obstacle in the front
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	789b      	ldrb	r3, [r3, #2]
 80021dc:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f240 8161 	bls.w	80024a8 <_ZN7Tracker8traverseEv+0x620>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80021ec:	3319      	adds	r3, #25
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b1c      	cmp	r3, #28
 80021f2:	f200 8159 	bhi.w	80024a8 <_ZN7Tracker8traverseEv+0x620>
					this->matrix[this->r][this->c+1] = -3 ;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80021fc:	3318      	adds	r3, #24
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002208:	3319      	adds	r3, #25
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4603      	mov	r3, r0
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a1b      	subs	r3, r3, r0
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	440b      	add	r3, r1
 800221a:	3306      	adds	r3, #6
 800221c:	f06f 0102 	mvn.w	r1, #2
 8002220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800222a:	3318      	adds	r3, #24
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	4619      	mov	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002236:	3319      	adds	r3, #25
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	461a      	mov	r2, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f001 fa04 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 8002244:	e130      	b.n	80024a8 <_ZN7Tracker8traverseEv+0x620>

			case S:
				if(rightobstacles > 2  && this->c > 0){          // obstacle on right
 8002246:	7abb      	ldrb	r3, [r7, #10]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d92d      	bls.n	80022a8 <_ZN7Tracker8traverseEv+0x420>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002252:	3319      	adds	r3, #25
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d026      	beq.n	80022a8 <_ZN7Tracker8traverseEv+0x420>
					this->matrix[this->r][this->c-1] = -3 ;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002260:	3318      	adds	r3, #24
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800226c:	3319      	adds	r3, #25
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	1e59      	subs	r1, r3, #1
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4603      	mov	r3, r0
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a1b      	subs	r3, r3, r0
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	440b      	add	r3, r1
 800227e:	3306      	adds	r3, #6
 8002280:	f06f 0102 	mvn.w	r1, #2
 8002284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c-1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800228e:	3318      	adds	r3, #24
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	4619      	mov	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800229a:	3319      	adds	r3, #25
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	3b01      	subs	r3, #1
 80022a0:	461a      	mov	r2, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f001 f9d2 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2  && this->c < SIZE-1){               // obstacle on the left
 80022a8:	7afb      	ldrb	r3, [r7, #11]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d92d      	bls.n	800230a <_ZN7Tracker8traverseEv+0x482>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80022b4:	3319      	adds	r3, #25
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b1c      	cmp	r3, #28
 80022ba:	d826      	bhi.n	800230a <_ZN7Tracker8traverseEv+0x482>
					this->matrix[this->r][this->c+1] = -3 ;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80022c2:	3318      	adds	r3, #24
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80022ce:	3319      	adds	r3, #25
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4603      	mov	r3, r0
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a1b      	subs	r3, r3, r0
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	440b      	add	r3, r1
 80022e0:	3306      	adds	r3, #6
 80022e2:	f06f 0102 	mvn.w	r1, #2
 80022e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80022f0:	3318      	adds	r3, #24
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80022fc:	3319      	adds	r3, #25
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	461a      	mov	r2, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f001 f9a1 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->r < SIZE-1){               // obstacle in the front
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	789b      	ldrb	r3, [r3, #2]
 800230e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002312:	429a      	cmp	r2, r3
 8002314:	f240 80ca 	bls.w	80024ac <_ZN7Tracker8traverseEv+0x624>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800231e:	3318      	adds	r3, #24
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b1c      	cmp	r3, #28
 8002324:	f200 80c2 	bhi.w	80024ac <_ZN7Tracker8traverseEv+0x624>
					this->matrix[this->r+1][this->c] = -3 ;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800232e:	3318      	adds	r3, #24
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800233a:	3319      	adds	r3, #25
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4403      	add	r3, r0
 800234c:	3306      	adds	r3, #6
 800234e:	f06f 0202 	mvn.w	r2, #2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r+1, this->c);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800235c:	3318      	adds	r3, #24
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	1c59      	adds	r1, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002368:	3319      	adds	r3, #25
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f001 f96c 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 8002374:	e09a      	b.n	80024ac <_ZN7Tracker8traverseEv+0x624>
			case W:
				if(rightobstacles > 2  && this->r > 0){          // obstacle on right
 8002376:	7abb      	ldrb	r3, [r7, #10]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d92c      	bls.n	80023d6 <_ZN7Tracker8traverseEv+0x54e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002382:	3318      	adds	r3, #24
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d025      	beq.n	80023d6 <_ZN7Tracker8traverseEv+0x54e>
					this->matrix[this->r-1][this->c] = -3 ;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002390:	3318      	adds	r3, #24
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	1e5a      	subs	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800239c:	3319      	adds	r3, #25
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4403      	add	r3, r0
 80023ae:	3306      	adds	r3, #6
 80023b0:	f06f 0202 	mvn.w	r2, #2
 80023b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r-1, this->c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80023be:	3318      	adds	r3, #24
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	1e59      	subs	r1, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80023ca:	3319      	adds	r3, #25
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f001 f93b 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2  && this->r < SIZE-1){               // obstacle on the left
 80023d6:	7afb      	ldrb	r3, [r7, #11]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d92c      	bls.n	8002436 <_ZN7Tracker8traverseEv+0x5ae>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80023e2:	3318      	adds	r3, #24
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b1c      	cmp	r3, #28
 80023e8:	d825      	bhi.n	8002436 <_ZN7Tracker8traverseEv+0x5ae>
					this->matrix[this->r+1][this->c] = -3 ;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80023f0:	3318      	adds	r3, #24
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80023fc:	3319      	adds	r3, #25
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4403      	add	r3, r0
 800240e:	3306      	adds	r3, #6
 8002410:	f06f 0202 	mvn.w	r2, #2
 8002414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r+1, this->c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800241e:	3318      	adds	r3, #24
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	1c59      	adds	r1, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800242a:	3319      	adds	r3, #25
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f001 f90b 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->c < SIZE-1){               // obstacle in the front
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	789b      	ldrb	r3, [r3, #2]
 800243a:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800243e:	429a      	cmp	r2, r3
 8002440:	d936      	bls.n	80024b0 <_ZN7Tracker8traverseEv+0x628>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002448:	3319      	adds	r3, #25
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b1c      	cmp	r3, #28
 800244e:	d82f      	bhi.n	80024b0 <_ZN7Tracker8traverseEv+0x628>
					this->matrix[this->r][this->c+1] = -3 ;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002456:	3318      	adds	r3, #24
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002462:	3319      	adds	r3, #25
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4603      	mov	r3, r0
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	1a1b      	subs	r3, r3, r0
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	440b      	add	r3, r1
 8002474:	3306      	adds	r3, #6
 8002476:	f06f 0102 	mvn.w	r1, #2
 800247a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002484:	3318      	adds	r3, #24
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002490:	3319      	adds	r3, #25
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	461a      	mov	r2, r3
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f001 f8d7 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 800249e:	e007      	b.n	80024b0 <_ZN7Tracker8traverseEv+0x628>
			default:return 2;
 80024a0:	2302      	movs	r3, #2
 80024a2:	e07d      	b.n	80025a0 <_ZN7Tracker8traverseEv+0x718>
				break;
 80024a4:	bf00      	nop
 80024a6:	e004      	b.n	80024b2 <_ZN7Tracker8traverseEv+0x62a>
				break;
 80024a8:	bf00      	nop
 80024aa:	e002      	b.n	80024b2 <_ZN7Tracker8traverseEv+0x62a>
				break;
 80024ac:	bf00      	nop
 80024ae:	e000      	b.n	80024b2 <_ZN7Tracker8traverseEv+0x62a>
				break;
 80024b0:	bf00      	nop
		}

		flag = this->moveR(CELL_LENGTH,-2 , leftSide, rightSide);
 80024b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80024b6:	f107 030c 	add.w	r3, r7, #12
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	f06f 0201 	mvn.w	r2, #1
 80024c2:	211e      	movs	r1, #30
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f86f 	bl	80025a8 <_ZN7Tracker5moveREtiPhS0_>
 80024ca:	4603      	mov	r3, r0
 80024cc:	65fb      	str	r3, [r7, #92]	; 0x5c
		if(flag == 3){
 80024ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d104      	bne.n	80024de <_ZN7Tracker8traverseEv+0x656>
			HAL_Delay(1000);
 80024d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024d8:	f005 fef8 	bl	80082cc <HAL_Delay>
			continue;
 80024dc:	e05f      	b.n	800259e <_ZN7Tracker8traverseEv+0x716>
		}else{stucked++;}
 80024de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80024e2:	3301      	adds	r3, #1
 80024e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		flag= this->moveF(CELL_LENGTH,-2 ,  leftSide, rightSide);
 80024e8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	f06f 0201 	mvn.w	r2, #1
 80024f8:	211e      	movs	r1, #30
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fdd8 	bl	80030b0 <_ZN7Tracker5moveFEtiPhS0_>
 8002500:	4603      	mov	r3, r0
 8002502:	65fb      	str	r3, [r7, #92]	; 0x5c
		if(flag == 3){
 8002504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002506:	2b03      	cmp	r3, #3
 8002508:	d104      	bne.n	8002514 <_ZN7Tracker8traverseEv+0x68c>
			HAL_Delay(1000);
 800250a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800250e:	f005 fedd 	bl	80082cc <HAL_Delay>
			continue;
 8002512:	e044      	b.n	800259e <_ZN7Tracker8traverseEv+0x716>
		}else{stucked++;}
 8002514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002518:	3301      	adds	r3, #1
 800251a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		flag= this->moveL(CELL_LENGTH,-2 ,  leftSide, rightSide);
 800251e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	f06f 0201 	mvn.w	r2, #1
 800252e:	211e      	movs	r1, #30
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fafb 	bl	8002b2c <_ZN7Tracker5moveLEtiPhS0_>
 8002536:	4603      	mov	r3, r0
 8002538:	65fb      	str	r3, [r7, #92]	; 0x5c
		if(flag == 3){
 800253a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253c:	2b03      	cmp	r3, #3
 800253e:	d104      	bne.n	800254a <_ZN7Tracker8traverseEv+0x6c2>
			HAL_Delay(1000);
 8002540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002544:	f005 fec2 	bl	80082cc <HAL_Delay>
			continue;
 8002548:	e029      	b.n	800259e <_ZN7Tracker8traverseEv+0x716>
		}else{stucked++;}
 800254a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800254e:	3301      	adds	r3, #1
 8002550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		if(stucked == 3){
 8002554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002558:	2b03      	cmp	r3, #3
 800255a:	f47f acc6 	bne.w	8001eea <_ZN7Tracker8traverseEv+0x62>
			d = dijkstra();
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f001 f8e6 	bl	8003730 <_ZN7Tracker8dijkstraEv>
 8002564:	65b8      	str	r0, [r7, #88]	; 0x58
			if(d == -1){         // no more cell to visit
 8002566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d101      	bne.n	8002572 <_ZN7Tracker8traverseEv+0x6ea>
				return 3 ;
 800256e:	2303      	movs	r3, #3
 8002570:	e016      	b.n	80025a0 <_ZN7Tracker8traverseEv+0x718>
			}else{
				if(go_to(d,leftSide,rightSide) == 5){
 8002572:	f107 030c 	add.w	r3, r7, #12
 8002576:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800257a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f001 fc99 	bl	8003eb4 <_ZN7Tracker5go_toEiPhS0_>
 8002582:	4603      	mov	r3, r0
 8002584:	2b05      	cmp	r3, #5
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	f43f acab 	beq.w	8001eea <_ZN7Tracker8traverseEv+0x62>
					this->mark_unvisited();
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f002 f8f2 	bl	800477e <_ZN7Tracker14mark_unvisitedEv>
					return 5 ;
 800259a:	2305      	movs	r3, #5
 800259c:	e000      	b.n	80025a0 <_ZN7Tracker8traverseEv+0x718>
		watering_palnt();
 800259e:	e4a4      	b.n	8001eea <_ZN7Tracker8traverseEv+0x62>

			}
		}
	}
	return 1 ;
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3764      	adds	r7, #100	; 0x64
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd90      	pop	{r4, r7, pc}

080025a8 <_ZN7Tracker5moveREtiPhS0_>:

uint8_t Tracker::moveR(uint16_t by,int cond , uint8_t leftSide[30] ,uint8_t rightSide[30]){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b098      	sub	sp, #96	; 0x60
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	460b      	mov	r3, r1
 80025b6:	817b      	strh	r3, [r7, #10]
	uint16_t advanced = 0 ;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint8_t templ[30],tempr[30];
	uint8_t flag = 3;
 80025be:	2303      	movs	r3, #3
 80025c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	this->copy(templ, tempr, leftSide, rightSide);
 80025c4:	f107 0214 	add.w	r2, r7, #20
 80025c8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80025cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f7ff fbd8 	bl	8001d88 <_ZN7Tracker4copyEPhS0_S0_S0_>
	switch(this->dir){
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80025de:	331a      	adds	r3, #26
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	f200 828a 	bhi.w	8002afc <_ZN7Tracker5moveREtiPhS0_+0x554>
 80025e8:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <_ZN7Tracker5moveREtiPhS0_+0x48>)
 80025ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ee:	bf00      	nop
 80025f0:	08002601 	.word	0x08002601
 80025f4:	08002741 	.word	0x08002741
 80025f8:	0800287f 	.word	0x0800287f
 80025fc:	080029bf 	.word	0x080029bf
		case N:
			if(this->c < SIZE-1 && this->matrix[this->r][this->c+1] == cond){
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002606:	3319      	adds	r3, #25
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b1c      	cmp	r3, #28
 800260c:	f200 8093 	bhi.w	8002736 <_ZN7Tracker5moveREtiPhS0_+0x18e>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002616:	3318      	adds	r3, #24
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002622:	3319      	adds	r3, #25
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4603      	mov	r3, r0
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	1a1b      	subs	r3, r3, r0
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	440b      	add	r3, r1
 8002634:	3306      	adds	r3, #6
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d17a      	bne.n	8002736 <_ZN7Tracker5moveREtiPhS0_+0x18e>
				dcSys.turnBy(-TURN);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f06f 015a 	mvn.w	r1, #90	; 0x5a
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fff1 	bl	8001630 <_ZN8DCSystem6turnByEi>
				HAL_Delay(250);
 800264e:	20fa      	movs	r0, #250	; 0xfa
 8002650:	f005 fe3c 	bl	80082cc <HAL_Delay>
				advanced = dcSys.advance(by,leftSide,rightSide);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6958      	ldr	r0, [r3, #20]
 8002658:	8979      	ldrh	r1, [r7, #10]
 800265a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	f7fe fe63 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 8002662:	4603      	mov	r3, r0
 8002664:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if(advanced < by){
 8002668:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800266c:	897b      	ldrh	r3, [r7, #10]
 800266e:	429a      	cmp	r2, r3
 8002670:	d241      	bcs.n	80026f6 <_ZN7Tracker5moveREtiPhS0_+0x14e>
					HAL_Delay(250);
 8002672:	20fa      	movs	r0, #250	; 0xfa
 8002674:	f005 fe2a 	bl	80082cc <HAL_Delay>
					dcSys.returnBy(advanced);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe ff3c 	bl	8001500 <_ZN8DCSystem8returnByEt>
					HAL_Delay(250);
 8002688:	20fa      	movs	r0, #250	; 0xfa
 800268a:	f005 fe1f 	bl	80082cc <HAL_Delay>
					dcSys.turnBy(TURN);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	215b      	movs	r1, #91	; 0x5b
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe ffcb 	bl	8001630 <_ZN8DCSystem6turnByEi>
					HAL_Delay(250);
 800269a:	20fa      	movs	r0, #250	; 0xfa
 800269c:	f005 fe16 	bl	80082cc <HAL_Delay>
					this->matrix[this->r][this->c+1] = -3 ;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80026a6:	3318      	adds	r3, #24
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80026b2:	3319      	adds	r3, #25
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	1c59      	adds	r1, r3, #1
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4603      	mov	r3, r0
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	1a1b      	subs	r3, r3, r0
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	440b      	add	r3, r1
 80026c4:	3306      	adds	r3, #6
 80026c6:	f06f 0102 	mvn.w	r1, #2
 80026ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80026d4:	3318      	adds	r3, #24
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80026e0:	3319      	adds	r3, #25
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	461a      	mov	r2, r3
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 ffaf 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
					flag = 1;                                // obstacle was found while advancing
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(advanced < by){
 80026f4:	e023      	b.n	800273e <_ZN7Tracker5moveREtiPhS0_+0x196>
				}else{
					this->dir = (enum DIR)((this->dir+1)%4);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80026fc:	331a      	adds	r3, #26
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	425a      	negs	r2, r3
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	f002 0203 	and.w	r2, r2, #3
 800270c:	bf58      	it	pl
 800270e:	4253      	negpl	r3, r2
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002718:	331a      	adds	r3, #26
 800271a:	701a      	strb	r2, [r3, #0]
					this->c++;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002722:	3319      	adds	r3, #25
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002730:	3319      	adds	r3, #25
 8002732:	701a      	strb	r2, [r3, #0]
				if(advanced < by){
 8002734:	e003      	b.n	800273e <_ZN7Tracker5moveREtiPhS0_+0x196>
				}
			}else{
				flag = 0;                                    // can nont move right
 8002736:	2300      	movs	r3, #0
 8002738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 800273c:	e1e0      	b.n	8002b00 <_ZN7Tracker5moveREtiPhS0_+0x558>
 800273e:	e1df      	b.n	8002b00 <_ZN7Tracker5moveREtiPhS0_+0x558>
		case E:
			if(this->r < SIZE-1 && this->matrix[this->r+1][this->c] == cond){
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002746:	3318      	adds	r3, #24
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b1c      	cmp	r3, #28
 800274c:	f200 8092 	bhi.w	8002874 <_ZN7Tracker5moveREtiPhS0_+0x2cc>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002756:	3318      	adds	r3, #24
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002762:	3319      	adds	r3, #25
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	68f9      	ldr	r1, [r7, #12]
 800276a:	4613      	mov	r3, r2
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	1a9b      	subs	r3, r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4403      	add	r3, r0
 8002774:	3306      	adds	r3, #6
 8002776:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	429a      	cmp	r2, r3
 800277e:	d179      	bne.n	8002874 <_ZN7Tracker5moveREtiPhS0_+0x2cc>
				dcSys.turnBy(-TURN);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f06f 015a 	mvn.w	r1, #90	; 0x5a
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe ff51 	bl	8001630 <_ZN8DCSystem6turnByEi>
				HAL_Delay(250);
 800278e:	20fa      	movs	r0, #250	; 0xfa
 8002790:	f005 fd9c 	bl	80082cc <HAL_Delay>
				advanced = dcSys.advance(by,leftSide,rightSide);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6958      	ldr	r0, [r3, #20]
 8002798:	8979      	ldrh	r1, [r7, #10]
 800279a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	f7fe fdc3 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if(advanced < by){
 80027a8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80027ac:	897b      	ldrh	r3, [r7, #10]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d240      	bcs.n	8002834 <_ZN7Tracker5moveREtiPhS0_+0x28c>
					HAL_Delay(250);
 80027b2:	20fa      	movs	r0, #250	; 0xfa
 80027b4:	f005 fd8a 	bl	80082cc <HAL_Delay>
					dcSys.returnBy(advanced);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fe9c 	bl	8001500 <_ZN8DCSystem8returnByEt>
					HAL_Delay(250);
 80027c8:	20fa      	movs	r0, #250	; 0xfa
 80027ca:	f005 fd7f 	bl	80082cc <HAL_Delay>
					dcSys.turnBy(TURN);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	215b      	movs	r1, #91	; 0x5b
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe ff2b 	bl	8001630 <_ZN8DCSystem6turnByEi>
					HAL_Delay(250);
 80027da:	20fa      	movs	r0, #250	; 0xfa
 80027dc:	f005 fd76 	bl	80082cc <HAL_Delay>
					this->matrix[this->r+1][this->c] = -3 ;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80027e6:	3318      	adds	r3, #24
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80027f2:	3319      	adds	r3, #25
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	68f9      	ldr	r1, [r7, #12]
 80027fa:	4613      	mov	r3, r2
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4403      	add	r3, r0
 8002804:	3306      	adds	r3, #6
 8002806:	f06f 0202 	mvn.w	r2, #2
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r+1, this->c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002814:	3318      	adds	r3, #24
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	1c59      	adds	r1, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002820:	3319      	adds	r3, #25
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 ff10 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
					flag = 1;                                // obstacle was found while advancing
 800282c:	2301      	movs	r3, #1
 800282e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(advanced < by){
 8002832:	e023      	b.n	800287c <_ZN7Tracker5moveREtiPhS0_+0x2d4>
				}else{
					this->dir = (enum DIR)((this->dir+1)%4);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800283a:	331a      	adds	r3, #26
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	425a      	negs	r2, r3
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	f002 0203 	and.w	r2, r2, #3
 800284a:	bf58      	it	pl
 800284c:	4253      	negpl	r3, r2
 800284e:	b2da      	uxtb	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002856:	331a      	adds	r3, #26
 8002858:	701a      	strb	r2, [r3, #0]
					this->r++;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002860:	3318      	adds	r3, #24
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800286e:	3318      	adds	r3, #24
 8002870:	701a      	strb	r2, [r3, #0]
				if(advanced < by){
 8002872:	e003      	b.n	800287c <_ZN7Tracker5moveREtiPhS0_+0x2d4>
				}
			}else{
				flag = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 800287a:	e141      	b.n	8002b00 <_ZN7Tracker5moveREtiPhS0_+0x558>
 800287c:	e140      	b.n	8002b00 <_ZN7Tracker5moveREtiPhS0_+0x558>
		case S:
			if(this->c > 0 && this->matrix[this->r][this->c-1] == cond){
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002884:	3319      	adds	r3, #25
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8093 	beq.w	80029b4 <_ZN7Tracker5moveREtiPhS0_+0x40c>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002894:	3318      	adds	r3, #24
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80028a0:	3319      	adds	r3, #25
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	1e59      	subs	r1, r3, #1
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4603      	mov	r3, r0
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a1b      	subs	r3, r3, r0
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	440b      	add	r3, r1
 80028b2:	3306      	adds	r3, #6
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d17a      	bne.n	80029b4 <_ZN7Tracker5moveREtiPhS0_+0x40c>
				dcSys.turnBy(-TURN);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f06f 015a 	mvn.w	r1, #90	; 0x5a
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe feb2 	bl	8001630 <_ZN8DCSystem6turnByEi>
				HAL_Delay(250);
 80028cc:	20fa      	movs	r0, #250	; 0xfa
 80028ce:	f005 fcfd 	bl	80082cc <HAL_Delay>
				advanced = dcSys.advance(by,leftSide,rightSide);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6958      	ldr	r0, [r3, #20]
 80028d6:	8979      	ldrh	r1, [r7, #10]
 80028d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	f7fe fd24 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if(advanced < by){
 80028e6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80028ea:	897b      	ldrh	r3, [r7, #10]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d241      	bcs.n	8002974 <_ZN7Tracker5moveREtiPhS0_+0x3cc>
					HAL_Delay(250);
 80028f0:	20fa      	movs	r0, #250	; 0xfa
 80028f2:	f005 fceb 	bl	80082cc <HAL_Delay>
					dcSys.returnBy(advanced);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fdfd 	bl	8001500 <_ZN8DCSystem8returnByEt>
					HAL_Delay(250);
 8002906:	20fa      	movs	r0, #250	; 0xfa
 8002908:	f005 fce0 	bl	80082cc <HAL_Delay>
					dcSys.turnBy(TURN);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	215b      	movs	r1, #91	; 0x5b
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fe8c 	bl	8001630 <_ZN8DCSystem6turnByEi>
					HAL_Delay(250);
 8002918:	20fa      	movs	r0, #250	; 0xfa
 800291a:	f005 fcd7 	bl	80082cc <HAL_Delay>
					this->matrix[this->r][this->c-1] = -3 ;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002924:	3318      	adds	r3, #24
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002930:	3319      	adds	r3, #25
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	1e59      	subs	r1, r3, #1
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4603      	mov	r3, r0
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a1b      	subs	r3, r3, r0
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	440b      	add	r3, r1
 8002942:	3306      	adds	r3, #6
 8002944:	f06f 0102 	mvn.w	r1, #2
 8002948:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c-1);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002952:	3318      	adds	r3, #24
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	4619      	mov	r1, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800295e:	3319      	adds	r3, #25
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	3b01      	subs	r3, #1
 8002964:	461a      	mov	r2, r3
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fe70 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
					flag = 1;                                // obstacle was found while advancing
 800296c:	2301      	movs	r3, #1
 800296e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(advanced < by){
 8002972:	e023      	b.n	80029bc <_ZN7Tracker5moveREtiPhS0_+0x414>
				}else{
					this->dir = (enum DIR)((this->dir+1)%4);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800297a:	331a      	adds	r3, #26
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	425a      	negs	r2, r3
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	f002 0203 	and.w	r2, r2, #3
 800298a:	bf58      	it	pl
 800298c:	4253      	negpl	r3, r2
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002996:	331a      	adds	r3, #26
 8002998:	701a      	strb	r2, [r3, #0]
					this->c--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80029a0:	3319      	adds	r3, #25
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80029ae:	3319      	adds	r3, #25
 80029b0:	701a      	strb	r2, [r3, #0]
				if(advanced < by){
 80029b2:	e003      	b.n	80029bc <_ZN7Tracker5moveREtiPhS0_+0x414>
				}
			}else{
				flag = 0;                                   // can nont move right
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 80029ba:	e0a1      	b.n	8002b00 <_ZN7Tracker5moveREtiPhS0_+0x558>
 80029bc:	e0a0      	b.n	8002b00 <_ZN7Tracker5moveREtiPhS0_+0x558>
		case W:
			if(this->r > 0 && this->matrix[this->r-1][this->c] == cond){
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80029c4:	3318      	adds	r3, #24
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8092 	beq.w	8002af2 <_ZN7Tracker5moveREtiPhS0_+0x54a>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80029d4:	3318      	adds	r3, #24
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	1e5a      	subs	r2, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80029e0:	3319      	adds	r3, #25
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	68f9      	ldr	r1, [r7, #12]
 80029e8:	4613      	mov	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4403      	add	r3, r0
 80029f2:	3306      	adds	r3, #6
 80029f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d179      	bne.n	8002af2 <_ZN7Tracker5moveREtiPhS0_+0x54a>
				dcSys.turnBy(-TURN);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f06f 015a 	mvn.w	r1, #90	; 0x5a
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fe12 	bl	8001630 <_ZN8DCSystem6turnByEi>
				HAL_Delay(250);
 8002a0c:	20fa      	movs	r0, #250	; 0xfa
 8002a0e:	f005 fc5d 	bl	80082cc <HAL_Delay>
				advanced = dcSys.advance(by,leftSide,rightSide);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6958      	ldr	r0, [r3, #20]
 8002a16:	8979      	ldrh	r1, [r7, #10]
 8002a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	f7fe fc84 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if(advanced < by){
 8002a26:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002a2a:	897b      	ldrh	r3, [r7, #10]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d240      	bcs.n	8002ab2 <_ZN7Tracker5moveREtiPhS0_+0x50a>
					HAL_Delay(250);
 8002a30:	20fa      	movs	r0, #250	; 0xfa
 8002a32:	f005 fc4b 	bl	80082cc <HAL_Delay>
					dcSys.returnBy(advanced);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe fd5d 	bl	8001500 <_ZN8DCSystem8returnByEt>
					HAL_Delay(250);
 8002a46:	20fa      	movs	r0, #250	; 0xfa
 8002a48:	f005 fc40 	bl	80082cc <HAL_Delay>
					dcSys.turnBy(TURN);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	215b      	movs	r1, #91	; 0x5b
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fdec 	bl	8001630 <_ZN8DCSystem6turnByEi>
					HAL_Delay(250);
 8002a58:	20fa      	movs	r0, #250	; 0xfa
 8002a5a:	f005 fc37 	bl	80082cc <HAL_Delay>
					this->matrix[this->r-1][this->c] = -3 ;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002a64:	3318      	adds	r3, #24
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	1e5a      	subs	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002a70:	3319      	adds	r3, #25
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	68f9      	ldr	r1, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4403      	add	r3, r0
 8002a82:	3306      	adds	r3, #6
 8002a84:	f06f 0202 	mvn.w	r2, #2
 8002a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r-1, this->c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002a92:	3318      	adds	r3, #24
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	1e59      	subs	r1, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002a9e:	3319      	adds	r3, #25
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fdd1 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
					flag = 1;                               // obstacle was found while advancing
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(advanced < by){
 8002ab0:	e023      	b.n	8002afa <_ZN7Tracker5moveREtiPhS0_+0x552>
				}else{
					this->dir = (enum DIR)((this->dir+1)%4);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002ab8:	331a      	adds	r3, #26
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	425a      	negs	r2, r3
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	f002 0203 	and.w	r2, r2, #3
 8002ac8:	bf58      	it	pl
 8002aca:	4253      	negpl	r3, r2
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002ad4:	331a      	adds	r3, #26
 8002ad6:	701a      	strb	r2, [r3, #0]
					this->r--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002ade:	3318      	adds	r3, #24
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002aec:	3318      	adds	r3, #24
 8002aee:	701a      	strb	r2, [r3, #0]
				if(advanced < by){
 8002af0:	e003      	b.n	8002afa <_ZN7Tracker5moveREtiPhS0_+0x552>
				}
			}else{
				flag = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 8002af8:	e002      	b.n	8002b00 <_ZN7Tracker5moveREtiPhS0_+0x558>
 8002afa:	e001      	b.n	8002b00 <_ZN7Tracker5moveREtiPhS0_+0x558>
		default:return 2 ;
 8002afc:	2302      	movs	r3, #2
 8002afe:	e010      	b.n	8002b22 <_ZN7Tracker5moveREtiPhS0_+0x57a>
	}
	if(flag == 1){
 8002b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10a      	bne.n	8002b1e <_ZN7Tracker5moveREtiPhS0_+0x576>
		this->copy(leftSide, rightSide, templ, tempr);
 8002b08:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b16:	6839      	ldr	r1, [r7, #0]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f7ff f935 	bl	8001d88 <_ZN7Tracker4copyEPhS0_S0_S0_>
	}
	return flag;
 8002b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3758      	adds	r7, #88	; 0x58
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop

08002b2c <_ZN7Tracker5moveLEtiPhS0_>:

uint8_t Tracker::moveL(uint16_t by,int cond ,uint8_t leftSide[30] ,uint8_t rightSide[30]){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b098      	sub	sp, #96	; 0x60
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	817b      	strh	r3, [r7, #10]
	uint16_t advanced = 0 ;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint8_t templ[30],tempr[30];
	uint8_t flag = 3;
 8002b42:	2303      	movs	r3, #3
 8002b44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	this->copy(templ, tempr, leftSide, rightSide);
 8002b48:	f107 0214 	add.w	r2, r7, #20
 8002b4c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff f916 	bl	8001d88 <_ZN7Tracker4copyEPhS0_S0_S0_>
	switch(this->dir){
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002b62:	331a      	adds	r3, #26
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	f200 828a 	bhi.w	8003080 <_ZN7Tracker5moveLEtiPhS0_+0x554>
 8002b6c:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <_ZN7Tracker5moveLEtiPhS0_+0x48>)
 8002b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002b85 	.word	0x08002b85
 8002b78:	08002cc5 	.word	0x08002cc5
 8002b7c:	08002e03 	.word	0x08002e03
 8002b80:	08002f43 	.word	0x08002f43
	case N:
		if(this->c > 0 && this->matrix[this->r][this->c-1] == cond){
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002b8a:	3319      	adds	r3, #25
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8093 	beq.w	8002cba <_ZN7Tracker5moveLEtiPhS0_+0x18e>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002b9a:	3318      	adds	r3, #24
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002ba6:	3319      	adds	r3, #25
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	1e59      	subs	r1, r3, #1
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4603      	mov	r3, r0
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a1b      	subs	r3, r3, r0
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3306      	adds	r3, #6
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d17a      	bne.n	8002cba <_ZN7Tracker5moveLEtiPhS0_+0x18e>
			dcSys.turnBy(TURN);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	215b      	movs	r1, #91	; 0x5b
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fd30 	bl	8001630 <_ZN8DCSystem6turnByEi>
			HAL_Delay(250);
 8002bd0:	20fa      	movs	r0, #250	; 0xfa
 8002bd2:	f005 fb7b 	bl	80082cc <HAL_Delay>
			advanced = dcSys.advance(by,leftSide,rightSide);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6958      	ldr	r0, [r3, #20]
 8002bda:	8979      	ldrh	r1, [r7, #10]
 8002bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	f7fe fba2 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			if(advanced < by){
 8002bea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002bee:	897b      	ldrh	r3, [r7, #10]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d242      	bcs.n	8002c7a <_ZN7Tracker5moveLEtiPhS0_+0x14e>
				HAL_Delay(250);
 8002bf4:	20fa      	movs	r0, #250	; 0xfa
 8002bf6:	f005 fb69 	bl	80082cc <HAL_Delay>
				dcSys.returnBy(advanced);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fc7b 	bl	8001500 <_ZN8DCSystem8returnByEt>
				HAL_Delay(250);
 8002c0a:	20fa      	movs	r0, #250	; 0xfa
 8002c0c:	f005 fb5e 	bl	80082cc <HAL_Delay>
				dcSys.turnBy(-TURN);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f06f 015a 	mvn.w	r1, #90	; 0x5a
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe fd09 	bl	8001630 <_ZN8DCSystem6turnByEi>
				HAL_Delay(250);
 8002c1e:	20fa      	movs	r0, #250	; 0xfa
 8002c20:	f005 fb54 	bl	80082cc <HAL_Delay>
				this->matrix[this->r][this->c-1] = -3 ;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002c2a:	3318      	adds	r3, #24
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002c36:	3319      	adds	r3, #25
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	1e59      	subs	r1, r3, #1
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4603      	mov	r3, r0
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a1b      	subs	r3, r3, r0
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	440b      	add	r3, r1
 8002c48:	3306      	adds	r3, #6
 8002c4a:	f06f 0102 	mvn.w	r1, #2
 8002c4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				this->mark_obstacle(this->r, this->c-1);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002c58:	3318      	adds	r3, #24
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002c64:	3319      	adds	r3, #25
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fced 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				flag = 1;                                // obstacle was found while advancing
 8002c72:	2301      	movs	r3, #1
 8002c74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(advanced < by){
 8002c78:	e023      	b.n	8002cc2 <_ZN7Tracker5moveLEtiPhS0_+0x196>
			}else{
				this->dir = (enum DIR)((this->dir+3)%4);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002c80:	331a      	adds	r3, #26
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	3303      	adds	r3, #3
 8002c86:	425a      	negs	r2, r3
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	f002 0203 	and.w	r2, r2, #3
 8002c90:	bf58      	it	pl
 8002c92:	4253      	negpl	r3, r2
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002c9c:	331a      	adds	r3, #26
 8002c9e:	701a      	strb	r2, [r3, #0]
				this->c--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002ca6:	3319      	adds	r3, #25
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002cb4:	3319      	adds	r3, #25
 8002cb6:	701a      	strb	r2, [r3, #0]
			if(advanced < by){
 8002cb8:	e003      	b.n	8002cc2 <_ZN7Tracker5moveLEtiPhS0_+0x196>
			}
		}else{
			flag = 0;                                    // can nont move right
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		break;
 8002cc0:	e1e0      	b.n	8003084 <_ZN7Tracker5moveLEtiPhS0_+0x558>
 8002cc2:	e1df      	b.n	8003084 <_ZN7Tracker5moveLEtiPhS0_+0x558>
	case E:
		if(this->r > 0 && this->matrix[this->r-1][this->c] == cond){
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002cca:	3318      	adds	r3, #24
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 8092 	beq.w	8002df8 <_ZN7Tracker5moveLEtiPhS0_+0x2cc>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002cda:	3318      	adds	r3, #24
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	1e5a      	subs	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002ce6:	3319      	adds	r3, #25
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	68f9      	ldr	r1, [r7, #12]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4403      	add	r3, r0
 8002cf8:	3306      	adds	r3, #6
 8002cfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d179      	bne.n	8002df8 <_ZN7Tracker5moveLEtiPhS0_+0x2cc>
			dcSys.turnBy(TURN);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	215b      	movs	r1, #91	; 0x5b
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fc90 	bl	8001630 <_ZN8DCSystem6turnByEi>
			HAL_Delay(250);
 8002d10:	20fa      	movs	r0, #250	; 0xfa
 8002d12:	f005 fadb 	bl	80082cc <HAL_Delay>
			advanced = dcSys.advance(by,leftSide,rightSide);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6958      	ldr	r0, [r3, #20]
 8002d1a:	8979      	ldrh	r1, [r7, #10]
 8002d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	f7fe fb02 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			if(advanced < by){
 8002d2a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002d2e:	897b      	ldrh	r3, [r7, #10]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d241      	bcs.n	8002db8 <_ZN7Tracker5moveLEtiPhS0_+0x28c>
				HAL_Delay(250);
 8002d34:	20fa      	movs	r0, #250	; 0xfa
 8002d36:	f005 fac9 	bl	80082cc <HAL_Delay>
				dcSys.returnBy(advanced);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe fbdb 	bl	8001500 <_ZN8DCSystem8returnByEt>
				HAL_Delay(250);
 8002d4a:	20fa      	movs	r0, #250	; 0xfa
 8002d4c:	f005 fabe 	bl	80082cc <HAL_Delay>
				dcSys.turnBy(-TURN);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f06f 015a 	mvn.w	r1, #90	; 0x5a
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fc69 	bl	8001630 <_ZN8DCSystem6turnByEi>
				HAL_Delay(250);
 8002d5e:	20fa      	movs	r0, #250	; 0xfa
 8002d60:	f005 fab4 	bl	80082cc <HAL_Delay>
				this->matrix[this->r-1][this->c] = -3 ;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002d6a:	3318      	adds	r3, #24
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	1e5a      	subs	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002d76:	3319      	adds	r3, #25
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	68f9      	ldr	r1, [r7, #12]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	4403      	add	r3, r0
 8002d88:	3306      	adds	r3, #6
 8002d8a:	f06f 0202 	mvn.w	r2, #2
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				this->mark_obstacle(this->r-1, this->c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002d98:	3318      	adds	r3, #24
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	1e59      	subs	r1, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002da4:	3319      	adds	r3, #25
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 fc4e 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				flag = 1;                                // obstacle was found while advancing
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(advanced < by){
 8002db6:	e023      	b.n	8002e00 <_ZN7Tracker5moveLEtiPhS0_+0x2d4>
			}else{
				this->dir = (enum DIR)((this->dir+3)%4);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002dbe:	331a      	adds	r3, #26
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	3303      	adds	r3, #3
 8002dc4:	425a      	negs	r2, r3
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	f002 0203 	and.w	r2, r2, #3
 8002dce:	bf58      	it	pl
 8002dd0:	4253      	negpl	r3, r2
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002dda:	331a      	adds	r3, #26
 8002ddc:	701a      	strb	r2, [r3, #0]
				this->r--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002de4:	3318      	adds	r3, #24
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002df2:	3318      	adds	r3, #24
 8002df4:	701a      	strb	r2, [r3, #0]
			if(advanced < by){
 8002df6:	e003      	b.n	8002e00 <_ZN7Tracker5moveLEtiPhS0_+0x2d4>
			}
		}else{
			flag = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		break;
 8002dfe:	e141      	b.n	8003084 <_ZN7Tracker5moveLEtiPhS0_+0x558>
 8002e00:	e140      	b.n	8003084 <_ZN7Tracker5moveLEtiPhS0_+0x558>
	case S:
		if(this->c < SIZE-1 && this->matrix[this->r][this->c+1] == cond){
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002e08:	3319      	adds	r3, #25
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b1c      	cmp	r3, #28
 8002e0e:	f200 8093 	bhi.w	8002f38 <_ZN7Tracker5moveLEtiPhS0_+0x40c>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002e18:	3318      	adds	r3, #24
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002e24:	3319      	adds	r3, #25
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	1c59      	adds	r1, r3, #1
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a1b      	subs	r3, r3, r0
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	440b      	add	r3, r1
 8002e36:	3306      	adds	r3, #6
 8002e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d17a      	bne.n	8002f38 <_ZN7Tracker5moveLEtiPhS0_+0x40c>
			dcSys.turnBy(TURN);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	215b      	movs	r1, #91	; 0x5b
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe fbf1 	bl	8001630 <_ZN8DCSystem6turnByEi>
			HAL_Delay(250);
 8002e4e:	20fa      	movs	r0, #250	; 0xfa
 8002e50:	f005 fa3c 	bl	80082cc <HAL_Delay>
			advanced = dcSys.advance(by,leftSide,rightSide);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6958      	ldr	r0, [r3, #20]
 8002e58:	8979      	ldrh	r1, [r7, #10]
 8002e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	f7fe fa63 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			if(advanced < by){
 8002e68:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002e6c:	897b      	ldrh	r3, [r7, #10]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d242      	bcs.n	8002ef8 <_ZN7Tracker5moveLEtiPhS0_+0x3cc>
				HAL_Delay(250);
 8002e72:	20fa      	movs	r0, #250	; 0xfa
 8002e74:	f005 fa2a 	bl	80082cc <HAL_Delay>
				dcSys.returnBy(advanced);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fb3c 	bl	8001500 <_ZN8DCSystem8returnByEt>
				HAL_Delay(250);
 8002e88:	20fa      	movs	r0, #250	; 0xfa
 8002e8a:	f005 fa1f 	bl	80082cc <HAL_Delay>
				dcSys.turnBy(-TURN);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f06f 015a 	mvn.w	r1, #90	; 0x5a
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fbca 	bl	8001630 <_ZN8DCSystem6turnByEi>
				HAL_Delay(250);
 8002e9c:	20fa      	movs	r0, #250	; 0xfa
 8002e9e:	f005 fa15 	bl	80082cc <HAL_Delay>
				this->matrix[this->r][this->c+1] = -3 ;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002ea8:	3318      	adds	r3, #24
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002eb4:	3319      	adds	r3, #25
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	1c59      	adds	r1, r3, #1
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a1b      	subs	r3, r3, r0
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3306      	adds	r3, #6
 8002ec8:	f06f 0102 	mvn.w	r1, #2
 8002ecc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				this->mark_obstacle(this->r, this->c+1);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002ed6:	3318      	adds	r3, #24
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	4619      	mov	r1, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002ee2:	3319      	adds	r3, #25
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fbae 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				flag = 1;                                // obstacle was found while advancing
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(advanced < by){
 8002ef6:	e023      	b.n	8002f40 <_ZN7Tracker5moveLEtiPhS0_+0x414>
			}else{
				this->dir = (enum DIR)((this->dir+3)%4);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002efe:	331a      	adds	r3, #26
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	3303      	adds	r3, #3
 8002f04:	425a      	negs	r2, r3
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	f002 0203 	and.w	r2, r2, #3
 8002f0e:	bf58      	it	pl
 8002f10:	4253      	negpl	r3, r2
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002f1a:	331a      	adds	r3, #26
 8002f1c:	701a      	strb	r2, [r3, #0]
				this->c++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002f24:	3319      	adds	r3, #25
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002f32:	3319      	adds	r3, #25
 8002f34:	701a      	strb	r2, [r3, #0]
			if(advanced < by){
 8002f36:	e003      	b.n	8002f40 <_ZN7Tracker5moveLEtiPhS0_+0x414>
			}
		}else{
			flag = 0;                                    // can nont move right
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		break;
 8002f3e:	e0a1      	b.n	8003084 <_ZN7Tracker5moveLEtiPhS0_+0x558>
 8002f40:	e0a0      	b.n	8003084 <_ZN7Tracker5moveLEtiPhS0_+0x558>
	case W:
		if(this->r < SIZE-1 && this->matrix[this->r+1][this->c] == cond){
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002f48:	3318      	adds	r3, #24
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b1c      	cmp	r3, #28
 8002f4e:	f200 8092 	bhi.w	8003076 <_ZN7Tracker5moveLEtiPhS0_+0x54a>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002f58:	3318      	adds	r3, #24
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002f64:	3319      	adds	r3, #25
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	68f9      	ldr	r1, [r7, #12]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4403      	add	r3, r0
 8002f76:	3306      	adds	r3, #6
 8002f78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d179      	bne.n	8003076 <_ZN7Tracker5moveLEtiPhS0_+0x54a>
			dcSys.turnBy(TURN);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	215b      	movs	r1, #91	; 0x5b
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe fb51 	bl	8001630 <_ZN8DCSystem6turnByEi>
			HAL_Delay(250);
 8002f8e:	20fa      	movs	r0, #250	; 0xfa
 8002f90:	f005 f99c 	bl	80082cc <HAL_Delay>
			advanced = dcSys.advance(by,leftSide,rightSide);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6958      	ldr	r0, [r3, #20]
 8002f98:	8979      	ldrh	r1, [r7, #10]
 8002f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	f7fe f9c3 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			if(advanced < by){
 8002fa8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002fac:	897b      	ldrh	r3, [r7, #10]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d241      	bcs.n	8003036 <_ZN7Tracker5moveLEtiPhS0_+0x50a>
				HAL_Delay(250);
 8002fb2:	20fa      	movs	r0, #250	; 0xfa
 8002fb4:	f005 f98a 	bl	80082cc <HAL_Delay>
				dcSys.returnBy(advanced);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fa9c 	bl	8001500 <_ZN8DCSystem8returnByEt>
				HAL_Delay(250);
 8002fc8:	20fa      	movs	r0, #250	; 0xfa
 8002fca:	f005 f97f 	bl	80082cc <HAL_Delay>
				dcSys.turnBy(-TURN);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f06f 015a 	mvn.w	r1, #90	; 0x5a
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fb2a 	bl	8001630 <_ZN8DCSystem6turnByEi>
				HAL_Delay(250);
 8002fdc:	20fa      	movs	r0, #250	; 0xfa
 8002fde:	f005 f975 	bl	80082cc <HAL_Delay>
				this->matrix[this->r+1][this->c] = -3 ;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002fe8:	3318      	adds	r3, #24
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002ff4:	3319      	adds	r3, #25
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4403      	add	r3, r0
 8003006:	3306      	adds	r3, #6
 8003008:	f06f 0202 	mvn.w	r2, #2
 800300c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				this->mark_obstacle(this->r+1, this->c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003016:	3318      	adds	r3, #24
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	1c59      	adds	r1, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003022:	3319      	adds	r3, #25
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fb0f 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				flag = 1;                                // obstacle was found while advancing
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(advanced < by){
 8003034:	e023      	b.n	800307e <_ZN7Tracker5moveLEtiPhS0_+0x552>
			}else{
				this->dir = (enum DIR)((this->dir+3)%4);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800303c:	331a      	adds	r3, #26
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	3303      	adds	r3, #3
 8003042:	425a      	negs	r2, r3
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	f002 0203 	and.w	r2, r2, #3
 800304c:	bf58      	it	pl
 800304e:	4253      	negpl	r3, r2
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003058:	331a      	adds	r3, #26
 800305a:	701a      	strb	r2, [r3, #0]
				this->r++;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003062:	3318      	adds	r3, #24
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	3301      	adds	r3, #1
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003070:	3318      	adds	r3, #24
 8003072:	701a      	strb	r2, [r3, #0]
			if(advanced < by){
 8003074:	e003      	b.n	800307e <_ZN7Tracker5moveLEtiPhS0_+0x552>
			}
		}else{
			flag = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		break;
 800307c:	e002      	b.n	8003084 <_ZN7Tracker5moveLEtiPhS0_+0x558>
 800307e:	e001      	b.n	8003084 <_ZN7Tracker5moveLEtiPhS0_+0x558>
	default:return 2;
 8003080:	2302      	movs	r3, #2
 8003082:	e010      	b.n	80030a6 <_ZN7Tracker5moveLEtiPhS0_+0x57a>
	}
	if(flag == 1){
 8003084:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003088:	2b01      	cmp	r3, #1
 800308a:	d10a      	bne.n	80030a2 <_ZN7Tracker5moveLEtiPhS0_+0x576>
		this->copy(leftSide, rightSide, templ, tempr);
 800308c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003090:	f107 0314 	add.w	r3, r7, #20
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800309a:	6839      	ldr	r1, [r7, #0]
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7fe fe73 	bl	8001d88 <_ZN7Tracker4copyEPhS0_S0_S0_>
	}
	return flag;
 80030a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3758      	adds	r7, #88	; 0x58
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop

080030b0 <_ZN7Tracker5moveFEtiPhS0_>:

uint8_t Tracker::moveF(uint16_t by,int cond ,uint8_t leftSide[30] ,uint8_t rightSide[30]){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b098      	sub	sp, #96	; 0x60
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	460b      	mov	r3, r1
 80030be:	817b      	strh	r3, [r7, #10]
	uint16_t advanced = 0 ;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint8_t templ[30],tempr[30];
	uint8_t flag = 3;
 80030c6:	2303      	movs	r3, #3
 80030c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	this->copy(templ, tempr, leftSide, rightSide);
 80030cc:	f107 0214 	add.w	r2, r7, #20
 80030d0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80030d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7fe fe54 	bl	8001d88 <_ZN7Tracker4copyEPhS0_S0_S0_>
	switch(this->dir){
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80030e6:	331a      	adds	r3, #26
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	f200 81ee 	bhi.w	80034cc <_ZN7Tracker5moveFEtiPhS0_+0x41c>
 80030f0:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <_ZN7Tracker5moveFEtiPhS0_+0x48>)
 80030f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f6:	bf00      	nop
 80030f8:	08003109 	.word	0x08003109
 80030fc:	080031f9 	.word	0x080031f9
 8003100:	080032eb 	.word	0x080032eb
 8003104:	080033db 	.word	0x080033db
	case N:
		if(this->r > 0 && this->matrix[this->r-1][this->c] == cond){
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800310e:	3318      	adds	r3, #24
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d06b      	beq.n	80031ee <_ZN7Tracker5moveFEtiPhS0_+0x13e>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800311c:	3318      	adds	r3, #24
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	1e5a      	subs	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003128:	3319      	adds	r3, #25
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	68f9      	ldr	r1, [r7, #12]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4403      	add	r3, r0
 800313a:	3306      	adds	r3, #6
 800313c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d153      	bne.n	80031ee <_ZN7Tracker5moveFEtiPhS0_+0x13e>
			advanced = dcSys.advance(by,leftSide,rightSide);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6958      	ldr	r0, [r3, #20]
 800314a:	8979      	ldrh	r1, [r7, #10]
 800314c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	f7fe f8ea 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 8003154:	4603      	mov	r3, r0
 8003156:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			if(advanced < by){
 800315a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	429a      	cmp	r2, r3
 8003162:	d237      	bcs.n	80031d4 <_ZN7Tracker5moveFEtiPhS0_+0x124>
				HAL_Delay(250);
 8003164:	20fa      	movs	r0, #250	; 0xfa
 8003166:	f005 f8b1 	bl	80082cc <HAL_Delay>
				dcSys.returnBy(advanced);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe f9c3 	bl	8001500 <_ZN8DCSystem8returnByEt>
				HAL_Delay(250);
 800317a:	20fa      	movs	r0, #250	; 0xfa
 800317c:	f005 f8a6 	bl	80082cc <HAL_Delay>
				this->matrix[this->r-1][this->c] = -3 ;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003186:	3318      	adds	r3, #24
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	1e5a      	subs	r2, r3, #1
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003192:	3319      	adds	r3, #25
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	68f9      	ldr	r1, [r7, #12]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4403      	add	r3, r0
 80031a4:	3306      	adds	r3, #6
 80031a6:	f06f 0202 	mvn.w	r2, #2
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				this->mark_obstacle(this->r-1, this->c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80031b4:	3318      	adds	r3, #24
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	1e59      	subs	r1, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80031c0:	3319      	adds	r3, #25
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fa40 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				flag = 1;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(advanced < by){
 80031d2:	e010      	b.n	80031f6 <_ZN7Tracker5moveFEtiPhS0_+0x146>
			}else{
				this->r--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80031da:	3318      	adds	r3, #24
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	3b01      	subs	r3, #1
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80031e8:	3318      	adds	r3, #24
 80031ea:	701a      	strb	r2, [r3, #0]
			if(advanced < by){
 80031ec:	e003      	b.n	80031f6 <_ZN7Tracker5moveFEtiPhS0_+0x146>
			}
		}else{
			flag = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		break;
 80031f4:	e16c      	b.n	80034d0 <_ZN7Tracker5moveFEtiPhS0_+0x420>
 80031f6:	e16b      	b.n	80034d0 <_ZN7Tracker5moveFEtiPhS0_+0x420>
	case E:
		if(this->c < SIZE-1 && this->matrix[this->r][this->c+1] == cond){
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80031fe:	3319      	adds	r3, #25
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b1c      	cmp	r3, #28
 8003204:	d86c      	bhi.n	80032e0 <_ZN7Tracker5moveFEtiPhS0_+0x230>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800320c:	3318      	adds	r3, #24
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003218:	3319      	adds	r3, #25
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	1c59      	adds	r1, r3, #1
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4603      	mov	r3, r0
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a1b      	subs	r3, r3, r0
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	440b      	add	r3, r1
 800322a:	3306      	adds	r3, #6
 800322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	429a      	cmp	r2, r3
 8003234:	d154      	bne.n	80032e0 <_ZN7Tracker5moveFEtiPhS0_+0x230>
			advanced = dcSys.advance(by,leftSide,rightSide);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6958      	ldr	r0, [r3, #20]
 800323a:	8979      	ldrh	r1, [r7, #10]
 800323c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	f7fe f872 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 8003244:	4603      	mov	r3, r0
 8003246:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			if(advanced < by){
 800324a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800324e:	897b      	ldrh	r3, [r7, #10]
 8003250:	429a      	cmp	r2, r3
 8003252:	d238      	bcs.n	80032c6 <_ZN7Tracker5moveFEtiPhS0_+0x216>
				HAL_Delay(250);
 8003254:	20fa      	movs	r0, #250	; 0xfa
 8003256:	f005 f839 	bl	80082cc <HAL_Delay>
				dcSys.returnBy(advanced);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe f94b 	bl	8001500 <_ZN8DCSystem8returnByEt>
				HAL_Delay(250);
 800326a:	20fa      	movs	r0, #250	; 0xfa
 800326c:	f005 f82e 	bl	80082cc <HAL_Delay>
				this->matrix[this->r][this->c+1] = -3 ;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003276:	3318      	adds	r3, #24
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003282:	3319      	adds	r3, #25
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	1c59      	adds	r1, r3, #1
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4603      	mov	r3, r0
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a1b      	subs	r3, r3, r0
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	440b      	add	r3, r1
 8003294:	3306      	adds	r3, #6
 8003296:	f06f 0102 	mvn.w	r1, #2
 800329a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				this->mark_obstacle(this->r, this->c+1);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80032a4:	3318      	adds	r3, #24
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	4619      	mov	r1, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80032b0:	3319      	adds	r3, #25
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	461a      	mov	r2, r3
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f9c7 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				flag = 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(advanced < by){
 80032c4:	e010      	b.n	80032e8 <_ZN7Tracker5moveFEtiPhS0_+0x238>
			}else{
				this->c++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80032cc:	3319      	adds	r3, #25
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80032da:	3319      	adds	r3, #25
 80032dc:	701a      	strb	r2, [r3, #0]
			if(advanced < by){
 80032de:	e003      	b.n	80032e8 <_ZN7Tracker5moveFEtiPhS0_+0x238>
			}
		}else{
			flag = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		break;
 80032e6:	e0f3      	b.n	80034d0 <_ZN7Tracker5moveFEtiPhS0_+0x420>
 80032e8:	e0f2      	b.n	80034d0 <_ZN7Tracker5moveFEtiPhS0_+0x420>
	case S:
		if(this->r < SIZE-1 && this->matrix[this->r+1][this->c] == cond){
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80032f0:	3318      	adds	r3, #24
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b1c      	cmp	r3, #28
 80032f6:	d86b      	bhi.n	80033d0 <_ZN7Tracker5moveFEtiPhS0_+0x320>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80032fe:	3318      	adds	r3, #24
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800330a:	3319      	adds	r3, #25
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4403      	add	r3, r0
 800331c:	3306      	adds	r3, #6
 800331e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	429a      	cmp	r2, r3
 8003326:	d153      	bne.n	80033d0 <_ZN7Tracker5moveFEtiPhS0_+0x320>
			advanced = dcSys.advance(by,leftSide,rightSide);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6958      	ldr	r0, [r3, #20]
 800332c:	8979      	ldrh	r1, [r7, #10]
 800332e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	f7fd fff9 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 8003336:	4603      	mov	r3, r0
 8003338:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			if(advanced < by){
 800333c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003340:	897b      	ldrh	r3, [r7, #10]
 8003342:	429a      	cmp	r2, r3
 8003344:	d237      	bcs.n	80033b6 <_ZN7Tracker5moveFEtiPhS0_+0x306>
				HAL_Delay(250);
 8003346:	20fa      	movs	r0, #250	; 0xfa
 8003348:	f004 ffc0 	bl	80082cc <HAL_Delay>
				dcSys.returnBy(advanced);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003354:	4611      	mov	r1, r2
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe f8d2 	bl	8001500 <_ZN8DCSystem8returnByEt>
				HAL_Delay(250);
 800335c:	20fa      	movs	r0, #250	; 0xfa
 800335e:	f004 ffb5 	bl	80082cc <HAL_Delay>
				this->matrix[this->r+1][this->c] = -3 ;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003368:	3318      	adds	r3, #24
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003374:	3319      	adds	r3, #25
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	68f9      	ldr	r1, [r7, #12]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4403      	add	r3, r0
 8003386:	3306      	adds	r3, #6
 8003388:	f06f 0202 	mvn.w	r2, #2
 800338c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				this->mark_obstacle(this->r+1, this->c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003396:	3318      	adds	r3, #24
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	1c59      	adds	r1, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80033a2:	3319      	adds	r3, #25
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f94f 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				flag = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(advanced < by){
 80033b4:	e010      	b.n	80033d8 <_ZN7Tracker5moveFEtiPhS0_+0x328>
			}else{
				this->r++;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80033bc:	3318      	adds	r3, #24
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80033ca:	3318      	adds	r3, #24
 80033cc:	701a      	strb	r2, [r3, #0]
			if(advanced < by){
 80033ce:	e003      	b.n	80033d8 <_ZN7Tracker5moveFEtiPhS0_+0x328>
			}
		}else{
			flag = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		break;
 80033d6:	e07b      	b.n	80034d0 <_ZN7Tracker5moveFEtiPhS0_+0x420>
 80033d8:	e07a      	b.n	80034d0 <_ZN7Tracker5moveFEtiPhS0_+0x420>
	case W:
		if(this->c > 0 && this->matrix[this->r][this->c-1] == cond){
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80033e0:	3319      	adds	r3, #25
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d06c      	beq.n	80034c2 <_ZN7Tracker5moveFEtiPhS0_+0x412>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80033ee:	3318      	adds	r3, #24
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80033fa:	3319      	adds	r3, #25
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	1e59      	subs	r1, r3, #1
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4603      	mov	r3, r0
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a1b      	subs	r3, r3, r0
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	440b      	add	r3, r1
 800340c:	3306      	adds	r3, #6
 800340e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	d154      	bne.n	80034c2 <_ZN7Tracker5moveFEtiPhS0_+0x412>
			advanced = dcSys.advance(by,leftSide,rightSide);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6958      	ldr	r0, [r3, #20]
 800341c:	8979      	ldrh	r1, [r7, #10]
 800341e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	f7fd ff81 	bl	8001328 <_ZN8DCSystem7advanceEtPhS0_>
 8003426:	4603      	mov	r3, r0
 8003428:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			if(advanced < by){
 800342c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003430:	897b      	ldrh	r3, [r7, #10]
 8003432:	429a      	cmp	r2, r3
 8003434:	d238      	bcs.n	80034a8 <_ZN7Tracker5moveFEtiPhS0_+0x3f8>
				HAL_Delay(250);
 8003436:	20fa      	movs	r0, #250	; 0xfa
 8003438:	f004 ff48 	bl	80082cc <HAL_Delay>
				dcSys.returnBy(advanced);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe f85a 	bl	8001500 <_ZN8DCSystem8returnByEt>
				HAL_Delay(250);
 800344c:	20fa      	movs	r0, #250	; 0xfa
 800344e:	f004 ff3d 	bl	80082cc <HAL_Delay>
				this->matrix[this->r][this->c-1] = -3 ;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003458:	3318      	adds	r3, #24
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003464:	3319      	adds	r3, #25
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	1e59      	subs	r1, r3, #1
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4603      	mov	r3, r0
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	1a1b      	subs	r3, r3, r0
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	440b      	add	r3, r1
 8003476:	3306      	adds	r3, #6
 8003478:	f06f 0102 	mvn.w	r1, #2
 800347c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				this->mark_obstacle(this->r, this->c-1);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003486:	3318      	adds	r3, #24
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	4619      	mov	r1, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003492:	3319      	adds	r3, #25
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	3b01      	subs	r3, #1
 8003498:	461a      	mov	r2, r3
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f8d6 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				flag = 1;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(advanced < by){
 80034a6:	e010      	b.n	80034ca <_ZN7Tracker5moveFEtiPhS0_+0x41a>
			}else{
				this->c--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80034ae:	3319      	adds	r3, #25
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80034bc:	3319      	adds	r3, #25
 80034be:	701a      	strb	r2, [r3, #0]
			if(advanced < by){
 80034c0:	e003      	b.n	80034ca <_ZN7Tracker5moveFEtiPhS0_+0x41a>
			}
		}else{
			flag = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}

		break;
 80034c8:	e002      	b.n	80034d0 <_ZN7Tracker5moveFEtiPhS0_+0x420>
 80034ca:	e001      	b.n	80034d0 <_ZN7Tracker5moveFEtiPhS0_+0x420>
	default:return 2;
 80034cc:	2302      	movs	r3, #2
 80034ce:	e010      	b.n	80034f2 <_ZN7Tracker5moveFEtiPhS0_+0x442>
	}
	if(flag == 1){
 80034d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10a      	bne.n	80034ee <_ZN7Tracker5moveFEtiPhS0_+0x43e>
		this->copy(leftSide, rightSide, templ, tempr);
 80034d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7fe fc4d 	bl	8001d88 <_ZN7Tracker4copyEPhS0_S0_S0_>
	}
	return flag;
 80034ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3758      	adds	r7, #88	; 0x58
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop

080034fc <_ZN7Tracker10init_graphEv>:
	default:return 2 ;
	}
	return 1 ;
}

void Tracker::init_graph(){
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < SIZE2; ++i){
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800350e:	da16      	bge.n	800353e <_ZN7Tracker10init_graphEv+0x42>
		for (int j = 0; j < 4; ++j){
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b03      	cmp	r3, #3
 8003518:	dc0d      	bgt.n	8003536 <_ZN7Tracker10init_graphEv+0x3a>
			graph[i][j] = 0;
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	441a      	add	r2, r3
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4413      	add	r3, r2
 8003526:	f603 6328 	addw	r3, r3, #3624	; 0xe28
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; ++j){
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	3301      	adds	r3, #1
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	e7ee      	b.n	8003514 <_ZN7Tracker10init_graphEv+0x18>
	for (int i = 0; i < SIZE2; ++i){
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	3301      	adds	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	e7e4      	b.n	8003508 <_ZN7Tracker10init_graphEv+0xc>
	    }
	}
	for (int i = 0; i < SIZE2; ++i){
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003548:	da78      	bge.n	800363c <_ZN7Tracker10init_graphEv+0x140>
		if(i-1 >= 0 && ((int)(i/SIZE) == (int)((i-1)/SIZE))){
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3b01      	subs	r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	db19      	blt.n	8003586 <_ZN7Tracker10init_graphEv+0x8a>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a3c      	ldr	r2, [pc, #240]	; (8003648 <_ZN7Tracker10init_graphEv+0x14c>)
 8003556:	fb82 1203 	smull	r1, r2, r2, r3
 800355a:	441a      	add	r2, r3
 800355c:	1112      	asrs	r2, r2, #4
 800355e:	17db      	asrs	r3, r3, #31
 8003560:	1ad2      	subs	r2, r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3b01      	subs	r3, #1
 8003566:	4938      	ldr	r1, [pc, #224]	; (8003648 <_ZN7Tracker10init_graphEv+0x14c>)
 8003568:	fb81 0103 	smull	r0, r1, r1, r3
 800356c:	4419      	add	r1, r3
 800356e:	1109      	asrs	r1, r1, #4
 8003570:	17db      	asrs	r3, r3, #31
 8003572:	1acb      	subs	r3, r1, r3
 8003574:	429a      	cmp	r2, r3
 8003576:	d106      	bne.n	8003586 <_ZN7Tracker10init_graphEv+0x8a>
	       graph[i][1] = 1 ;
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2e29 	strb.w	r2, [r3, #3625]	; 0xe29
	    }
	    if(i-SIZE >= 0 && ((int)(i/SIZE) > (int)((i-SIZE)/SIZE))){
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3b1e      	subs	r3, #30
 800358a:	2b00      	cmp	r3, #0
 800358c:	db19      	blt.n	80035c2 <_ZN7Tracker10init_graphEv+0xc6>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4a2d      	ldr	r2, [pc, #180]	; (8003648 <_ZN7Tracker10init_graphEv+0x14c>)
 8003592:	fb82 1203 	smull	r1, r2, r2, r3
 8003596:	441a      	add	r2, r3
 8003598:	1112      	asrs	r2, r2, #4
 800359a:	17db      	asrs	r3, r3, #31
 800359c:	1ad2      	subs	r2, r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3b1e      	subs	r3, #30
 80035a2:	4929      	ldr	r1, [pc, #164]	; (8003648 <_ZN7Tracker10init_graphEv+0x14c>)
 80035a4:	fb81 0103 	smull	r0, r1, r1, r3
 80035a8:	4419      	add	r1, r3
 80035aa:	1109      	asrs	r1, r1, #4
 80035ac:	17db      	asrs	r3, r3, #31
 80035ae:	1acb      	subs	r3, r1, r3
 80035b0:	429a      	cmp	r2, r3
 80035b2:	dd06      	ble.n	80035c2 <_ZN7Tracker10init_graphEv+0xc6>
	    	graph[i][0] = 1 ;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	f202 328a 	addw	r2, r2, #906	; 0x38a
 80035bc:	2101      	movs	r1, #1
 80035be:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	    }
	    if(((int)(i/SIZE) == (int)((i+1)/SIZE))){
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a20      	ldr	r2, [pc, #128]	; (8003648 <_ZN7Tracker10init_graphEv+0x14c>)
 80035c6:	fb82 1203 	smull	r1, r2, r2, r3
 80035ca:	441a      	add	r2, r3
 80035cc:	1112      	asrs	r2, r2, #4
 80035ce:	17db      	asrs	r3, r3, #31
 80035d0:	1ad2      	subs	r2, r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3301      	adds	r3, #1
 80035d6:	491c      	ldr	r1, [pc, #112]	; (8003648 <_ZN7Tracker10init_graphEv+0x14c>)
 80035d8:	fb81 0103 	smull	r0, r1, r1, r3
 80035dc:	4419      	add	r1, r3
 80035de:	1109      	asrs	r1, r1, #4
 80035e0:	17db      	asrs	r3, r3, #31
 80035e2:	1acb      	subs	r3, r1, r3
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d106      	bne.n	80035f6 <_ZN7Tracker10init_graphEv+0xfa>
        	graph[i][2] = 1 ;
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2e2a 	strb.w	r2, [r3, #3626]	; 0xe2a
        }
        if(i+SIZE < SIZE2 && ((int)(i/SIZE) < (int)((i+SIZE)/SIZE))){
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	331e      	adds	r3, #30
 80035fa:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80035fe:	da19      	bge.n	8003634 <_ZN7Tracker10init_graphEv+0x138>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a11      	ldr	r2, [pc, #68]	; (8003648 <_ZN7Tracker10init_graphEv+0x14c>)
 8003604:	fb82 1203 	smull	r1, r2, r2, r3
 8003608:	441a      	add	r2, r3
 800360a:	1112      	asrs	r2, r2, #4
 800360c:	17db      	asrs	r3, r3, #31
 800360e:	1ad2      	subs	r2, r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	331e      	adds	r3, #30
 8003614:	490c      	ldr	r1, [pc, #48]	; (8003648 <_ZN7Tracker10init_graphEv+0x14c>)
 8003616:	fb81 0103 	smull	r0, r1, r1, r3
 800361a:	4419      	add	r1, r3
 800361c:	1109      	asrs	r1, r1, #4
 800361e:	17db      	asrs	r3, r3, #31
 8003620:	1acb      	subs	r3, r1, r3
 8003622:	429a      	cmp	r2, r3
 8003624:	da06      	bge.n	8003634 <_ZN7Tracker10init_graphEv+0x138>
        	graph[i][3] = 1 ;
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2e2b 	strb.w	r2, [r3, #3627]	; 0xe2b
	for (int i = 0; i < SIZE2; ++i){
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3301      	adds	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e782      	b.n	8003542 <_ZN7Tracker10init_graphEv+0x46>
        }
    }
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	88888889 	.word	0x88888889

0800364c <_ZN7Tracker13mark_obstacleEii>:

void Tracker::mark_obstacle(int r , int c){
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
	int v = r*SIZE + c ;
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	461a      	mov	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
	if(graph[v][0]){
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	f202 328a 	addw	r2, r2, #906	; 0x38a
 8003672:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00e      	beq.n	8003698 <_ZN7Tracker13mark_obstacleEii+0x4c>
		graph[v][0]      = false ;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	f202 328a 	addw	r2, r2, #906	; 0x38a
 8003682:	2100      	movs	r1, #0
 8003684:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		graph[v-SIZE][3] = false ;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	3b1e      	subs	r3, #30
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2e2b 	strb.w	r2, [r3, #3627]	; 0xe2b
	}
	if(graph[v][1]){
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	f893 3e29 	ldrb.w	r3, [r3, #3625]	; 0xe29
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00e      	beq.n	80036c6 <_ZN7Tracker13mark_obstacleEii+0x7a>
		graph[v][1]   = false ;
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2e29 	strb.w	r2, [r3, #3625]	; 0xe29
		graph[v-1][2] = false ;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2e2a 	strb.w	r2, [r3, #3626]	; 0xe2a
	}
	if(graph[v][2]){
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	f893 3e2a 	ldrb.w	r3, [r3, #3626]	; 0xe2a
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00e      	beq.n	80036f4 <_ZN7Tracker13mark_obstacleEii+0xa8>
		graph[v][2]   = false;
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2e2a 	strb.w	r2, [r3, #3626]	; 0xe2a
		graph[v+1][1] = false;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3301      	adds	r3, #1
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2e29 	strb.w	r2, [r3, #3625]	; 0xe29
	}
	if(graph[v][3]){
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	f893 3e2b 	ldrb.w	r3, [r3, #3627]	; 0xe2b
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00f      	beq.n	8003724 <_ZN7Tracker13mark_obstacleEii+0xd8>
		graph[v][3]      = false ;
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2e2b 	strb.w	r2, [r3, #3627]	; 0xe2b
		graph[v+SIZE][0] = false ;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f103 021e 	add.w	r2, r3, #30
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f202 328a 	addw	r2, r2, #906	; 0x38a
 800371e:	2100      	movs	r1, #0
 8003720:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	}
}
 8003724:	bf00      	nop
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_ZN7Tracker8dijkstraEv>:


int Tracker::dijkstra(){
 8003730:	b580      	push	{r7, lr}
 8003732:	f5ad 5dfe 	sub.w	sp, sp, #8128	; 0x1fc0
 8003736:	b082      	sub	sp, #8
 8003738:	af02      	add	r7, sp, #8
 800373a:	f107 0320 	add.w	r3, r7, #32
 800373e:	3b1c      	subs	r3, #28
 8003740:	6018      	str	r0, [r3, #0]
	int src = this->r*SIZE + this->c ;
 8003742:	f107 0320 	add.w	r3, r7, #32
 8003746:	3b1c      	subs	r3, #28
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800374e:	3318      	adds	r3, #24
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	461a      	mov	r2, r3
 800375e:	f107 0320 	add.w	r3, r7, #32
 8003762:	3b1c      	subs	r3, #28
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800376a:	3319      	adds	r3, #25
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	4413      	add	r3, r2
 8003770:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003774:	f102 0214 	add.w	r2, r2, #20
 8003778:	6013      	str	r3, [r2, #0]
    int dist[SIZE2];
    bool sptSet[SIZE2];
    int parent[SIZE2];
    parent[src] = -1;
 800377a:	f107 0320 	add.w	r3, r7, #32
 800377e:	3b18      	subs	r3, #24
 8003780:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003784:	f102 0214 	add.w	r2, r2, #20
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	f04f 31ff 	mov.w	r1, #4294967295
 800378e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < SIZE2; i++)
 8003792:	2300      	movs	r3, #0
 8003794:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003798:	f102 021c 	add.w	r2, r2, #28
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 80037a2:	f103 031c 	add.w	r3, r3, #28
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80037ac:	da23      	bge.n	80037f6 <_ZN7Tracker8dijkstraEv+0xc6>
    {
        dist[i] = 2147483647;
 80037ae:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80037b2:	f103 031c 	add.w	r3, r3, #28
 80037b6:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 80037ba:	f102 021c 	add.w	r2, r2, #28
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        sptSet[i] = false;
 80037c8:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 80037cc:	3b08      	subs	r3, #8
 80037ce:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 80037d2:	f102 021c 	add.w	r2, r2, #28
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	4413      	add	r3, r2
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SIZE2; i++)
 80037de:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 80037e2:	f103 031c 	add.w	r3, r3, #28
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 80037ee:	f102 021c 	add.w	r2, r2, #28
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e7d3      	b.n	800379e <_ZN7Tracker8dijkstraEv+0x6e>
    }
    dist[src] = 0;
 80037f6:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80037fa:	f103 031c 	add.w	r3, r3, #28
 80037fe:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003802:	f102 0214 	add.w	r2, r2, #20
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	2100      	movs	r1, #0
 800380a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int count = 0; count < SIZE2 - 1; count++){
 800380e:	2300      	movs	r3, #0
 8003810:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003814:	f102 0218 	add.w	r2, r2, #24
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 800381e:	f103 0318 	add.w	r3, r3, #24
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f240 3282 	movw	r2, #898	; 0x382
 8003828:	4293      	cmp	r3, r2
 800382a:	f300 823f 	bgt.w	8003cac <_ZN7Tracker8dijkstraEv+0x57c>
        int u = minDistance(dist, sptSet);
 800382e:	f507 6262 	add.w	r2, r7, #3616	; 0xe20
 8003832:	3a08      	subs	r2, #8
 8003834:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 8003838:	f101 011c 	add.w	r1, r1, #28
 800383c:	f107 0320 	add.w	r3, r7, #32
 8003840:	3b1c      	subs	r3, #28
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	f000 fa56 	bl	8003cf4 <_ZN7Tracker11minDistanceEPiPb>
 8003848:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 800384c:	f103 0310 	add.w	r3, r3, #16
 8003850:	6018      	str	r0, [r3, #0]
        sptSet[u] = true;
 8003852:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8003856:	3b08      	subs	r3, #8
 8003858:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 800385c:	f102 0210 	add.w	r2, r2, #16
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	4413      	add	r3, r2
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
        //printf("u = %d\t",u );
	        if(u- SIZE >= 0){
 8003868:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 800386c:	f103 0310 	add.w	r3, r3, #16
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3b1e      	subs	r3, #30
 8003874:	2b00      	cmp	r3, #0
 8003876:	db7e      	blt.n	8003976 <_ZN7Tracker8dijkstraEv+0x246>
            if(!sptSet[u- SIZE]){
 8003878:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 800387c:	f103 0310 	add.w	r3, r3, #16
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1a3 021e 	sub.w	r2, r3, #30
 8003886:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800388a:	3b08      	subs	r3, #8
 800388c:	5c9b      	ldrb	r3, [r3, r2]
 800388e:	f083 0301 	eor.w	r3, r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d06e      	beq.n	8003976 <_ZN7Tracker8dijkstraEv+0x246>
                if(graph[u][0] && dist[u] + graph[u][0] < dist[u- SIZE]){
 8003898:	f107 0320 	add.w	r3, r7, #32
 800389c:	3b1c      	subs	r3, #28
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 80038a4:	f102 0210 	add.w	r2, r2, #16
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	f202 328a 	addw	r2, r2, #906	; 0x38a
 80038ae:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d05f      	beq.n	8003976 <_ZN7Tracker8dijkstraEv+0x246>
 80038b6:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80038ba:	f103 031c 	add.w	r3, r3, #28
 80038be:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 80038c2:	f102 0210 	add.w	r2, r2, #16
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038cc:	f107 0320 	add.w	r3, r7, #32
 80038d0:	3b1c      	subs	r3, #28
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f507 51fd 	add.w	r1, r7, #8096	; 0x1fa0
 80038d8:	f101 0110 	add.w	r1, r1, #16
 80038dc:	6809      	ldr	r1, [r1, #0]
 80038de:	f201 318a 	addw	r1, r1, #906	; 0x38a
 80038e2:	f813 3021 	ldrb.w	r3, [r3, r1, lsl #2]
 80038e6:	441a      	add	r2, r3
 80038e8:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 80038ec:	f103 0310 	add.w	r3, r3, #16
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1a3 011e 	sub.w	r1, r3, #30
 80038f6:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80038fa:	f103 031c 	add.w	r3, r3, #28
 80038fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003902:	429a      	cmp	r2, r3
 8003904:	da37      	bge.n	8003976 <_ZN7Tracker8dijkstraEv+0x246>
                    //printf("v = %d\t",u- SIZE );
                    parent[u- SIZE] = u;
 8003906:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 800390a:	f103 0310 	add.w	r3, r3, #16
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f1a3 021e 	sub.w	r2, r3, #30
 8003914:	f107 0320 	add.w	r3, r7, #32
 8003918:	3b18      	subs	r3, #24
 800391a:	f507 51fd 	add.w	r1, r7, #8096	; 0x1fa0
 800391e:	f101 0110 	add.w	r1, r1, #16
 8003922:	6809      	ldr	r1, [r1, #0]
 8003924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    dist[u- SIZE] = dist[u] + graph[u][0];
 8003928:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800392c:	f103 031c 	add.w	r3, r3, #28
 8003930:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003934:	f102 0210 	add.w	r2, r2, #16
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800393e:	f107 0320 	add.w	r3, r7, #32
 8003942:	3b1c      	subs	r3, #28
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 800394a:	f102 0210 	add.w	r2, r2, #16
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	f202 328a 	addw	r2, r2, #906	; 0x38a
 8003954:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8003958:	4618      	mov	r0, r3
 800395a:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 800395e:	f103 0310 	add.w	r3, r3, #16
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1a3 021e 	sub.w	r2, r3, #30
 8003968:	4401      	add	r1, r0
 800396a:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800396e:	f103 031c 	add.w	r3, r3, #28
 8003972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                }
            }
        }
        if(u- 1 >= 0){
 8003976:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 800397a:	f103 0310 	add.w	r3, r3, #16
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3b01      	subs	r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	db7a      	blt.n	8003a7c <_ZN7Tracker8dijkstraEv+0x34c>
            if(!sptSet[u- 1]){
 8003986:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 800398a:	f103 0310 	add.w	r3, r3, #16
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	1e5a      	subs	r2, r3, #1
 8003992:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8003996:	3b08      	subs	r3, #8
 8003998:	5c9b      	ldrb	r3, [r3, r2]
 800399a:	f083 0301 	eor.w	r3, r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d06b      	beq.n	8003a7c <_ZN7Tracker8dijkstraEv+0x34c>
                if(graph[u][1] && dist[u] + graph[u][1] < dist[u- 1]){
 80039a4:	f107 0320 	add.w	r3, r7, #32
 80039a8:	3b1c      	subs	r3, #28
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 80039b0:	f103 0310 	add.w	r3, r3, #16
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	f893 3e29 	ldrb.w	r3, [r3, #3625]	; 0xe29
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d05c      	beq.n	8003a7c <_ZN7Tracker8dijkstraEv+0x34c>
 80039c2:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80039c6:	f103 031c 	add.w	r3, r3, #28
 80039ca:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 80039ce:	f102 0210 	add.w	r2, r2, #16
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039d8:	f107 0320 	add.w	r3, r7, #32
 80039dc:	3b1c      	subs	r3, #28
 80039de:	6819      	ldr	r1, [r3, #0]
 80039e0:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 80039e4:	f103 0310 	add.w	r3, r3, #16
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	f893 3e29 	ldrb.w	r3, [r3, #3625]	; 0xe29
 80039f2:	441a      	add	r2, r3
 80039f4:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 80039f8:	f103 0310 	add.w	r3, r3, #16
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	1e59      	subs	r1, r3, #1
 8003a00:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8003a04:	f103 031c 	add.w	r3, r3, #28
 8003a08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	da35      	bge.n	8003a7c <_ZN7Tracker8dijkstraEv+0x34c>
                    //printf("v = %d\t",u- 1 );
                    parent[u- 1] = u;
 8003a10:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003a14:	f103 0310 	add.w	r3, r3, #16
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	1e5a      	subs	r2, r3, #1
 8003a1c:	f107 0320 	add.w	r3, r7, #32
 8003a20:	3b18      	subs	r3, #24
 8003a22:	f507 51fd 	add.w	r1, r7, #8096	; 0x1fa0
 8003a26:	f101 0110 	add.w	r1, r1, #16
 8003a2a:	6809      	ldr	r1, [r1, #0]
 8003a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    dist[u- 1] = dist[u] + graph[u][1];
 8003a30:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8003a34:	f103 031c 	add.w	r3, r3, #28
 8003a38:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003a3c:	f102 0210 	add.w	r2, r2, #16
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a46:	f107 0320 	add.w	r3, r7, #32
 8003a4a:	3b1c      	subs	r3, #28
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003a52:	f103 0310 	add.w	r3, r3, #16
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f893 3e29 	ldrb.w	r3, [r3, #3625]	; 0xe29
 8003a60:	4618      	mov	r0, r3
 8003a62:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003a66:	f103 0310 	add.w	r3, r3, #16
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	4401      	add	r1, r0
 8003a70:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8003a74:	f103 031c 	add.w	r3, r3, #28
 8003a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                }

            }
        }
        if(u + 1 < SIZE2){
 8003a7c:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003a80:	f103 0310 	add.w	r3, r3, #16
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003a8c:	da7a      	bge.n	8003b84 <_ZN7Tracker8dijkstraEv+0x454>
            if(!sptSet[u + 1]){
 8003a8e:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003a92:	f103 0310 	add.w	r3, r3, #16
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8003a9e:	3b08      	subs	r3, #8
 8003aa0:	5c9b      	ldrb	r3, [r3, r2]
 8003aa2:	f083 0301 	eor.w	r3, r3, #1
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d06b      	beq.n	8003b84 <_ZN7Tracker8dijkstraEv+0x454>
                if(graph[u][2] && dist[u] + graph[u][2] < dist[u + 1]){
 8003aac:	f107 0320 	add.w	r3, r7, #32
 8003ab0:	3b1c      	subs	r3, #28
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003ab8:	f103 0310 	add.w	r3, r3, #16
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f893 3e2a 	ldrb.w	r3, [r3, #3626]	; 0xe2a
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d05c      	beq.n	8003b84 <_ZN7Tracker8dijkstraEv+0x454>
 8003aca:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8003ace:	f103 031c 	add.w	r3, r3, #28
 8003ad2:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003ad6:	f102 0210 	add.w	r2, r2, #16
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ae0:	f107 0320 	add.w	r3, r7, #32
 8003ae4:	3b1c      	subs	r3, #28
 8003ae6:	6819      	ldr	r1, [r3, #0]
 8003ae8:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003aec:	f103 0310 	add.w	r3, r3, #16
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	f893 3e2a 	ldrb.w	r3, [r3, #3626]	; 0xe2a
 8003afa:	441a      	add	r2, r3
 8003afc:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003b00:	f103 0310 	add.w	r3, r3, #16
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8003b0c:	f103 031c 	add.w	r3, r3, #28
 8003b10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	da35      	bge.n	8003b84 <_ZN7Tracker8dijkstraEv+0x454>
                    //printf("v = %d\t",u + 1 );
                    parent[u + 1] = u;
 8003b18:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003b1c:	f103 0310 	add.w	r3, r3, #16
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	f107 0320 	add.w	r3, r7, #32
 8003b28:	3b18      	subs	r3, #24
 8003b2a:	f507 51fd 	add.w	r1, r7, #8096	; 0x1fa0
 8003b2e:	f101 0110 	add.w	r1, r1, #16
 8003b32:	6809      	ldr	r1, [r1, #0]
 8003b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    dist[u + 1] = dist[u] + graph[u][2];
 8003b38:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8003b3c:	f103 031c 	add.w	r3, r3, #28
 8003b40:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003b44:	f102 0210 	add.w	r2, r2, #16
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b4e:	f107 0320 	add.w	r3, r7, #32
 8003b52:	3b1c      	subs	r3, #28
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003b5a:	f103 0310 	add.w	r3, r3, #16
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	f893 3e2a 	ldrb.w	r3, [r3, #3626]	; 0xe2a
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003b6e:	f103 0310 	add.w	r3, r3, #16
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	4401      	add	r1, r0
 8003b78:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8003b7c:	f103 031c 	add.w	r3, r3, #28
 8003b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                }

            }
        }
        if(u + SIZE < SIZE2){
 8003b84:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003b88:	f103 0310 	add.w	r3, r3, #16
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	331e      	adds	r3, #30
 8003b90:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003b94:	da7e      	bge.n	8003c94 <_ZN7Tracker8dijkstraEv+0x564>
           if(!sptSet[u + SIZE]){
 8003b96:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003b9a:	f103 0310 	add.w	r3, r3, #16
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f103 021e 	add.w	r2, r3, #30
 8003ba4:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8003ba8:	3b08      	subs	r3, #8
 8003baa:	5c9b      	ldrb	r3, [r3, r2]
 8003bac:	f083 0301 	eor.w	r3, r3, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d06e      	beq.n	8003c94 <_ZN7Tracker8dijkstraEv+0x564>
                if(graph[u][3] && dist[u] + graph[u][3] < dist[u + SIZE]){
 8003bb6:	f107 0320 	add.w	r3, r7, #32
 8003bba:	3b1c      	subs	r3, #28
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003bc2:	f103 0310 	add.w	r3, r3, #16
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	f893 3e2b 	ldrb.w	r3, [r3, #3627]	; 0xe2b
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05f      	beq.n	8003c94 <_ZN7Tracker8dijkstraEv+0x564>
 8003bd4:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8003bd8:	f103 031c 	add.w	r3, r3, #28
 8003bdc:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003be0:	f102 0210 	add.w	r2, r2, #16
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003bea:	f107 0320 	add.w	r3, r7, #32
 8003bee:	3b1c      	subs	r3, #28
 8003bf0:	6819      	ldr	r1, [r3, #0]
 8003bf2:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003bf6:	f103 0310 	add.w	r3, r3, #16
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	f893 3e2b 	ldrb.w	r3, [r3, #3627]	; 0xe2b
 8003c04:	441a      	add	r2, r3
 8003c06:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003c0a:	f103 0310 	add.w	r3, r3, #16
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f103 011e 	add.w	r1, r3, #30
 8003c14:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8003c18:	f103 031c 	add.w	r3, r3, #28
 8003c1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	da37      	bge.n	8003c94 <_ZN7Tracker8dijkstraEv+0x564>
                    //printf("v = %d\t",u + SIZE );
                    parent[u + SIZE] = u;
 8003c24:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003c28:	f103 0310 	add.w	r3, r3, #16
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f103 021e 	add.w	r2, r3, #30
 8003c32:	f107 0320 	add.w	r3, r7, #32
 8003c36:	3b18      	subs	r3, #24
 8003c38:	f507 51fd 	add.w	r1, r7, #8096	; 0x1fa0
 8003c3c:	f101 0110 	add.w	r1, r1, #16
 8003c40:	6809      	ldr	r1, [r1, #0]
 8003c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    dist[u + SIZE] = dist[u] + graph[u][3];
 8003c46:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8003c4a:	f103 031c 	add.w	r3, r3, #28
 8003c4e:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003c52:	f102 0210 	add.w	r2, r2, #16
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c5c:	f107 0320 	add.w	r3, r7, #32
 8003c60:	3b1c      	subs	r3, #28
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003c68:	f103 0310 	add.w	r3, r3, #16
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	f893 3e2b 	ldrb.w	r3, [r3, #3627]	; 0xe2b
 8003c76:	4618      	mov	r0, r3
 8003c78:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003c7c:	f103 0310 	add.w	r3, r3, #16
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f103 021e 	add.w	r2, r3, #30
 8003c86:	4401      	add	r1, r0
 8003c88:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8003c8c:	f103 031c 	add.w	r3, r3, #28
 8003c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int count = 0; count < SIZE2 - 1; count++){
 8003c94:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003c98:	f103 0318 	add.w	r3, r3, #24
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8003ca4:	f102 0218 	add.w	r2, r2, #24
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e5b6      	b.n	800381a <_ZN7Tracker8dijkstraEv+0xea>
            }
        }
        //printf("\n");
    }
    //printf("\n");
    int d = printSolution(src,dist, SIZE2, parent) ;
 8003cac:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8003cb0:	f102 021c 	add.w	r2, r2, #28
 8003cb4:	f107 0020 	add.w	r0, r7, #32
 8003cb8:	381c      	subs	r0, #28
 8003cba:	f107 0320 	add.w	r3, r7, #32
 8003cbe:	3b18      	subs	r3, #24
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	f44f 7361 	mov.w	r3, #900	; 0x384
 8003cc6:	f507 51fd 	add.w	r1, r7, #8096	; 0x1fa0
 8003cca:	f101 0114 	add.w	r1, r1, #20
 8003cce:	6809      	ldr	r1, [r1, #0]
 8003cd0:	6800      	ldr	r0, [r0, #0]
 8003cd2:	f000 f843 	bl	8003d5c <_ZN7Tracker13printSolutionEiPiiS0_>
 8003cd6:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003cda:	f103 030c 	add.w	r3, r3, #12
 8003cde:	6018      	str	r0, [r3, #0]
    //printf("%d\n",d);
    return d ;
 8003ce0:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003ce4:	f103 030c 	add.w	r3, r3, #12
 8003ce8:	681b      	ldr	r3, [r3, #0]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	f507 57fe 	add.w	r7, r7, #8128	; 0x1fc0
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <_ZN7Tracker11minDistanceEPiPb>:

int Tracker::minDistance(int dist[],bool sptSet[]){
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
    int min = 2147483647 ;
 8003d00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003d04:	61fb      	str	r3, [r7, #28]
    int min_index;
	for (int v = 0; v < SIZE2; v++){
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003d10:	da1c      	bge.n	8003d4c <_ZN7Tracker11minDistanceEPiPb+0x58>
		if (sptSet[v] == false && dist[v] <= min){
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	f083 0301 	eor.w	r3, r3, #1
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00f      	beq.n	8003d44 <_ZN7Tracker11minDistanceEPiPb+0x50>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	db07      	blt.n	8003d44 <_ZN7Tracker11minDistanceEPiPb+0x50>
        	min = dist[v];
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	61fb      	str	r3, [r7, #28]
	        min_index = v;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	61bb      	str	r3, [r7, #24]
	for (int v = 0; v < SIZE2; v++){
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	3301      	adds	r3, #1
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e7de      	b.n	8003d0a <_ZN7Tracker11minDistanceEPiPb+0x16>
	    }
	}
	return min_index;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3724      	adds	r7, #36	; 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <_ZN7Tracker13printSolutionEiPiiS0_>:

int Tracker::printSolution(int src,int dist[], int n,int parent[]){
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
	int min = 2147483647 ;
 8003d6a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003d6e:	61fb      	str	r3, [r7, #28]
	int ind = -1;
 8003d70:	f04f 33ff 	mov.w	r3, #4294967295
 8003d74:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < SIZE2; i++){
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003d80:	da47      	bge.n	8003e12 <_ZN7Tracker13printSolutionEiPiiS0_+0xb6>
        if(i != src && dist[i] > 0 && dist[i] < SIZE2 && dist[i] < min && matrix[((int)(i/SIZE))][i%SIZE] == -2){
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d03f      	beq.n	8003e0a <_ZN7Tracker13printSolutionEiPiiS0_+0xae>
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	dd38      	ble.n	8003e0a <_ZN7Tracker13printSolutionEiPiiS0_+0xae>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003da6:	da30      	bge.n	8003e0a <_ZN7Tracker13printSolutionEiPiiS0_+0xae>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	dd28      	ble.n	8003e0a <_ZN7Tracker13printSolutionEiPiiS0_+0xae>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <_ZN7Tracker13printSolutionEiPiiS0_+0xd4>)
 8003dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8003dc0:	441a      	add	r2, r3
 8003dc2:	1112      	asrs	r2, r2, #4
 8003dc4:	17db      	asrs	r3, r3, #31
 8003dc6:	1ad0      	subs	r0, r2, r3
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <_ZN7Tracker13printSolutionEiPiiS0_+0xd4>)
 8003dcc:	fb83 1302 	smull	r1, r3, r3, r2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	1119      	asrs	r1, r3, #4
 8003dd4:	17d3      	asrs	r3, r2, #31
 8003dd6:	1ac9      	subs	r1, r1, r3
 8003dd8:	460b      	mov	r3, r1
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	1a5b      	subs	r3, r3, r1
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	1ad1      	subs	r1, r2, r3
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4603      	mov	r3, r0
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	1a1b      	subs	r3, r3, r0
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	440b      	add	r3, r1
 8003dee:	3306      	adds	r3, #6
 8003df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df4:	f113 0f02 	cmn.w	r3, #2
 8003df8:	d107      	bne.n	8003e0a <_ZN7Tracker13printSolutionEiPiiS0_+0xae>
        	min = dist[i] ;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	61fb      	str	r3, [r7, #28]
        	ind = i ;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < SIZE2; i++){
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	e7b3      	b.n	8003d7a <_ZN7Tracker13printSolutionEiPiiS0_+0x1e>
        }
    }
    if(ind != -1){
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d004      	beq.n	8003e24 <_ZN7Tracker13printSolutionEiPiiS0_+0xc8>
       	printPath(parent, ind);
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f808 	bl	8003e34 <_ZN7Tracker9printPathEPii>
    }
    return ind ;
 8003e24:	69bb      	ldr	r3, [r7, #24]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	88888889 	.word	0x88888889

08003e34 <_ZN7Tracker9printPathEPii>:

void Tracker::printPath(int parent[], int j){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
    if (parent[j] == - 1){return;}
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	4413      	add	r3, r2
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d02a      	beq.n	8003ea6 <_ZN7Tracker9printPathEPii+0x72>
    printPath(parent, parent[j]);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	4413      	add	r3, r2
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff ffe8 	bl	8003e34 <_ZN7Tracker9printPathEPii>
    matrix[((int)(j/SIZE))][j%SIZE] = -1 ;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <_ZN7Tracker9printPathEPii+0x7c>)
 8003e68:	fb82 1203 	smull	r1, r2, r2, r3
 8003e6c:	441a      	add	r2, r3
 8003e6e:	1112      	asrs	r2, r2, #4
 8003e70:	17db      	asrs	r3, r3, #31
 8003e72:	1ad0      	subs	r0, r2, r3
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <_ZN7Tracker9printPathEPii+0x7c>)
 8003e78:	fb83 1302 	smull	r1, r3, r3, r2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	1119      	asrs	r1, r3, #4
 8003e80:	17d3      	asrs	r3, r2, #31
 8003e82:	1ac9      	subs	r1, r1, r3
 8003e84:	460b      	mov	r3, r1
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a5b      	subs	r3, r3, r1
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	1ad1      	subs	r1, r2, r3
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4603      	mov	r3, r0
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	1a1b      	subs	r3, r3, r0
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	440b      	add	r3, r1
 8003e9a:	3306      	adds	r3, #6
 8003e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003ea4:	e000      	b.n	8003ea8 <_ZN7Tracker9printPathEPii+0x74>
    if (parent[j] == - 1){return;}
 8003ea6:	bf00      	nop
}
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	88888889 	.word	0x88888889

08003eb4 <_ZN7Tracker5go_toEiPhS0_>:

int  Tracker::go_to(int d, uint8_t leftSide[30] ,uint8_t rightSide[30]){
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b08d      	sub	sp, #52	; 0x34
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
	int flag=0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t leftobstacles = 0 , rightobstacles = 0 , stucked = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	75fb      	strb	r3, [r7, #23]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	75bb      	strb	r3, [r7, #22]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t fdist_obstacle = 15 ;
 8003ed4:	230f      	movs	r3, #15
 8003ed6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	int c = 0 ;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
	int cc = 0 ;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
	if(this->dir == N ){
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003ee8:	331a      	adds	r3, #26
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d135      	bne.n	8003f5c <_ZN7Tracker5go_toEiPhS0_+0xa8>
		if(this->r < SIZE && matrix[r+1][c] == -1){
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003ef6:	3318      	adds	r3, #24
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b1d      	cmp	r3, #29
 8003efc:	f200 80e3 	bhi.w	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003f06:	3318      	adds	r3, #24
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	3306      	adds	r3, #6
 8003f1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	f040 80cf 	bne.w	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
			this->dir = (enum DIR)((this->dir+2)%4);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003f2e:	331a      	adds	r3, #26
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	3302      	adds	r3, #2
 8003f34:	425a      	negs	r2, r3
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	f002 0203 	and.w	r2, r2, #3
 8003f3e:	bf58      	it	pl
 8003f40:	4253      	negpl	r3, r2
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003f4a:	331a      	adds	r3, #26
 8003f4c:	701a      	strb	r2, [r3, #0]
			dcSys.turnBy((TURN*2)-1);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	21b5      	movs	r1, #181	; 0xb5
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fd fb6b 	bl	8001630 <_ZN8DCSystem6turnByEi>
 8003f5a:	e0b4      	b.n	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
		}
	}else if(this->dir == E){
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003f62:	331a      	adds	r3, #26
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d136      	bne.n	8003fd8 <_ZN7Tracker5go_toEiPhS0_+0x124>
		if(this->c > 0 && matrix[r][c-1] == -1){
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003f70:	3319      	adds	r3, #25
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a6 	beq.w	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003f80:	3318      	adds	r3, #24
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	1e59      	subs	r1, r3, #1
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a1b      	subs	r3, r3, r0
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	440b      	add	r3, r1
 8003f96:	3306      	adds	r3, #6
 8003f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	f040 8091 	bne.w	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
			this->dir = (enum DIR)((this->dir+2)%4);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003faa:	331a      	adds	r3, #26
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	3302      	adds	r3, #2
 8003fb0:	425a      	negs	r2, r3
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	f002 0203 	and.w	r2, r2, #3
 8003fba:	bf58      	it	pl
 8003fbc:	4253      	negpl	r3, r2
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003fc6:	331a      	adds	r3, #26
 8003fc8:	701a      	strb	r2, [r3, #0]
			dcSys.turnBy((TURN*2)-1);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	21b5      	movs	r1, #181	; 0xb5
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fd fb2d 	bl	8001630 <_ZN8DCSystem6turnByEi>
 8003fd6:	e076      	b.n	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
		}
	}else if(this->dir == S){
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003fde:	331a      	adds	r3, #26
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d133      	bne.n	800404e <_ZN7Tracker5go_toEiPhS0_+0x19a>
		if(this->r > 0 && matrix[r-1][c] == -1){
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003fec:	3318      	adds	r3, #24
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d068      	beq.n	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	1e5a      	subs	r2, r3, #1
 8004000:	68f9      	ldr	r1, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	3306      	adds	r3, #6
 8004010:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d155      	bne.n	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
			this->dir = (enum DIR)((this->dir+2)%4);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004020:	331a      	adds	r3, #26
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	3302      	adds	r3, #2
 8004026:	425a      	negs	r2, r3
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	f002 0203 	and.w	r2, r2, #3
 8004030:	bf58      	it	pl
 8004032:	4253      	negpl	r3, r2
 8004034:	b2da      	uxtb	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800403c:	331a      	adds	r3, #26
 800403e:	701a      	strb	r2, [r3, #0]
			dcSys.turnBy((TURN*2)-1);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	21b5      	movs	r1, #181	; 0xb5
 8004046:	4618      	mov	r0, r3
 8004048:	f7fd faf2 	bl	8001630 <_ZN8DCSystem6turnByEi>
 800404c:	e03b      	b.n	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
		}
	}else if(this->dir == W){
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004054:	331a      	adds	r3, #26
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d134      	bne.n	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
		if(this->c < SIZE && matrix[r][c+1] == -1){
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004062:	3319      	adds	r3, #25
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b1d      	cmp	r3, #29
 8004068:	d82d      	bhi.n	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004070:	3318      	adds	r3, #24
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	1c59      	adds	r1, r3, #1
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4603      	mov	r3, r0
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a1b      	subs	r3, r3, r0
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	440b      	add	r3, r1
 8004086:	3306      	adds	r3, #6
 8004088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d119      	bne.n	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
			this->dir = (enum DIR)((this->dir+2)%4);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004098:	331a      	adds	r3, #26
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	3302      	adds	r3, #2
 800409e:	425a      	negs	r2, r3
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	f002 0203 	and.w	r2, r2, #3
 80040a8:	bf58      	it	pl
 80040aa:	4253      	negpl	r3, r2
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80040b4:	331a      	adds	r3, #26
 80040b6:	701a      	strb	r2, [r3, #0]
			dcSys.turnBy(-180);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f06f 01b3 	mvn.w	r1, #179	; 0xb3
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fd fab5 	bl	8001630 <_ZN8DCSystem6turnByEi>
		}
	}

	while(1){
		watering_palnt();
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7fd fd42 	bl	8001b50 <_ZN7Tracker14watering_palntEv>
		if(!enf && !ok){
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	f083 0301 	eor.w	r3, r3, #1
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <_ZN7Tracker5go_toEiPhS0_+0x23e>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	785b      	ldrb	r3, [r3, #1]
 80040de:	f083 0301 	eor.w	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d004      	beq.n	80040f2 <_ZN7Tracker5go_toEiPhS0_+0x23e>
			this->isOP = false ;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	749a      	strb	r2, [r3, #18]
			return 6 ;
 80040ee:	2306      	movs	r3, #6
 80040f0:	e317      	b.n	8004722 <_ZN7Tracker5go_toEiPhS0_+0x86e>
		}
		flag = 0 ;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
		leftobstacles = 0 ;
 80040f6:	2300      	movs	r3, #0
 80040f8:	75fb      	strb	r3, [r7, #23]
		rightobstacles= 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75bb      	strb	r3, [r7, #22]
		stucked = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		this->count(leftSide, rightSide, &leftobstacles, &rightobstacles, 30);
 8004104:	f107 0217 	add.w	r2, r7, #23
 8004108:	231e      	movs	r3, #30
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	f107 0316 	add.w	r3, r7, #22
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4613      	mov	r3, r2
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f7fd fe7c 	bl	8001e16 <_ZN7Tracker5countEPhS0_S0_S0_h>
				}
				this->matrix[this->r][this->c] = this->max() ;
		//////////////////////////////
*/

		this->matrix[this->r][this->c] = this->max() ;
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fb04 	bl	800472c <_ZN7Tracker3maxEv>
 8004124:	4603      	mov	r3, r0
 8004126:	461a      	mov	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800412e:	3318      	adds	r3, #24
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	4619      	mov	r1, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800413a:	3319      	adds	r3, #25
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	461c      	mov	r4, r3
 8004140:	4610      	mov	r0, r2
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	460b      	mov	r3, r1
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a5b      	subs	r3, r3, r1
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4423      	add	r3, r4
 800414e:	3306      	adds	r3, #6
 8004150:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
		if(this->matrix[this->r][this->c] >= PANELNUM){                   //  sunlight found
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800415a:	3318      	adds	r3, #24
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	4619      	mov	r1, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004166:	3319      	adds	r3, #25
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	460b      	mov	r3, r1
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a5b      	subs	r3, r3, r1
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4403      	add	r3, r0
 8004178:	3306      	adds	r3, #6
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	2b01      	cmp	r3, #1
 8004180:	dd04      	ble.n	800418c <_ZN7Tracker5go_toEiPhS0_+0x2d8>
			this->isOP = false  ;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	749a      	strb	r2, [r3, #18]
			return 5 ;
 8004188:	2305      	movs	r3, #5
 800418a:	e2ca      	b.n	8004722 <_ZN7Tracker5go_toEiPhS0_+0x86e>
		}else{
			this->isOP = true  ;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	749a      	strb	r2, [r3, #18]
		}

		switch(this->dir){
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004198:	331a      	adds	r3, #26
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b03      	cmp	r3, #3
 800419e:	f200 8267 	bhi.w	8004670 <_ZN7Tracker5go_toEiPhS0_+0x7bc>
 80041a2:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <_ZN7Tracker5go_toEiPhS0_+0x2f4>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041b9 	.word	0x080041b9
 80041ac:	080042e9 	.word	0x080042e9
 80041b0:	08004417 	.word	0x08004417
 80041b4:	08004547 	.word	0x08004547
			case N:
				if(rightobstacles > 2 && this->c < SIZE-1){          // obstacle on right
 80041b8:	7dbb      	ldrb	r3, [r7, #22]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d92d      	bls.n	800421a <_ZN7Tracker5go_toEiPhS0_+0x366>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80041c4:	3319      	adds	r3, #25
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b1c      	cmp	r3, #28
 80041ca:	d826      	bhi.n	800421a <_ZN7Tracker5go_toEiPhS0_+0x366>
					this->matrix[this->r][this->c+1] = -3 ;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80041d2:	3318      	adds	r3, #24
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80041de:	3319      	adds	r3, #25
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	1c59      	adds	r1, r3, #1
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4603      	mov	r3, r0
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	1a1b      	subs	r3, r3, r0
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	440b      	add	r3, r1
 80041f0:	3306      	adds	r3, #6
 80041f2:	f06f 0102 	mvn.w	r1, #2
 80041f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004200:	3318      	adds	r3, #24
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800420c:	3319      	adds	r3, #25
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	3301      	adds	r3, #1
 8004212:	461a      	mov	r2, r3
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff fa19 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2 && this->c > 0){               // obstacle on the left
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d92d      	bls.n	800427c <_ZN7Tracker5go_toEiPhS0_+0x3c8>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004226:	3319      	adds	r3, #25
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d026      	beq.n	800427c <_ZN7Tracker5go_toEiPhS0_+0x3c8>
					this->matrix[this->r][this->c-1] = -3 ;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004234:	3318      	adds	r3, #24
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004240:	3319      	adds	r3, #25
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	1e59      	subs	r1, r3, #1
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4603      	mov	r3, r0
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a1b      	subs	r3, r3, r0
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	440b      	add	r3, r1
 8004252:	3306      	adds	r3, #6
 8004254:	f06f 0102 	mvn.w	r1, #2
 8004258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c-1);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004262:	3318      	adds	r3, #24
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	4619      	mov	r1, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800426e:	3319      	adds	r3, #25
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	3b01      	subs	r3, #1
 8004274:	461a      	mov	r2, r3
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff f9e8 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->r > 0){               // obstacle in the front
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	789b      	ldrb	r3, [r3, #2]
 8004280:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8004284:	429a      	cmp	r2, r3
 8004286:	f240 81f5 	bls.w	8004674 <_ZN7Tracker5go_toEiPhS0_+0x7c0>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004290:	3318      	adds	r3, #24
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 81ed 	beq.w	8004674 <_ZN7Tracker5go_toEiPhS0_+0x7c0>
					this->matrix[this->r-1][this->c] = -3 ;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80042a0:	3318      	adds	r3, #24
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	1e5a      	subs	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80042ac:	3319      	adds	r3, #25
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	68f9      	ldr	r1, [r7, #12]
 80042b4:	4613      	mov	r3, r2
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4403      	add	r3, r0
 80042be:	3306      	adds	r3, #6
 80042c0:	f06f 0202 	mvn.w	r2, #2
 80042c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r-1, this->c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80042ce:	3318      	adds	r3, #24
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	1e59      	subs	r1, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80042da:	3319      	adds	r3, #25
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff f9b3 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 80042e6:	e1c5      	b.n	8004674 <_ZN7Tracker5go_toEiPhS0_+0x7c0>
			case E:
				if(rightobstacles > 2 && this->r < SIZE-1){          // obstacle on right
 80042e8:	7dbb      	ldrb	r3, [r7, #22]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d92c      	bls.n	8004348 <_ZN7Tracker5go_toEiPhS0_+0x494>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80042f4:	3318      	adds	r3, #24
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b1c      	cmp	r3, #28
 80042fa:	d825      	bhi.n	8004348 <_ZN7Tracker5go_toEiPhS0_+0x494>
					this->matrix[this->r+1][this->c] = -3 ;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004302:	3318      	adds	r3, #24
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800430e:	3319      	adds	r3, #25
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4403      	add	r3, r0
 8004320:	3306      	adds	r3, #6
 8004322:	f06f 0202 	mvn.w	r2, #2
 8004326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r+1, this->c);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004330:	3318      	adds	r3, #24
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	1c59      	adds	r1, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800433c:	3319      	adds	r3, #25
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f7ff f982 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2  && this->r > 0){               // obstacle on the left
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d92c      	bls.n	80043a8 <_ZN7Tracker5go_toEiPhS0_+0x4f4>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004354:	3318      	adds	r3, #24
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d025      	beq.n	80043a8 <_ZN7Tracker5go_toEiPhS0_+0x4f4>
					this->matrix[this->r-1][this->c] = -3 ;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004362:	3318      	adds	r3, #24
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	1e5a      	subs	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800436e:	3319      	adds	r3, #25
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	68f9      	ldr	r1, [r7, #12]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4403      	add	r3, r0
 8004380:	3306      	adds	r3, #6
 8004382:	f06f 0202 	mvn.w	r2, #2
 8004386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r-1, this->c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004390:	3318      	adds	r3, #24
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	1e59      	subs	r1, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800439c:	3319      	adds	r3, #25
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff f952 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->c < SIZE-1){               // obstacle in the front
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	789b      	ldrb	r3, [r3, #2]
 80043ac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80043b0:	429a      	cmp	r2, r3
 80043b2:	f240 8161 	bls.w	8004678 <_ZN7Tracker5go_toEiPhS0_+0x7c4>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80043bc:	3319      	adds	r3, #25
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b1c      	cmp	r3, #28
 80043c2:	f200 8159 	bhi.w	8004678 <_ZN7Tracker5go_toEiPhS0_+0x7c4>
					this->matrix[this->r][this->c+1] = -3 ;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80043cc:	3318      	adds	r3, #24
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80043d8:	3319      	adds	r3, #25
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	1c59      	adds	r1, r3, #1
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4603      	mov	r3, r0
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a1b      	subs	r3, r3, r0
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	440b      	add	r3, r1
 80043ea:	3306      	adds	r3, #6
 80043ec:	f06f 0102 	mvn.w	r1, #2
 80043f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80043fa:	3318      	adds	r3, #24
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	4619      	mov	r1, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004406:	3319      	adds	r3, #25
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	461a      	mov	r2, r3
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f7ff f91c 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 8004414:	e130      	b.n	8004678 <_ZN7Tracker5go_toEiPhS0_+0x7c4>

			case S:
				if(rightobstacles > 2  && this->c > 0){          // obstacle on right
 8004416:	7dbb      	ldrb	r3, [r7, #22]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d92d      	bls.n	8004478 <_ZN7Tracker5go_toEiPhS0_+0x5c4>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004422:	3319      	adds	r3, #25
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d026      	beq.n	8004478 <_ZN7Tracker5go_toEiPhS0_+0x5c4>
					this->matrix[this->r][this->c-1] = -3 ;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004430:	3318      	adds	r3, #24
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800443c:	3319      	adds	r3, #25
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	1e59      	subs	r1, r3, #1
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4603      	mov	r3, r0
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	1a1b      	subs	r3, r3, r0
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	440b      	add	r3, r1
 800444e:	3306      	adds	r3, #6
 8004450:	f06f 0102 	mvn.w	r1, #2
 8004454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c-1);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800445e:	3318      	adds	r3, #24
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	4619      	mov	r1, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800446a:	3319      	adds	r3, #25
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	3b01      	subs	r3, #1
 8004470:	461a      	mov	r2, r3
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff f8ea 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2  && this->c < SIZE-1){               // obstacle on the left
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d92d      	bls.n	80044da <_ZN7Tracker5go_toEiPhS0_+0x626>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004484:	3319      	adds	r3, #25
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b1c      	cmp	r3, #28
 800448a:	d826      	bhi.n	80044da <_ZN7Tracker5go_toEiPhS0_+0x626>
					this->matrix[this->r][this->c+1] = -3 ;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004492:	3318      	adds	r3, #24
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800449e:	3319      	adds	r3, #25
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	1c59      	adds	r1, r3, #1
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4603      	mov	r3, r0
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a1b      	subs	r3, r3, r0
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	440b      	add	r3, r1
 80044b0:	3306      	adds	r3, #6
 80044b2:	f06f 0102 	mvn.w	r1, #2
 80044b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80044c0:	3318      	adds	r3, #24
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	4619      	mov	r1, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80044cc:	3319      	adds	r3, #25
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	3301      	adds	r3, #1
 80044d2:	461a      	mov	r2, r3
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff f8b9 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->r < SIZE-1){               // obstacle in the front
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	789b      	ldrb	r3, [r3, #2]
 80044de:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80044e2:	429a      	cmp	r2, r3
 80044e4:	f240 80ca 	bls.w	800467c <_ZN7Tracker5go_toEiPhS0_+0x7c8>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80044ee:	3318      	adds	r3, #24
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b1c      	cmp	r3, #28
 80044f4:	f200 80c2 	bhi.w	800467c <_ZN7Tracker5go_toEiPhS0_+0x7c8>
					this->matrix[this->r+1][this->c] = -3 ;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80044fe:	3318      	adds	r3, #24
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800450a:	3319      	adds	r3, #25
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	68f9      	ldr	r1, [r7, #12]
 8004512:	4613      	mov	r3, r2
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4403      	add	r3, r0
 800451c:	3306      	adds	r3, #6
 800451e:	f06f 0202 	mvn.w	r2, #2
 8004522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r+1, this->c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800452c:	3318      	adds	r3, #24
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	1c59      	adds	r1, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004538:	3319      	adds	r3, #25
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f7ff f884 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 8004544:	e09a      	b.n	800467c <_ZN7Tracker5go_toEiPhS0_+0x7c8>
			case W:
				if(rightobstacles > 2  && this->r > 0){          // obstacle on right
 8004546:	7dbb      	ldrb	r3, [r7, #22]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d92c      	bls.n	80045a6 <_ZN7Tracker5go_toEiPhS0_+0x6f2>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004552:	3318      	adds	r3, #24
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d025      	beq.n	80045a6 <_ZN7Tracker5go_toEiPhS0_+0x6f2>
					this->matrix[this->r-1][this->c] = -3 ;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004560:	3318      	adds	r3, #24
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	1e5a      	subs	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800456c:	3319      	adds	r3, #25
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	68f9      	ldr	r1, [r7, #12]
 8004574:	4613      	mov	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	4403      	add	r3, r0
 800457e:	3306      	adds	r3, #6
 8004580:	f06f 0202 	mvn.w	r2, #2
 8004584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r-1, this->c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800458e:	3318      	adds	r3, #24
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	1e59      	subs	r1, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800459a:	3319      	adds	r3, #25
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff f853 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2  && this->r < SIZE-1){               // obstacle on the left
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d92c      	bls.n	8004606 <_ZN7Tracker5go_toEiPhS0_+0x752>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80045b2:	3318      	adds	r3, #24
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b1c      	cmp	r3, #28
 80045b8:	d825      	bhi.n	8004606 <_ZN7Tracker5go_toEiPhS0_+0x752>
					this->matrix[this->r+1][this->c] = -3 ;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80045c0:	3318      	adds	r3, #24
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80045cc:	3319      	adds	r3, #25
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4403      	add	r3, r0
 80045de:	3306      	adds	r3, #6
 80045e0:	f06f 0202 	mvn.w	r2, #2
 80045e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r+1, this->c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80045ee:	3318      	adds	r3, #24
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	1c59      	adds	r1, r3, #1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80045fa:	3319      	adds	r3, #25
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff f823 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->c < SIZE-1){               // obstacle in the front
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	789b      	ldrb	r3, [r3, #2]
 800460a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800460e:	429a      	cmp	r2, r3
 8004610:	d936      	bls.n	8004680 <_ZN7Tracker5go_toEiPhS0_+0x7cc>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004618:	3319      	adds	r3, #25
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b1c      	cmp	r3, #28
 800461e:	d82f      	bhi.n	8004680 <_ZN7Tracker5go_toEiPhS0_+0x7cc>
					this->matrix[this->r][this->c+1] = -3 ;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004626:	3318      	adds	r3, #24
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004632:	3319      	adds	r3, #25
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	1c59      	adds	r1, r3, #1
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4603      	mov	r3, r0
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a1b      	subs	r3, r3, r0
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	440b      	add	r3, r1
 8004644:	3306      	adds	r3, #6
 8004646:	f06f 0102 	mvn.w	r1, #2
 800464a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004654:	3318      	adds	r3, #24
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	4619      	mov	r1, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004660:	3319      	adds	r3, #25
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	461a      	mov	r2, r3
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7fe ffef 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 800466e:	e007      	b.n	8004680 <_ZN7Tracker5go_toEiPhS0_+0x7cc>
			default:return 2;
 8004670:	2302      	movs	r3, #2
 8004672:	e056      	b.n	8004722 <_ZN7Tracker5go_toEiPhS0_+0x86e>
				break;
 8004674:	bf00      	nop
 8004676:	e004      	b.n	8004682 <_ZN7Tracker5go_toEiPhS0_+0x7ce>
				break;
 8004678:	bf00      	nop
 800467a:	e002      	b.n	8004682 <_ZN7Tracker5go_toEiPhS0_+0x7ce>
				break;
 800467c:	bf00      	nop
 800467e:	e000      	b.n	8004682 <_ZN7Tracker5go_toEiPhS0_+0x7ce>
				break;
 8004680:	bf00      	nop
		}
		flag = this->moveR(CELL_LENGTH,-1 , leftSide, rightSide);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f04f 32ff 	mov.w	r2, #4294967295
 800468c:	211e      	movs	r1, #30
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7fd ff8a 	bl	80025a8 <_ZN7Tracker5moveREtiPhS0_>
 8004694:	4603      	mov	r3, r0
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
		if(flag == 3){
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	2b03      	cmp	r3, #3
 800469c:	d104      	bne.n	80046a8 <_ZN7Tracker5go_toEiPhS0_+0x7f4>
			HAL_Delay(1000);
 800469e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046a2:	f003 fe13 	bl	80082cc <HAL_Delay>
			continue;
 80046a6:	e03b      	b.n	8004720 <_ZN7Tracker5go_toEiPhS0_+0x86c>
		}else{stucked++;}
 80046a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046ac:	3301      	adds	r3, #1
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		flag= this->moveF(CELL_LENGTH,-1 ,  leftSide, rightSide);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	211e      	movs	r1, #30
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7fe fcf6 	bl	80030b0 <_ZN7Tracker5moveFEtiPhS0_>
 80046c4:	4603      	mov	r3, r0
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
		if(flag == 3){
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d104      	bne.n	80046d8 <_ZN7Tracker5go_toEiPhS0_+0x824>
			HAL_Delay(1000);
 80046ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046d2:	f003 fdfb 	bl	80082cc <HAL_Delay>
			continue;
 80046d6:	e023      	b.n	8004720 <_ZN7Tracker5go_toEiPhS0_+0x86c>
		}else{stucked++;}
 80046d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046dc:	3301      	adds	r3, #1
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		flag= this->moveL(CELL_LENGTH,-1 ,  leftSide, rightSide);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f04f 32ff 	mov.w	r2, #4294967295
 80046ec:	211e      	movs	r1, #30
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7fe fa1c 	bl	8002b2c <_ZN7Tracker5moveLEtiPhS0_>
 80046f4:	4603      	mov	r3, r0
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
		if(flag == 3){
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d104      	bne.n	8004708 <_ZN7Tracker5go_toEiPhS0_+0x854>
			HAL_Delay(1000);
 80046fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004702:	f003 fde3 	bl	80082cc <HAL_Delay>
			continue;
 8004706:	e00b      	b.n	8004720 <_ZN7Tracker5go_toEiPhS0_+0x86c>
		}else{stucked++;}
 8004708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800470c:	3301      	adds	r3, #1
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(stucked == 3){
 8004712:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004716:	2b03      	cmp	r3, #3
 8004718:	f47f acd5 	bne.w	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
			return 0 ;
 800471c:	2300      	movs	r3, #0
 800471e:	e000      	b.n	8004722 <_ZN7Tracker5go_toEiPhS0_+0x86e>
		watering_palnt();
 8004720:	e4d1      	b.n	80040c6 <_ZN7Tracker5go_toEiPhS0_+0x212>
		}
	}
	return 1 ;
}
 8004722:	4618      	mov	r0, r3
 8004724:	372c      	adds	r7, #44	; 0x2c
 8004726:	46bd      	mov	sp, r7
 8004728:	bd90      	pop	{r4, r7, pc}
 800472a:	bf00      	nop

0800472c <_ZN7Tracker3maxEv>:
uint16_t Tracker::max(){
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	81fb      	strh	r3, [r7, #14]
		return panelL ;
	}else{
		return panelR ;
	}
	*/
	if(panelFL >= INSUN){
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	88db      	ldrh	r3, [r3, #6]
 800473c:	2b95      	cmp	r3, #149	; 0x95
 800473e:	d902      	bls.n	8004746 <_ZN7Tracker3maxEv+0x1a>
		i++;
 8004740:	89fb      	ldrh	r3, [r7, #14]
 8004742:	3301      	adds	r3, #1
 8004744:	81fb      	strh	r3, [r7, #14]
	}
	if(panelFR >= INSUN){
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	891b      	ldrh	r3, [r3, #8]
 800474a:	2b95      	cmp	r3, #149	; 0x95
 800474c:	d902      	bls.n	8004754 <_ZN7Tracker3maxEv+0x28>
		i++;
 800474e:	89fb      	ldrh	r3, [r7, #14]
 8004750:	3301      	adds	r3, #1
 8004752:	81fb      	strh	r3, [r7, #14]
	}
	if(panelBL >= INSUN){
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	895b      	ldrh	r3, [r3, #10]
 8004758:	2b95      	cmp	r3, #149	; 0x95
 800475a:	d902      	bls.n	8004762 <_ZN7Tracker3maxEv+0x36>
		i++;
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	3301      	adds	r3, #1
 8004760:	81fb      	strh	r3, [r7, #14]
	}
	if(panelBR >= INSUN){
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	899b      	ldrh	r3, [r3, #12]
 8004766:	2b95      	cmp	r3, #149	; 0x95
 8004768:	d902      	bls.n	8004770 <_ZN7Tracker3maxEv+0x44>
		i++;
 800476a:	89fb      	ldrh	r3, [r7, #14]
 800476c:	3301      	adds	r3, #1
 800476e:	81fb      	strh	r3, [r7, #14]
	}
	return i;
 8004770:	89fb      	ldrh	r3, [r7, #14]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <_ZN7Tracker14mark_unvisitedEv>:

void Tracker::mark_unvisited(){
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < SIZE; ++i) {
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b1d      	cmp	r3, #29
 800478e:	dc34      	bgt.n	80047fa <_ZN7Tracker14mark_unvisitedEv+0x7c>
		for (int j = 0; j < SIZE; ++j) {
 8004790:	2300      	movs	r3, #0
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b1d      	cmp	r3, #29
 8004798:	dc2b      	bgt.n	80047f2 <_ZN7Tracker14mark_unvisitedEv+0x74>
			if(this->matrix[i][j] == -2 || this->matrix[i][j] == -1){
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	4413      	add	r3, r2
 80047aa:	3306      	adds	r3, #6
 80047ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047b0:	f113 0f02 	cmn.w	r3, #2
 80047b4:	d00d      	beq.n	80047d2 <_ZN7Tracker14mark_unvisitedEv+0x54>
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	4413      	add	r3, r2
 80047c6:	3306      	adds	r3, #6
 80047c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d10b      	bne.n	80047ea <_ZN7Tracker14mark_unvisitedEv+0x6c>
				this->matrix[i][j] = 0 ;
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4613      	mov	r3, r2
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4413      	add	r3, r2
 80047e2:	3306      	adds	r3, #6
 80047e4:	2200      	movs	r2, #0
 80047e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < SIZE; ++j) {
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3301      	adds	r3, #1
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	e7d0      	b.n	8004794 <_ZN7Tracker14mark_unvisitedEv+0x16>
	for (int i = 0; i < SIZE; ++i) {
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3301      	adds	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e7c7      	b.n	800478a <_ZN7Tracker14mark_unvisitedEv+0xc>
			}
		}
	}

	if(this->r > 0 ){
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004800:	3318      	adds	r3, #24
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 809b 	beq.w	8004940 <_ZN7Tracker14mark_unvisitedEv+0x1c2>
		if ( this->c > 0){
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004810:	3319      	adds	r3, #25
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02e      	beq.n	8004876 <_ZN7Tracker14mark_unvisitedEv+0xf8>
			if(this->matrix[this->r-1][this->c-1] != -3){
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800481e:	3318      	adds	r3, #24
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	1e5a      	subs	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800482a:	3319      	adds	r3, #25
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	1e58      	subs	r0, r3, #1
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4403      	add	r3, r0
 800483c:	3306      	adds	r3, #6
 800483e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004842:	f113 0f03 	cmn.w	r3, #3
 8004846:	d016      	beq.n	8004876 <_ZN7Tracker14mark_unvisitedEv+0xf8>
				this->matrix[this->r-1][this->c-1] = -2 ;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800484e:	3318      	adds	r3, #24
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	1e5a      	subs	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800485a:	3319      	adds	r3, #25
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	1e58      	subs	r0, r3, #1
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4403      	add	r3, r0
 800486c:	3306      	adds	r3, #6
 800486e:	f06f 0201 	mvn.w	r2, #1
 8004872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
		}
		if ( this->c < SIZE){
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800487c:	3319      	adds	r3, #25
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b1d      	cmp	r3, #29
 8004882:	d82e      	bhi.n	80048e2 <_ZN7Tracker14mark_unvisitedEv+0x164>
			if(this->matrix[this->r-1][this->c+1] != -3){
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800488a:	3318      	adds	r3, #24
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	1e5a      	subs	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004896:	3319      	adds	r3, #25
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	1c58      	adds	r0, r3, #1
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	4403      	add	r3, r0
 80048a8:	3306      	adds	r3, #6
 80048aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048ae:	f113 0f03 	cmn.w	r3, #3
 80048b2:	d016      	beq.n	80048e2 <_ZN7Tracker14mark_unvisitedEv+0x164>
				this->matrix[this->r-1][this->c+1] = -2 ;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80048ba:	3318      	adds	r3, #24
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	1e5a      	subs	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80048c6:	3319      	adds	r3, #25
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	1c58      	adds	r0, r3, #1
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	4403      	add	r3, r0
 80048d8:	3306      	adds	r3, #6
 80048da:	f06f 0201 	mvn.w	r2, #1
 80048de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
		}
		if(this->matrix[this->r-1][this->c] != -3){
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80048e8:	3318      	adds	r3, #24
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	1e5a      	subs	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80048f4:	3319      	adds	r3, #25
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	4403      	add	r3, r0
 8004906:	3306      	adds	r3, #6
 8004908:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800490c:	f113 0f03 	cmn.w	r3, #3
 8004910:	d016      	beq.n	8004940 <_ZN7Tracker14mark_unvisitedEv+0x1c2>
			this->matrix[this->r-1][this->c] = -2 ;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004918:	3318      	adds	r3, #24
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	1e5a      	subs	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004924:	3319      	adds	r3, #25
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4403      	add	r3, r0
 8004936:	3306      	adds	r3, #6
 8004938:	f06f 0201 	mvn.w	r2, #1
 800493c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
	if(this->r < SIZE ){
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004946:	3318      	adds	r3, #24
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b1d      	cmp	r3, #29
 800494c:	f200 809b 	bhi.w	8004a86 <_ZN7Tracker14mark_unvisitedEv+0x308>
		if ( this->c > 0){
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004956:	3319      	adds	r3, #25
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d02e      	beq.n	80049bc <_ZN7Tracker14mark_unvisitedEv+0x23e>
			if(this->matrix[this->r+1][this->c-1] != -3){
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004964:	3318      	adds	r3, #24
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004970:	3319      	adds	r3, #25
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	1e58      	subs	r0, r3, #1
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	4403      	add	r3, r0
 8004982:	3306      	adds	r3, #6
 8004984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004988:	f113 0f03 	cmn.w	r3, #3
 800498c:	d016      	beq.n	80049bc <_ZN7Tracker14mark_unvisitedEv+0x23e>
				this->matrix[this->r+1][this->c-1] = -2 ;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004994:	3318      	adds	r3, #24
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80049a0:	3319      	adds	r3, #25
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	1e58      	subs	r0, r3, #1
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4403      	add	r3, r0
 80049b2:	3306      	adds	r3, #6
 80049b4:	f06f 0201 	mvn.w	r2, #1
 80049b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
		}
		if ( this->c < SIZE){
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80049c2:	3319      	adds	r3, #25
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b1d      	cmp	r3, #29
 80049c8:	d82e      	bhi.n	8004a28 <_ZN7Tracker14mark_unvisitedEv+0x2aa>
			if(this->matrix[this->r+1][this->c+1] != -3){
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80049d0:	3318      	adds	r3, #24
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80049dc:	3319      	adds	r3, #25
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	1c58      	adds	r0, r3, #1
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	4403      	add	r3, r0
 80049ee:	3306      	adds	r3, #6
 80049f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049f4:	f113 0f03 	cmn.w	r3, #3
 80049f8:	d016      	beq.n	8004a28 <_ZN7Tracker14mark_unvisitedEv+0x2aa>
				this->matrix[this->r+1][this->c+1] = -2 ;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004a00:	3318      	adds	r3, #24
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004a0c:	3319      	adds	r3, #25
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	1c58      	adds	r0, r3, #1
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	4403      	add	r3, r0
 8004a1e:	3306      	adds	r3, #6
 8004a20:	f06f 0201 	mvn.w	r2, #1
 8004a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
		}
		if(this->matrix[this->r+1][this->c] != -3){
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004a2e:	3318      	adds	r3, #24
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004a3a:	3319      	adds	r3, #25
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	4403      	add	r3, r0
 8004a4c:	3306      	adds	r3, #6
 8004a4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a52:	f113 0f03 	cmn.w	r3, #3
 8004a56:	d016      	beq.n	8004a86 <_ZN7Tracker14mark_unvisitedEv+0x308>
			this->matrix[this->r+1][this->c] = -2 ;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004a5e:	3318      	adds	r3, #24
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004a6a:	3319      	adds	r3, #25
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4403      	add	r3, r0
 8004a7c:	3306      	adds	r3, #6
 8004a7e:	f06f 0201 	mvn.w	r2, #1
 8004a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
	if(this->c > 0){
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004a8c:	3319      	adds	r3, #25
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d02e      	beq.n	8004af2 <_ZN7Tracker14mark_unvisitedEv+0x374>
		if(this->matrix[this->r][this->c-1] != -3){
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004a9a:	3318      	adds	r3, #24
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004aa6:	3319      	adds	r3, #25
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	1e59      	subs	r1, r3, #1
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	4603      	mov	r3, r0
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	1a1b      	subs	r3, r3, r0
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	440b      	add	r3, r1
 8004ab8:	3306      	adds	r3, #6
 8004aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004abe:	f113 0f03 	cmn.w	r3, #3
 8004ac2:	d016      	beq.n	8004af2 <_ZN7Tracker14mark_unvisitedEv+0x374>
			this->matrix[this->r][this->c-1] = -2 ;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004aca:	3318      	adds	r3, #24
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004ad6:	3319      	adds	r3, #25
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	1e59      	subs	r1, r3, #1
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4603      	mov	r3, r0
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a1b      	subs	r3, r3, r0
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3306      	adds	r3, #6
 8004aea:	f06f 0101 	mvn.w	r1, #1
 8004aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
	if(this->c < SIZE){
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004af8:	3319      	adds	r3, #25
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b1d      	cmp	r3, #29
 8004afe:	d82e      	bhi.n	8004b5e <_ZN7Tracker14mark_unvisitedEv+0x3e0>
		if(this->matrix[this->r][this->c+1] != -3){
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004b06:	3318      	adds	r3, #24
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004b12:	3319      	adds	r3, #25
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	1c59      	adds	r1, r3, #1
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a1b      	subs	r3, r3, r0
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	440b      	add	r3, r1
 8004b24:	3306      	adds	r3, #6
 8004b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2a:	f113 0f03 	cmn.w	r3, #3
 8004b2e:	d016      	beq.n	8004b5e <_ZN7Tracker14mark_unvisitedEv+0x3e0>
			this->matrix[this->r][this->c+1] = -2 ;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004b36:	3318      	adds	r3, #24
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004b42:	3319      	adds	r3, #25
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	1c59      	adds	r1, r3, #1
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	1a1b      	subs	r3, r3, r0
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	440b      	add	r3, r1
 8004b54:	3306      	adds	r3, #6
 8004b56:	f06f 0101 	mvn.w	r1, #1
 8004b5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <_ZN7Tracker12go_to_shadowEv>:

uint8_t Tracker::go_to_shadow(){
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b09b      	sub	sp, #108	; 0x6c
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	6078      	str	r0, [r7, #4]
	this->restart();
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fd f882 	bl	8001c7e <_ZN7Tracker7restartEv>
	int flag=0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
	int d = -1 ;
 8004b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b82:	65bb      	str	r3, [r7, #88]	; 0x58
	uint8_t leftSide[30] , rightSide[30];
	uint8_t leftobstacles = 0 , rightobstacles = 0 , stucked = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	72fb      	strb	r3, [r7, #11]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	72bb      	strb	r3, [r7, #10]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t fdist_obstacle = 15 ;
 8004b92:	230f      	movs	r3, #15
 8004b94:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56


	int c = 0 ;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	653b      	str	r3, [r7, #80]	; 0x50
	int cc = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c

	this->copy(leftSide, rightSide, this->LDistance, this->RDistance);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	78d8      	ldrb	r0, [r3, #3]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	791b      	ldrb	r3, [r3, #4]
 8004ba8:	f107 020c 	add.w	r2, r7, #12
 8004bac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fd f90d 	bl	8001dd4 <_ZN7Tracker4copyEPhS0_hh>
	while(1){
		watering_palnt();
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fc ffc8 	bl	8001b50 <_ZN7Tracker14watering_palntEv>

		flag = 0 ;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
		leftobstacles = 0 ;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	72fb      	strb	r3, [r7, #11]
		rightobstacles= 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	72bb      	strb	r3, [r7, #10]
		stucked = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		this->count(leftSide, rightSide, &leftobstacles, &rightobstacles, 30);
 8004bd2:	f107 000b 	add.w	r0, r7, #11
 8004bd6:	f107 020c 	add.w	r2, r7, #12
 8004bda:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004bde:	231e      	movs	r3, #30
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	f107 030a 	add.w	r3, r7, #10
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	4603      	mov	r3, r0
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fd f913 	bl	8001e16 <_ZN7Tracker5countEPhS0_S0_S0_h>
			this->isOP = true ;
		}
		this->matrix[this->r][this->c] = this->max() ;
		//////////////////////////////
*/
		this->matrix[this->r][this->c] = this->max() ;
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fd9b 	bl	800472c <_ZN7Tracker3maxEv>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004c00:	3318      	adds	r3, #24
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	4619      	mov	r1, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004c0c:	3319      	adds	r3, #25
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	461c      	mov	r4, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	1a5b      	subs	r3, r3, r1
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4423      	add	r3, r4
 8004c20:	3306      	adds	r3, #6
 8004c22:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
		if(this->matrix[this->r][this->c] <= 1){
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004c2c:	3318      	adds	r3, #24
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	4619      	mov	r1, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004c38:	3319      	adds	r3, #25
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	1a5b      	subs	r3, r3, r1
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	4403      	add	r3, r0
 8004c4a:	3306      	adds	r3, #6
 8004c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	dc04      	bgt.n	8004c5e <_ZN7Tracker12go_to_shadowEv+0xf2>
			this->isOP = false ;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	749a      	strb	r2, [r3, #18]
			//this->mark_unvisited();
			return 7 ;
 8004c5a:	2307      	movs	r3, #7
 8004c5c:	e2f2      	b.n	8005244 <_ZN7Tracker12go_to_shadowEv+0x6d8>
		}else{
			this->isOP = true ;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	749a      	strb	r2, [r3, #18]
		}

		switch(this->dir){
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004c6a:	331a      	adds	r3, #26
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	f200 8268 	bhi.w	8005144 <_ZN7Tracker12go_to_shadowEv+0x5d8>
 8004c74:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <_ZN7Tracker12go_to_shadowEv+0x110>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004c8d 	.word	0x08004c8d
 8004c80:	08004dbd 	.word	0x08004dbd
 8004c84:	08004eeb 	.word	0x08004eeb
 8004c88:	0800501b 	.word	0x0800501b
			case N:
				if(rightobstacles > 2 && this->c < SIZE-1){          // obstacle on right
 8004c8c:	7abb      	ldrb	r3, [r7, #10]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d92d      	bls.n	8004cee <_ZN7Tracker12go_to_shadowEv+0x182>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004c98:	3319      	adds	r3, #25
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b1c      	cmp	r3, #28
 8004c9e:	d826      	bhi.n	8004cee <_ZN7Tracker12go_to_shadowEv+0x182>
					this->matrix[this->r][this->c+1] = -3 ;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004ca6:	3318      	adds	r3, #24
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004cb2:	3319      	adds	r3, #25
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	1c59      	adds	r1, r3, #1
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4603      	mov	r3, r0
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	1a1b      	subs	r3, r3, r0
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	440b      	add	r3, r1
 8004cc4:	3306      	adds	r3, #6
 8004cc6:	f06f 0102 	mvn.w	r1, #2
 8004cca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004cd4:	3318      	adds	r3, #24
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004ce0:	3319      	adds	r3, #25
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7fe fcaf 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2 && this->c > 0){               // obstacle on the left
 8004cee:	7afb      	ldrb	r3, [r7, #11]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d92d      	bls.n	8004d50 <_ZN7Tracker12go_to_shadowEv+0x1e4>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004cfa:	3319      	adds	r3, #25
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d026      	beq.n	8004d50 <_ZN7Tracker12go_to_shadowEv+0x1e4>
					this->matrix[this->r][this->c-1] = -3 ;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004d08:	3318      	adds	r3, #24
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004d14:	3319      	adds	r3, #25
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	1e59      	subs	r1, r3, #1
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	1a1b      	subs	r3, r3, r0
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	440b      	add	r3, r1
 8004d26:	3306      	adds	r3, #6
 8004d28:	f06f 0102 	mvn.w	r1, #2
 8004d2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c-1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004d36:	3318      	adds	r3, #24
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004d42:	3319      	adds	r3, #25
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fe fc7e 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->r > 0){               // obstacle in the front
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	789b      	ldrb	r3, [r3, #2]
 8004d54:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	f240 81f5 	bls.w	8005148 <_ZN7Tracker12go_to_shadowEv+0x5dc>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004d64:	3318      	adds	r3, #24
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 81ed 	beq.w	8005148 <_ZN7Tracker12go_to_shadowEv+0x5dc>
					this->matrix[this->r-1][this->c] = -3 ;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004d74:	3318      	adds	r3, #24
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	1e5a      	subs	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004d80:	3319      	adds	r3, #25
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4403      	add	r3, r0
 8004d92:	3306      	adds	r3, #6
 8004d94:	f06f 0202 	mvn.w	r2, #2
 8004d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r-1, this->c);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004da2:	3318      	adds	r3, #24
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	1e59      	subs	r1, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004dae:	3319      	adds	r3, #25
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fe fc49 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 8004dba:	e1c5      	b.n	8005148 <_ZN7Tracker12go_to_shadowEv+0x5dc>
			case E:
				if(rightobstacles > 2 && this->r < SIZE-1){          // obstacle on right
 8004dbc:	7abb      	ldrb	r3, [r7, #10]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d92c      	bls.n	8004e1c <_ZN7Tracker12go_to_shadowEv+0x2b0>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004dc8:	3318      	adds	r3, #24
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b1c      	cmp	r3, #28
 8004dce:	d825      	bhi.n	8004e1c <_ZN7Tracker12go_to_shadowEv+0x2b0>
					this->matrix[this->r+1][this->c] = -3 ;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004dd6:	3318      	adds	r3, #24
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004de2:	3319      	adds	r3, #25
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	4403      	add	r3, r0
 8004df4:	3306      	adds	r3, #6
 8004df6:	f06f 0202 	mvn.w	r2, #2
 8004dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r+1, this->c);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004e04:	3318      	adds	r3, #24
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	1c59      	adds	r1, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004e10:	3319      	adds	r3, #25
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fe fc18 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2  && this->r > 0){               // obstacle on the left
 8004e1c:	7afb      	ldrb	r3, [r7, #11]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d92c      	bls.n	8004e7c <_ZN7Tracker12go_to_shadowEv+0x310>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004e28:	3318      	adds	r3, #24
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d025      	beq.n	8004e7c <_ZN7Tracker12go_to_shadowEv+0x310>
					this->matrix[this->r-1][this->c] = -3 ;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004e36:	3318      	adds	r3, #24
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	1e5a      	subs	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004e42:	3319      	adds	r3, #25
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4403      	add	r3, r0
 8004e54:	3306      	adds	r3, #6
 8004e56:	f06f 0202 	mvn.w	r2, #2
 8004e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r-1, this->c);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004e64:	3318      	adds	r3, #24
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	1e59      	subs	r1, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004e70:	3319      	adds	r3, #25
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fe fbe8 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->c < SIZE-1){               // obstacle in the front
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	789b      	ldrb	r3, [r3, #2]
 8004e80:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004e84:	429a      	cmp	r2, r3
 8004e86:	f240 8161 	bls.w	800514c <_ZN7Tracker12go_to_shadowEv+0x5e0>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004e90:	3319      	adds	r3, #25
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b1c      	cmp	r3, #28
 8004e96:	f200 8159 	bhi.w	800514c <_ZN7Tracker12go_to_shadowEv+0x5e0>
					this->matrix[this->r][this->c+1] = -3 ;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004ea0:	3318      	adds	r3, #24
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004eac:	3319      	adds	r3, #25
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	1c59      	adds	r1, r3, #1
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	1a1b      	subs	r3, r3, r0
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3306      	adds	r3, #6
 8004ec0:	f06f 0102 	mvn.w	r1, #2
 8004ec4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004ece:	3318      	adds	r3, #24
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004eda:	3319      	adds	r3, #25
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fe fbb2 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 8004ee8:	e130      	b.n	800514c <_ZN7Tracker12go_to_shadowEv+0x5e0>

			case S:
				if(rightobstacles > 2  && this->c > 0){          // obstacle on right
 8004eea:	7abb      	ldrb	r3, [r7, #10]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d92d      	bls.n	8004f4c <_ZN7Tracker12go_to_shadowEv+0x3e0>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004ef6:	3319      	adds	r3, #25
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d026      	beq.n	8004f4c <_ZN7Tracker12go_to_shadowEv+0x3e0>
					this->matrix[this->r][this->c-1] = -3 ;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004f04:	3318      	adds	r3, #24
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004f10:	3319      	adds	r3, #25
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	1e59      	subs	r1, r3, #1
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4603      	mov	r3, r0
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a1b      	subs	r3, r3, r0
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	440b      	add	r3, r1
 8004f22:	3306      	adds	r3, #6
 8004f24:	f06f 0102 	mvn.w	r1, #2
 8004f28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c-1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004f32:	3318      	adds	r3, #24
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	4619      	mov	r1, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004f3e:	3319      	adds	r3, #25
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	461a      	mov	r2, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fe fb80 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2  && this->c < SIZE-1){               // obstacle on the left
 8004f4c:	7afb      	ldrb	r3, [r7, #11]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d92d      	bls.n	8004fae <_ZN7Tracker12go_to_shadowEv+0x442>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004f58:	3319      	adds	r3, #25
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b1c      	cmp	r3, #28
 8004f5e:	d826      	bhi.n	8004fae <_ZN7Tracker12go_to_shadowEv+0x442>
					this->matrix[this->r][this->c+1] = -3 ;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004f66:	3318      	adds	r3, #24
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004f72:	3319      	adds	r3, #25
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	1c59      	adds	r1, r3, #1
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	1a1b      	subs	r3, r3, r0
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	440b      	add	r3, r1
 8004f84:	3306      	adds	r3, #6
 8004f86:	f06f 0102 	mvn.w	r1, #2
 8004f8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004f94:	3318      	adds	r3, #24
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004fa0:	3319      	adds	r3, #25
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fe fb4f 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->r < SIZE-1){               // obstacle in the front
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	789b      	ldrb	r3, [r3, #2]
 8004fb2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	f240 80ca 	bls.w	8005150 <_ZN7Tracker12go_to_shadowEv+0x5e4>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004fc2:	3318      	adds	r3, #24
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b1c      	cmp	r3, #28
 8004fc8:	f200 80c2 	bhi.w	8005150 <_ZN7Tracker12go_to_shadowEv+0x5e4>
					this->matrix[this->r+1][this->c] = -3 ;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004fd2:	3318      	adds	r3, #24
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8004fde:	3319      	adds	r3, #25
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4403      	add	r3, r0
 8004ff0:	3306      	adds	r3, #6
 8004ff2:	f06f 0202 	mvn.w	r2, #2
 8004ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r+1, this->c);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8005000:	3318      	adds	r3, #24
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	1c59      	adds	r1, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800500c:	3319      	adds	r3, #25
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fe fb1a 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 8005018:	e09a      	b.n	8005150 <_ZN7Tracker12go_to_shadowEv+0x5e4>
			case W:
				if(rightobstacles > 2  && this->r > 0){          // obstacle on right
 800501a:	7abb      	ldrb	r3, [r7, #10]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d92c      	bls.n	800507a <_ZN7Tracker12go_to_shadowEv+0x50e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8005026:	3318      	adds	r3, #24
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d025      	beq.n	800507a <_ZN7Tracker12go_to_shadowEv+0x50e>
					this->matrix[this->r-1][this->c] = -3 ;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8005034:	3318      	adds	r3, #24
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	1e5a      	subs	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8005040:	3319      	adds	r3, #25
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	4403      	add	r3, r0
 8005052:	3306      	adds	r3, #6
 8005054:	f06f 0202 	mvn.w	r2, #2
 8005058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r-1, this->c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8005062:	3318      	adds	r3, #24
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	1e59      	subs	r1, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800506e:	3319      	adds	r3, #25
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7fe fae9 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(leftobstacles > 2  && this->r < SIZE-1){               // obstacle on the left
 800507a:	7afb      	ldrb	r3, [r7, #11]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d92c      	bls.n	80050da <_ZN7Tracker12go_to_shadowEv+0x56e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8005086:	3318      	adds	r3, #24
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b1c      	cmp	r3, #28
 800508c:	d825      	bhi.n	80050da <_ZN7Tracker12go_to_shadowEv+0x56e>
					this->matrix[this->r+1][this->c] = -3 ;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8005094:	3318      	adds	r3, #24
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80050a0:	3319      	adds	r3, #25
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	4403      	add	r3, r0
 80050b2:	3306      	adds	r3, #6
 80050b4:	f06f 0202 	mvn.w	r2, #2
 80050b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					this->mark_obstacle(this->r+1, this->c);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80050c2:	3318      	adds	r3, #24
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	1c59      	adds	r1, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80050ce:	3319      	adds	r3, #25
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fe fab9 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				if(this->FDistance < fdist_obstacle && this->c < SIZE-1){               // obstacle in the front
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	789b      	ldrb	r3, [r3, #2]
 80050de:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d936      	bls.n	8005154 <_ZN7Tracker12go_to_shadowEv+0x5e8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80050ec:	3319      	adds	r3, #25
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b1c      	cmp	r3, #28
 80050f2:	d82f      	bhi.n	8005154 <_ZN7Tracker12go_to_shadowEv+0x5e8>
					this->matrix[this->r][this->c+1] = -3 ;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80050fa:	3318      	adds	r3, #24
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8005106:	3319      	adds	r3, #25
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	1c59      	adds	r1, r3, #1
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	4603      	mov	r3, r0
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	1a1b      	subs	r3, r3, r0
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	440b      	add	r3, r1
 8005118:	3306      	adds	r3, #6
 800511a:	f06f 0102 	mvn.w	r1, #2
 800511e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					this->mark_obstacle(this->r, this->c+1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8005128:	3318      	adds	r3, #24
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	4619      	mov	r1, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8005134:	3319      	adds	r3, #25
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	3301      	adds	r3, #1
 800513a:	461a      	mov	r2, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7fe fa85 	bl	800364c <_ZN7Tracker13mark_obstacleEii>
				}
				break;
 8005142:	e007      	b.n	8005154 <_ZN7Tracker12go_to_shadowEv+0x5e8>
			default:return 2;
 8005144:	2302      	movs	r3, #2
 8005146:	e07d      	b.n	8005244 <_ZN7Tracker12go_to_shadowEv+0x6d8>
				break;
 8005148:	bf00      	nop
 800514a:	e004      	b.n	8005156 <_ZN7Tracker12go_to_shadowEv+0x5ea>
				break;
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <_ZN7Tracker12go_to_shadowEv+0x5ea>
				break;
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <_ZN7Tracker12go_to_shadowEv+0x5ea>
				break;
 8005154:	bf00      	nop
		}

		flag = this->moveR(CELL_LENGTH,-2 , leftSide, rightSide);
 8005156:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800515a:	f107 030c 	add.w	r3, r7, #12
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	f06f 0201 	mvn.w	r2, #1
 8005166:	211e      	movs	r1, #30
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fd fa1d 	bl	80025a8 <_ZN7Tracker5moveREtiPhS0_>
 800516e:	4603      	mov	r3, r0
 8005170:	65fb      	str	r3, [r7, #92]	; 0x5c
		if(flag == 3){
 8005172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005174:	2b03      	cmp	r3, #3
 8005176:	d104      	bne.n	8005182 <_ZN7Tracker12go_to_shadowEv+0x616>
			HAL_Delay(1000);
 8005178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800517c:	f003 f8a6 	bl	80082cc <HAL_Delay>
			continue;
 8005180:	e05f      	b.n	8005242 <_ZN7Tracker12go_to_shadowEv+0x6d6>
		}else{stucked++;}
 8005182:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005186:	3301      	adds	r3, #1
 8005188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		flag= this->moveF(CELL_LENGTH,-2 ,  leftSide, rightSide);
 800518c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005190:	f107 030c 	add.w	r3, r7, #12
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	4613      	mov	r3, r2
 8005198:	f06f 0201 	mvn.w	r2, #1
 800519c:	211e      	movs	r1, #30
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fd ff86 	bl	80030b0 <_ZN7Tracker5moveFEtiPhS0_>
 80051a4:	4603      	mov	r3, r0
 80051a6:	65fb      	str	r3, [r7, #92]	; 0x5c
		if(flag == 3){
 80051a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d104      	bne.n	80051b8 <_ZN7Tracker12go_to_shadowEv+0x64c>
			HAL_Delay(1000);
 80051ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051b2:	f003 f88b 	bl	80082cc <HAL_Delay>
			continue;
 80051b6:	e044      	b.n	8005242 <_ZN7Tracker12go_to_shadowEv+0x6d6>
		}else{stucked++;}
 80051b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051bc:	3301      	adds	r3, #1
 80051be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		flag= this->moveL(CELL_LENGTH,-2 ,  leftSide, rightSide);
 80051c2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80051c6:	f107 030c 	add.w	r3, r7, #12
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	f06f 0201 	mvn.w	r2, #1
 80051d2:	211e      	movs	r1, #30
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fd fca9 	bl	8002b2c <_ZN7Tracker5moveLEtiPhS0_>
 80051da:	4603      	mov	r3, r0
 80051dc:	65fb      	str	r3, [r7, #92]	; 0x5c
		if(flag == 3){
 80051de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d104      	bne.n	80051ee <_ZN7Tracker12go_to_shadowEv+0x682>
			HAL_Delay(1000);
 80051e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051e8:	f003 f870 	bl	80082cc <HAL_Delay>
			continue;
 80051ec:	e029      	b.n	8005242 <_ZN7Tracker12go_to_shadowEv+0x6d6>
		}else{stucked++;}
 80051ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051f2:	3301      	adds	r3, #1
 80051f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		if(stucked == 3){
 80051f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	f47f acdc 	bne.w	8004bba <_ZN7Tracker12go_to_shadowEv+0x4e>
			d = dijkstra();
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fe fa94 	bl	8003730 <_ZN7Tracker8dijkstraEv>
 8005208:	65b8      	str	r0, [r7, #88]	; 0x58
			if(d == -1){         // no more cell to visit
 800520a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d101      	bne.n	8005216 <_ZN7Tracker12go_to_shadowEv+0x6aa>
				return 3 ;
 8005212:	2303      	movs	r3, #3
 8005214:	e016      	b.n	8005244 <_ZN7Tracker12go_to_shadowEv+0x6d8>
			}else{
				if(go_to(d,leftSide,rightSide) == 5){
 8005216:	f107 030c 	add.w	r3, r7, #12
 800521a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800521e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fe fe47 	bl	8003eb4 <_ZN7Tracker5go_toEiPhS0_>
 8005226:	4603      	mov	r3, r0
 8005228:	2b05      	cmp	r3, #5
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	f43f acc1 	beq.w	8004bba <_ZN7Tracker12go_to_shadowEv+0x4e>
					this->mark_unvisited();
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff faa0 	bl	800477e <_ZN7Tracker14mark_unvisitedEv>
					return 5 ;
 800523e:	2305      	movs	r3, #5
 8005240:	e000      	b.n	8005244 <_ZN7Tracker12go_to_shadowEv+0x6d8>
		watering_palnt();
 8005242:	e4ba      	b.n	8004bba <_ZN7Tracker12go_to_shadowEv+0x4e>

			}
		}
	}
	return 1 ;
}
 8005244:	4618      	mov	r0, r3
 8005246:	3764      	adds	r7, #100	; 0x64
 8005248:	46bd      	mov	sp, r7
 800524a:	bd90      	pop	{r4, r7, pc}

0800524c <_ZN7Tracker7set_enfEb>:

void Tracker::set_enf(bool enf){
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]
	this->enf = enf;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	78fa      	ldrb	r2, [r7, #3]
 800525c:	701a      	strb	r2, [r3, #0]
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <_ZN7Tracker6set_okEb>:

void Tracker::set_ok (bool ok ){
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	460b      	mov	r3, r1
 8005274:	70fb      	strb	r3, [r7, #3]
	this->ok = ok ;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	705a      	strb	r2, [r3, #1]
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <_ZN7Tracker4getXEv>:
		uint8_t getX(){return this->c;}
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8005296:	3319      	adds	r3, #25
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <_ZN7Tracker4getyEv>:
		uint8_t gety(){return this->r;}
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80052b4:	3318      	adds	r3, #24
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <_ZN7Tracker5is_OPEv>:
		bool    is_OP(){return this->isOP;}
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7c9b      	ldrb	r3, [r3, #18]
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <_ZN7Tracker5isSunEv>:
		uint16_t isSun(){return (uint16_t)((panelFL+panelFR+panelBL+panelBR)/4);}
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	88db      	ldrh	r3, [r3, #6]
 80052e8:	461a      	mov	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	891b      	ldrh	r3, [r3, #8]
 80052ee:	4413      	add	r3, r2
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	8952      	ldrh	r2, [r2, #10]
 80052f4:	4413      	add	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	8992      	ldrh	r2, [r2, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	da00      	bge.n	8005302 <_ZN7Tracker5isSunEv+0x26>
 8005300:	3303      	adds	r3, #3
 8005302:	109b      	asrs	r3, r3, #2
 8005304:	b29b      	uxth	r3, r3
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <_ZN7Tracker8setWaterEv>:
		void     setWater(){
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
			this->watering = true ;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	74da      	strb	r2, [r3, #19]
		}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <_ZN7Tracker20set_sunlight_counterEs>:
		void set_sunlight_counter(int16_t c){this->sunlight_counter = c ;}
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	807b      	strh	r3, [r7, #2]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	887a      	ldrh	r2, [r7, #2]
 800533c:	81da      	strh	r2, [r3, #14]
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <_ZN7Tracker22set_sunlight_schedualeEs>:
		void set_sunlight_scheduale(int16_t s){this->sunlight_scheduale = s;}
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	807b      	strh	r3, [r7, #2]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	887a      	ldrh	r2, [r7, #2]
 800535a:	821a      	strh	r2, [r3, #16]
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	test = size_of_T ;
 800536e:	4b90      	ldr	r3, [pc, #576]	; (80055b0 <main+0x248>)
 8005370:	2214      	movs	r2, #20
 8005372:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005374:	f002 ff38 	bl	80081e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005378:	f000 f958 	bl	800562c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800537c:	f000 fff0 	bl	8006360 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8005380:	f000 ffb0 	bl	80062e4 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8005384:	f000 ff20 	bl	80061c8 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8005388:	f000 ff7a 	bl	8006280 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM3_Init();
 800538c:	f000 fc24 	bl	8005bd8 <_ZL12MX_TIM3_Initv>
  MX_TIM9_Init();
 8005390:	f000 fd7c 	bl	8005e8c <_ZL12MX_TIM9_Initv>
  MX_I2C1_Init();
 8005394:	f000 faa2 	bl	80058dc <_ZL12MX_I2C1_Initv>
  MX_TIM14_Init();
 8005398:	f000 febe 	bl	8006118 <_ZL13MX_TIM14_Initv>
  MX_ADC3_Init();
 800539c:	f000 f9bc 	bl	8005718 <_ZL12MX_ADC3_Initv>
  MX_TIM13_Init();
 80053a0:	f000 fe90 	bl	80060c4 <_ZL13MX_TIM13_Initv>
  MX_TIM8_Init();
 80053a4:	f000 fd0c 	bl	8005dc0 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 80053a8:	f000 fe48 	bl	800603c <_ZL13MX_TIM12_Initv>
  MX_TIM11_Init();
 80053ac:	f000 fe1e 	bl	8005fec <_ZL13MX_TIM11_Initv>
  MX_USART2_UART_Init();
 80053b0:	f000 fedc 	bl	800616c <_ZL19MX_USART2_UART_Initv>
  MX_TIM4_Init();
 80053b4:	f000 fca2 	bl	8005cfc <_ZL12MX_TIM4_Initv>
  MX_TIM10_Init();
 80053b8:	f000 fdee 	bl	8005f98 <_ZL13MX_TIM10_Initv>
  MX_TIM2_Init();
 80053bc:	f000 fbae 	bl	8005b1c <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 80053c0:	f000 fadc 	bl	800597c <_ZL12MX_TIM1_Initv>
  MX_USART6_UART_Init();
 80053c4:	f000 ff2e 	bl	8006224 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */
  	  /*******           adc start              **********/
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)buffer, 8);
 80053c8:	2208      	movs	r2, #8
 80053ca:	497a      	ldr	r1, [pc, #488]	; (80055b4 <main+0x24c>)
 80053cc:	487a      	ldr	r0, [pc, #488]	; (80055b8 <main+0x250>)
 80053ce:	f002 ffe3 	bl	8008398 <HAL_ADC_Start_DMA>

  	  /*******           encoder config         **********/
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80053d2:	2100      	movs	r1, #0
 80053d4:	4879      	ldr	r0, [pc, #484]	; (80055bc <main+0x254>)
 80053d6:	f006 f931 	bl	800b63c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80053da:	2104      	movs	r1, #4
 80053dc:	4877      	ldr	r0, [pc, #476]	; (80055bc <main+0x254>)
 80053de:	f006 f92d 	bl	800b63c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80053e2:	2108      	movs	r1, #8
 80053e4:	4875      	ldr	r0, [pc, #468]	; (80055bc <main+0x254>)
 80053e6:	f006 f929 	bl	800b63c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80053ea:	210c      	movs	r1, #12
 80053ec:	4873      	ldr	r0, [pc, #460]	; (80055bc <main+0x254>)
 80053ee:	f006 f925 	bl	800b63c <HAL_TIM_IC_Start_IT>
  	  /***************************************************/

  	  /***********          mpu config        ************/
  mpu.set_i2c(&hi2c1);
 80053f2:	4973      	ldr	r1, [pc, #460]	; (80055c0 <main+0x258>)
 80053f4:	4873      	ldr	r0, [pc, #460]	; (80055c4 <main+0x25c>)
 80053f6:	f7fc fb31 	bl	8001a5c <_ZN7MPU60507set_i2cEP17I2C_HandleTypeDef>
  	  /***************************************************/

  	  /******            dc motor config           *******/
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80053fa:	2100      	movs	r1, #0
 80053fc:	4872      	ldr	r0, [pc, #456]	; (80055c8 <main+0x260>)
 80053fe:	f006 f8b3 	bl	800b568 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8005402:	2104      	movs	r1, #4
 8005404:	4870      	ldr	r0, [pc, #448]	; (80055c8 <main+0x260>)
 8005406:	f006 f8af 	bl	800b568 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim14);
 800540a:	4870      	ldr	r0, [pc, #448]	; (80055cc <main+0x264>)
 800540c:	f006 f852 	bl	800b4b4 <HAL_TIM_Base_Start_IT>
  dcright.setCCRx(htim9.Instance->CCR2);
 8005410:	4b6d      	ldr	r3, [pc, #436]	; (80055c8 <main+0x260>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3338      	adds	r3, #56	; 0x38
 8005416:	4619      	mov	r1, r3
 8005418:	486d      	ldr	r0, [pc, #436]	; (80055d0 <main+0x268>)
 800541a:	f7fb fd9e 	bl	8000f5a <_ZN7DCMotor7setCCRxERVm>
  dcright.setGPIO(GPIOG, GPIOG,GPIO_PIN_11,GPIO_PIN_13);
 800541e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005428:	4a6a      	ldr	r2, [pc, #424]	; (80055d4 <main+0x26c>)
 800542a:	496a      	ldr	r1, [pc, #424]	; (80055d4 <main+0x26c>)
 800542c:	4868      	ldr	r0, [pc, #416]	; (80055d0 <main+0x268>)
 800542e:	f7fb fd7b 	bl	8000f28 <_ZN7DCMotor7setGPIOEP12GPIO_TypeDefS1_tt>
  dcleft.setCCRx(htim9.Instance->CCR1);
 8005432:	4b65      	ldr	r3, [pc, #404]	; (80055c8 <main+0x260>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3334      	adds	r3, #52	; 0x34
 8005438:	4619      	mov	r1, r3
 800543a:	4867      	ldr	r0, [pc, #412]	; (80055d8 <main+0x270>)
 800543c:	f7fb fd8d 	bl	8000f5a <_ZN7DCMotor7setCCRxERVm>
  dcleft.setGPIO(GPIOG, GPIOG,GPIO_PIN_10,GPIO_PIN_15);
 8005440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800544a:	4a62      	ldr	r2, [pc, #392]	; (80055d4 <main+0x26c>)
 800544c:	4961      	ldr	r1, [pc, #388]	; (80055d4 <main+0x26c>)
 800544e:	4862      	ldr	r0, [pc, #392]	; (80055d8 <main+0x270>)
 8005450:	f7fb fd6a 	bl	8000f28 <_ZN7DCMotor7setGPIOEP12GPIO_TypeDefS1_tt>
  dcSys.set_encoders(&encoderL, &encoderR);
 8005454:	4a61      	ldr	r2, [pc, #388]	; (80055dc <main+0x274>)
 8005456:	4962      	ldr	r1, [pc, #392]	; (80055e0 <main+0x278>)
 8005458:	4862      	ldr	r0, [pc, #392]	; (80055e4 <main+0x27c>)
 800545a:	f7fb ff53 	bl	8001304 <_ZN8DCSystem12set_encodersEPmS0_>
  dcSys.setMPU(&mpu);
 800545e:	4959      	ldr	r1, [pc, #356]	; (80055c4 <main+0x25c>)
 8005460:	4860      	ldr	r0, [pc, #384]	; (80055e4 <main+0x27c>)
 8005462:	f7fc fa0d 	bl	8001880 <_ZN8DCSystem6setMPUEP7MPU6050>
  dcSys.setTIM(&htim14);
 8005466:	4959      	ldr	r1, [pc, #356]	; (80055cc <main+0x264>)
 8005468:	485e      	ldr	r0, [pc, #376]	; (80055e4 <main+0x27c>)
 800546a:	f7fc fa17 	bl	800189c <_ZN8DCSystem6setTIMEP17TIM_HandleTypeDef>
  	  /***************************************************/

	  /******  start timer 12 for microsecond delay ******/
  HAL_TIM_Base_Start_IT(&htim12);
 800546e:	485e      	ldr	r0, [pc, #376]	; (80055e8 <main+0x280>)
 8005470:	f006 f820 	bl	800b4b4 <HAL_TIM_Base_Start_IT>
	  /***************************************************/

  	  /******  start timer 13 for distance readings ******/
  HAL_TIM_Base_Start_IT(&htim13);
 8005474:	485d      	ldr	r0, [pc, #372]	; (80055ec <main+0x284>)
 8005476:	f006 f81d 	bl	800b4b4 <HAL_TIM_Base_Start_IT>
  	  /***************************************************/

  	  /** start timer 8 for hc-04 in input capture mode left **/
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 800547a:	2100      	movs	r1, #0
 800547c:	485c      	ldr	r0, [pc, #368]	; (80055f0 <main+0x288>)
 800547e:	f006 f8dd 	bl	800b63c <HAL_TIM_IC_Start_IT>
  //HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
  	  /***************************************************/

  	  /** start timer 4 for hc-04 in input capture mode right **/
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8005482:	210c      	movs	r1, #12
 8005484:	485b      	ldr	r0, [pc, #364]	; (80055f4 <main+0x28c>)
 8005486:	f006 f8d9 	bl	800b63c <HAL_TIM_IC_Start_IT>
  //HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
      /***************************************************/

  	  /******  start timer 10 for second interrupt ******/
  HAL_TIM_Base_Start_IT(&htim10);
 800548a:	485b      	ldr	r0, [pc, #364]	; (80055f8 <main+0x290>)
 800548c:	f006 f812 	bl	800b4b4 <HAL_TIM_Base_Start_IT>
  	  /***************************************************/

  	  /******  start timer 10 for second interrupt ******/
  HAL_TIM_Base_Start_IT(&htim2);
 8005490:	485a      	ldr	r0, [pc, #360]	; (80055fc <main+0x294>)
 8005492:	f006 f80f 	bl	800b4b4 <HAL_TIM_Base_Start_IT>




	  /******  enable timer 1 for the demo  ******/
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005496:	2108      	movs	r1, #8
 8005498:	4859      	ldr	r0, [pc, #356]	; (8005600 <main+0x298>)
 800549a:	f006 f865 	bl	800b568 <HAL_TIM_PWM_Start>
  htim1.Instance->CCR3 = 200 ;
 800549e:	4b58      	ldr	r3, [pc, #352]	; (8005600 <main+0x298>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	22c8      	movs	r2, #200	; 0xc8
 80054a4:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80054a6:	2200      	movs	r2, #0
 80054a8:	2101      	movs	r1, #1
 80054aa:	4856      	ldr	r0, [pc, #344]	; (8005604 <main+0x29c>)
 80054ac:	f004 f98e 	bl	80097cc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ////////////////////////////////////// wait for msg from the esp ////////////////////////////////////////

  while(HAL_UART_Receive(&huart2, &ch, 1, -1)== HAL_OK){
 80054b0:	f04f 33ff 	mov.w	r3, #4294967295
 80054b4:	2201      	movs	r2, #1
 80054b6:	4954      	ldr	r1, [pc, #336]	; (8005608 <main+0x2a0>)
 80054b8:	4854      	ldr	r0, [pc, #336]	; (800560c <main+0x2a4>)
 80054ba:	f007 faad 	bl	800ca18 <HAL_UART_Receive>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00d      	beq.n	80054ea <main+0x182>
	  if(chp == 'O' && ch == 'K'){
 80054ce:	4b50      	ldr	r3, [pc, #320]	; (8005610 <main+0x2a8>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b4f      	cmp	r3, #79	; 0x4f
 80054d4:	d103      	bne.n	80054de <main+0x176>
 80054d6:	4b4c      	ldr	r3, [pc, #304]	; (8005608 <main+0x2a0>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b4b      	cmp	r3, #75	; 0x4b
 80054dc:	d004      	beq.n	80054e8 <main+0x180>
  		break ;
  	  }
  	  chp = ch ;
 80054de:	4b4a      	ldr	r3, [pc, #296]	; (8005608 <main+0x2a0>)
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	4b4b      	ldr	r3, [pc, #300]	; (8005610 <main+0x2a8>)
 80054e4:	701a      	strb	r2, [r3, #0]
  while(HAL_UART_Receive(&huart2, &ch, 1, -1)== HAL_OK){
 80054e6:	e7e3      	b.n	80054b0 <main+0x148>
  		break ;
 80054e8:	bf00      	nop
  }
  ch = 0 ; chp = 0 ;
 80054ea:	4b47      	ldr	r3, [pc, #284]	; (8005608 <main+0x2a0>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	4b47      	ldr	r3, [pc, #284]	; (8005610 <main+0x2a8>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
  while(HAL_UART_Receive(&huart2, &ch, 1, -1)== HAL_OK){
 80054f6:	f04f 33ff 	mov.w	r3, #4294967295
 80054fa:	2201      	movs	r2, #1
 80054fc:	4942      	ldr	r1, [pc, #264]	; (8005608 <main+0x2a0>)
 80054fe:	4843      	ldr	r0, [pc, #268]	; (800560c <main+0x2a4>)
 8005500:	f007 fa8a 	bl	800ca18 <HAL_UART_Receive>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00d      	beq.n	8005530 <main+0x1c8>
  	  if(chp == 'O' && ch == 'K'){
 8005514:	4b3e      	ldr	r3, [pc, #248]	; (8005610 <main+0x2a8>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b4f      	cmp	r3, #79	; 0x4f
 800551a:	d103      	bne.n	8005524 <main+0x1bc>
 800551c:	4b3a      	ldr	r3, [pc, #232]	; (8005608 <main+0x2a0>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b4b      	cmp	r3, #75	; 0x4b
 8005522:	d004      	beq.n	800552e <main+0x1c6>
    	break ;
  	  }
  	  chp = ch ;
 8005524:	4b38      	ldr	r3, [pc, #224]	; (8005608 <main+0x2a0>)
 8005526:	781a      	ldrb	r2, [r3, #0]
 8005528:	4b39      	ldr	r3, [pc, #228]	; (8005610 <main+0x2a8>)
 800552a:	701a      	strb	r2, [r3, #0]
  while(HAL_UART_Receive(&huart2, &ch, 1, -1)== HAL_OK){
 800552c:	e7e3      	b.n	80054f6 <main+0x18e>
    	break ;
 800552e:	bf00      	nop
  }
  HAL_UART_Receive_DMA(&huart6, (uint8_t*)&r_data,size_of_R);
 8005530:	2208      	movs	r2, #8
 8005532:	4938      	ldr	r1, [pc, #224]	; (8005614 <main+0x2ac>)
 8005534:	4838      	ldr	r0, [pc, #224]	; (8005618 <main+0x2b0>)
 8005536:	f007 fb15 	bl	800cb64 <HAL_UART_Receive_DMA>

    /* USER CODE BEGIN 3 */



	  t_data.error = 0 ;
 800553a:	4b38      	ldr	r3, [pc, #224]	; (800561c <main+0x2b4>)
 800553c:	2200      	movs	r2, #0
 800553e:	825a      	strh	r2, [r3, #18]
	  /*
	  t_data.soil = 0 ;
	  t_data.water_levet = 0 ;
	  */
	  flag = tracker.traverse();
 8005540:	4837      	ldr	r0, [pc, #220]	; (8005620 <main+0x2b8>)
 8005542:	f7fc fca1 	bl	8001e88 <_ZN7Tracker8traverseEv>
 8005546:	4603      	mov	r3, r0
 8005548:	461a      	mov	r2, r3
 800554a:	4b36      	ldr	r3, [pc, #216]	; (8005624 <main+0x2bc>)
 800554c:	701a      	strb	r2, [r3, #0]
	  	  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	  if (flag == 1){                     // no sunlight was found
 800554e:	4b35      	ldr	r3, [pc, #212]	; (8005624 <main+0x2bc>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d113      	bne.n	800557e <main+0x216>
		  /**** the area was traversed but no sunlight was found ****/
		  /**** sleep for 1 hour then try again ****/
		  int c = 0 ;
 8005556:	2300      	movs	r3, #0
 8005558:	607b      	str	r3, [r7, #4]
		  while(c < 60){
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b3b      	cmp	r3, #59	; 0x3b
 800555e:	dc0a      	bgt.n	8005576 <main+0x20e>
			  /**** sleep for 1 min ****/
			  HAL_Delay(60000);
 8005560:	f64e 2060 	movw	r0, #60000	; 0xea60
 8005564:	f002 feb2 	bl	80082cc <HAL_Delay>

			  tracker.watering_palnt();
 8005568:	482d      	ldr	r0, [pc, #180]	; (8005620 <main+0x2b8>)
 800556a:	f7fc faf1 	bl	8001b50 <_ZN7Tracker14watering_palntEv>
			  c++;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3301      	adds	r3, #1
 8005572:	607b      	str	r3, [r7, #4]
		  while(c < 60){
 8005574:	e7f1      	b.n	800555a <main+0x1f2>
		  }
		  tracker.restart();
 8005576:	482a      	ldr	r0, [pc, #168]	; (8005620 <main+0x2b8>)
 8005578:	f7fc fb81 	bl	8001c7e <_ZN7Tracker7restartEv>
 800557c:	e7dd      	b.n	800553a <main+0x1d2>
	  }else if(flag == 5){                // sunlight found
 800557e:	4b29      	ldr	r3, [pc, #164]	; (8005624 <main+0x2bc>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b05      	cmp	r3, #5
 8005584:	d110      	bne.n	80055a8 <main+0x240>
	  	//HAL_GPIO_WritePin(GPIOC,YELLOW_Pin, GPIO_PIN_RESET);
		  sunlight_counter++;
 8005586:	4b28      	ldr	r3, [pc, #160]	; (8005628 <main+0x2c0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3301      	adds	r3, #1
 800558c:	4a26      	ldr	r2, [pc, #152]	; (8005628 <main+0x2c0>)
 800558e:	6013      	str	r3, [r2, #0]
		  tracker.set_sunlight_counter(sunlight_counter);
 8005590:	4b25      	ldr	r3, [pc, #148]	; (8005628 <main+0x2c0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	b21b      	sxth	r3, r3
 8005596:	4619      	mov	r1, r3
 8005598:	4821      	ldr	r0, [pc, #132]	; (8005620 <main+0x2b8>)
 800559a:	f7ff fec7 	bl	800532c <_ZN7Tracker20set_sunlight_counterEs>
		  HAL_Delay(60000);
 800559e:	f64e 2060 	movw	r0, #60000	; 0xea60
 80055a2:	f002 fe93 	bl	80082cc <HAL_Delay>
 80055a6:	e7c8      	b.n	800553a <main+0x1d2>
	  }else if(flag == 2 ){                // error
 80055a8:	4b1e      	ldr	r3, [pc, #120]	; (8005624 <main+0x2bc>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b02      	cmp	r3, #2
	  dcleft.moveForword(100);
	  HAL_UART_Transmit(&huart3,(uint8_t*)& t_data, sizeof(struct T_data), 100);
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
	  HAL_Delay(500);
	  */
  }
 80055ae:	e7c4      	b.n	800553a <main+0x1d2>
 80055b0:	20002730 	.word	0x20002730
 80055b4:	20000a64 	.word	0x20000a64
 80055b8:	20000098 	.word	0x20000098
 80055bc:	20000214 	.word	0x20000214
 80055c0:	20000140 	.word	0x20000140
 80055c4:	20000a50 	.word	0x20000a50
 80055c8:	200002d4 	.word	0x200002d4
 80055cc:	20000414 	.word	0x20000414
 80055d0:	20000a00 	.word	0x20000a00
 80055d4:	40021800 	.word	0x40021800
 80055d8:	20000a18 	.word	0x20000a18
 80055dc:	200009fc 	.word	0x200009fc
 80055e0:	200009f8 	.word	0x200009f8
 80055e4:	20000a30 	.word	0x20000a30
 80055e8:	20000394 	.word	0x20000394
 80055ec:	200003d4 	.word	0x200003d4
 80055f0:	20000294 	.word	0x20000294
 80055f4:	20000254 	.word	0x20000254
 80055f8:	20000314 	.word	0x20000314
 80055fc:	200001d4 	.word	0x200001d4
 8005600:	20000194 	.word	0x20000194
 8005604:	40020c00 	.word	0x40020c00
 8005608:	20002735 	.word	0x20002735
 800560c:	20000454 	.word	0x20000454
 8005610:	20002734 	.word	0x20002734
 8005614:	200009f0 	.word	0x200009f0
 8005618:	200004d4 	.word	0x200004d4
 800561c:	200009dc 	.word	0x200009dc
 8005620:	20000ae8 	.word	0x20000ae8
 8005624:	20002736 	.word	0x20002736
 8005628:	20002728 	.word	0x20002728

0800562c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b094      	sub	sp, #80	; 0x50
 8005630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005632:	f107 0320 	add.w	r3, r7, #32
 8005636:	2230      	movs	r2, #48	; 0x30
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f009 fcf0 	bl	800f020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005640:	f107 030c 	add.w	r3, r7, #12
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	605a      	str	r2, [r3, #4]
 800564a:	609a      	str	r2, [r3, #8]
 800564c:	60da      	str	r2, [r3, #12]
 800564e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005650:	2300      	movs	r3, #0
 8005652:	60bb      	str	r3, [r7, #8]
 8005654:	4b2e      	ldr	r3, [pc, #184]	; (8005710 <_Z18SystemClock_Configv+0xe4>)
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	4a2d      	ldr	r2, [pc, #180]	; (8005710 <_Z18SystemClock_Configv+0xe4>)
 800565a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565e:	6413      	str	r3, [r2, #64]	; 0x40
 8005660:	4b2b      	ldr	r3, [pc, #172]	; (8005710 <_Z18SystemClock_Configv+0xe4>)
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800566c:	2300      	movs	r3, #0
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	4b28      	ldr	r3, [pc, #160]	; (8005714 <_Z18SystemClock_Configv+0xe8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005678:	4a26      	ldr	r2, [pc, #152]	; (8005714 <_Z18SystemClock_Configv+0xe8>)
 800567a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	4b24      	ldr	r3, [pc, #144]	; (8005714 <_Z18SystemClock_Configv+0xe8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005688:	607b      	str	r3, [r7, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800568c:	2301      	movs	r3, #1
 800568e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005696:	2302      	movs	r3, #2
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800569a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80056a0:	2304      	movs	r3, #4
 80056a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80056a4:	2348      	movs	r3, #72	; 0x48
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80056a8:	2302      	movs	r3, #2
 80056aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80056ac:	2303      	movs	r3, #3
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056b0:	f107 0320 	add.w	r3, r7, #32
 80056b4:	4618      	mov	r0, r3
 80056b6:	f005 fa21 	bl	800aafc <HAL_RCC_OscConfig>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bf14      	ite	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	2300      	moveq	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80056ca:	f001 ff65 	bl	8007598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056ce:	230f      	movs	r3, #15
 80056d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056d2:	2302      	movs	r3, #2
 80056d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80056da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80056e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80056e6:	f107 030c 	add.w	r3, r7, #12
 80056ea:	2102      	movs	r1, #2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f005 fc75 	bl	800afdc <HAL_RCC_ClockConfig>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf14      	ite	ne
 80056f8:	2301      	movne	r3, #1
 80056fa:	2300      	moveq	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8005702:	f001 ff49 	bl	8007598 <Error_Handler>
  }
}
 8005706:	bf00      	nop
 8005708:	3750      	adds	r7, #80	; 0x50
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40023800 	.word	0x40023800
 8005714:	40007000 	.word	0x40007000

08005718 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800571e:	463b      	mov	r3, r7
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800572a:	4b69      	ldr	r3, [pc, #420]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 800572c:	4a69      	ldr	r2, [pc, #420]	; (80058d4 <_ZL12MX_ADC3_Initv+0x1bc>)
 800572e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005730:	4b67      	ldr	r3, [pc, #412]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 8005732:	2200      	movs	r2, #0
 8005734:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8005736:	4b66      	ldr	r3, [pc, #408]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 8005738:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800573c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800573e:	4b64      	ldr	r3, [pc, #400]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 8005740:	2201      	movs	r2, #1
 8005742:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8005744:	4b62      	ldr	r3, [pc, #392]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 8005746:	2201      	movs	r2, #1
 8005748:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800574a:	4b61      	ldr	r3, [pc, #388]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005752:	4b5f      	ldr	r3, [pc, #380]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 8005754:	2200      	movs	r2, #0
 8005756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005758:	4b5d      	ldr	r3, [pc, #372]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 800575a:	4a5f      	ldr	r2, [pc, #380]	; (80058d8 <_ZL12MX_ADC3_Initv+0x1c0>)
 800575c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800575e:	4b5c      	ldr	r3, [pc, #368]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 8005760:	2200      	movs	r2, #0
 8005762:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 8;
 8005764:	4b5a      	ldr	r3, [pc, #360]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 8005766:	2208      	movs	r2, #8
 8005768:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800576a:	4b59      	ldr	r3, [pc, #356]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005772:	4b57      	ldr	r3, [pc, #348]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 8005774:	2201      	movs	r2, #1
 8005776:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005778:	4855      	ldr	r0, [pc, #340]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 800577a:	f002 fdc9 	bl	8008310 <HAL_ADC_Init>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <_ZL12MX_ADC3_Initv+0x7a>
  {
    Error_Handler();
 800578e:	f001 ff03 	bl	8007598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005792:	2304      	movs	r3, #4
 8005794:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005796:	2301      	movs	r3, #1
 8005798:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800579a:	2307      	movs	r3, #7
 800579c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800579e:	463b      	mov	r3, r7
 80057a0:	4619      	mov	r1, r3
 80057a2:	484b      	ldr	r0, [pc, #300]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 80057a4:	f002 fefe 	bl	80085a4 <HAL_ADC_ConfigChannel>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bf14      	ite	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	2300      	moveq	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80057b8:	f001 feee 	bl	8007598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80057bc:	2309      	movs	r3, #9
 80057be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80057c0:	2302      	movs	r3, #2
 80057c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80057c4:	463b      	mov	r3, r7
 80057c6:	4619      	mov	r1, r3
 80057c8:	4841      	ldr	r0, [pc, #260]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 80057ca:	f002 feeb 	bl	80085a4 <HAL_ADC_ConfigChannel>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <_ZL12MX_ADC3_Initv+0xca>
  {
    Error_Handler();
 80057de:	f001 fedb 	bl	8007598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80057e2:	2305      	movs	r3, #5
 80057e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80057e6:	2303      	movs	r3, #3
 80057e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80057ea:	463b      	mov	r3, r7
 80057ec:	4619      	mov	r1, r3
 80057ee:	4838      	ldr	r0, [pc, #224]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 80057f0:	f002 fed8 	bl	80085a4 <HAL_ADC_ConfigChannel>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bf14      	ite	ne
 80057fa:	2301      	movne	r3, #1
 80057fc:	2300      	moveq	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <_ZL12MX_ADC3_Initv+0xf0>
  {
    Error_Handler();
 8005804:	f001 fec8 	bl	8007598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005808:	2306      	movs	r3, #6
 800580a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800580c:	2304      	movs	r3, #4
 800580e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005810:	463b      	mov	r3, r7
 8005812:	4619      	mov	r1, r3
 8005814:	482e      	ldr	r0, [pc, #184]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 8005816:	f002 fec5 	bl	80085a4 <HAL_ADC_ConfigChannel>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	bf14      	ite	ne
 8005820:	2301      	movne	r3, #1
 8005822:	2300      	moveq	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <_ZL12MX_ADC3_Initv+0x116>
  {
    Error_Handler();
 800582a:	f001 feb5 	bl	8007598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800582e:	2307      	movs	r3, #7
 8005830:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005832:	2305      	movs	r3, #5
 8005834:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005836:	463b      	mov	r3, r7
 8005838:	4619      	mov	r1, r3
 800583a:	4825      	ldr	r0, [pc, #148]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 800583c:	f002 feb2 	bl	80085a4 <HAL_ADC_ConfigChannel>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	bf14      	ite	ne
 8005846:	2301      	movne	r3, #1
 8005848:	2300      	moveq	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <_ZL12MX_ADC3_Initv+0x13c>
  {
    Error_Handler();
 8005850:	f001 fea2 	bl	8007598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005854:	2300      	movs	r3, #0
 8005856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005858:	2306      	movs	r3, #6
 800585a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800585c:	463b      	mov	r3, r7
 800585e:	4619      	mov	r1, r3
 8005860:	481b      	ldr	r0, [pc, #108]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 8005862:	f002 fe9f 	bl	80085a4 <HAL_ADC_ConfigChannel>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <_ZL12MX_ADC3_Initv+0x162>
  {
    Error_Handler();
 8005876:	f001 fe8f 	bl	8007598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800587a:	2303      	movs	r3, #3
 800587c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800587e:	2307      	movs	r3, #7
 8005880:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005882:	463b      	mov	r3, r7
 8005884:	4619      	mov	r1, r3
 8005886:	4812      	ldr	r0, [pc, #72]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 8005888:	f002 fe8c 	bl	80085a4 <HAL_ADC_ConfigChannel>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	bf14      	ite	ne
 8005892:	2301      	movne	r3, #1
 8005894:	2300      	moveq	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <_ZL12MX_ADC3_Initv+0x188>
  {
    Error_Handler();
 800589c:	f001 fe7c 	bl	8007598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80058a0:	2308      	movs	r3, #8
 80058a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80058a4:	2308      	movs	r3, #8
 80058a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80058a8:	463b      	mov	r3, r7
 80058aa:	4619      	mov	r1, r3
 80058ac:	4808      	ldr	r0, [pc, #32]	; (80058d0 <_ZL12MX_ADC3_Initv+0x1b8>)
 80058ae:	f002 fe79 	bl	80085a4 <HAL_ADC_ConfigChannel>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <_ZL12MX_ADC3_Initv+0x1ae>
  {
    Error_Handler();
 80058c2:	f001 fe69 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000098 	.word	0x20000098
 80058d4:	40012200 	.word	0x40012200
 80058d8:	0f000001 	.word	0x0f000001

080058dc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80058e0:	4b23      	ldr	r3, [pc, #140]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 80058e2:	4a24      	ldr	r2, [pc, #144]	; (8005974 <_ZL12MX_I2C1_Initv+0x98>)
 80058e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80058e6:	4b22      	ldr	r3, [pc, #136]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 80058e8:	4a23      	ldr	r2, [pc, #140]	; (8005978 <_ZL12MX_I2C1_Initv+0x9c>)
 80058ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80058ec:	4b20      	ldr	r3, [pc, #128]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80058f2:	4b1f      	ldr	r3, [pc, #124]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058f8:	4b1d      	ldr	r3, [pc, #116]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 80058fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005900:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 8005902:	2200      	movs	r2, #0
 8005904:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005906:	4b1a      	ldr	r3, [pc, #104]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 8005908:	2200      	movs	r2, #0
 800590a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800590c:	4b18      	ldr	r3, [pc, #96]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 800590e:	2200      	movs	r2, #0
 8005910:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005912:	4b17      	ldr	r3, [pc, #92]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 8005914:	2200      	movs	r2, #0
 8005916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005918:	4815      	ldr	r0, [pc, #84]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 800591a:	f003 ffa3 	bl	8009864 <HAL_I2C_Init>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	bf14      	ite	ne
 8005924:	2301      	movne	r3, #1
 8005926:	2300      	moveq	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800592e:	f001 fe33 	bl	8007598 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005932:	2100      	movs	r1, #0
 8005934:	480e      	ldr	r0, [pc, #56]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 8005936:	f004 ff48 	bl	800a7ca <HAL_I2CEx_ConfigAnalogFilter>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	bf14      	ite	ne
 8005940:	2301      	movne	r3, #1
 8005942:	2300      	moveq	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <_ZL12MX_I2C1_Initv+0x72>
  {
    Error_Handler();
 800594a:	f001 fe25 	bl	8007598 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800594e:	2100      	movs	r1, #0
 8005950:	4807      	ldr	r0, [pc, #28]	; (8005970 <_ZL12MX_I2C1_Initv+0x94>)
 8005952:	f004 ff76 	bl	800a842 <HAL_I2CEx_ConfigDigitalFilter>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	bf14      	ite	ne
 800595c:	2301      	movne	r3, #1
 800595e:	2300      	moveq	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <_ZL12MX_I2C1_Initv+0x8e>
  {
    Error_Handler();
 8005966:	f001 fe17 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000140 	.word	0x20000140
 8005974:	40005400 	.word	0x40005400
 8005978:	000186a0 	.word	0x000186a0

0800597c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b096      	sub	sp, #88	; 0x58
 8005980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005982:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	609a      	str	r2, [r3, #8]
 800598e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005990:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800599a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	605a      	str	r2, [r3, #4]
 80059a4:	609a      	str	r2, [r3, #8]
 80059a6:	60da      	str	r2, [r3, #12]
 80059a8:	611a      	str	r2, [r3, #16]
 80059aa:	615a      	str	r2, [r3, #20]
 80059ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80059ae:	1d3b      	adds	r3, r7, #4
 80059b0:	2220      	movs	r2, #32
 80059b2:	2100      	movs	r1, #0
 80059b4:	4618      	mov	r0, r3
 80059b6:	f009 fb33 	bl	800f020 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80059ba:	4b56      	ldr	r3, [pc, #344]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 80059bc:	4a56      	ldr	r2, [pc, #344]	; (8005b18 <_ZL12MX_TIM1_Initv+0x19c>)
 80059be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 554-1;
 80059c0:	4b54      	ldr	r3, [pc, #336]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 80059c2:	f240 2229 	movw	r2, #553	; 0x229
 80059c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059c8:	4b52      	ldr	r3, [pc, #328]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 80059ce:	4b51      	ldr	r3, [pc, #324]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 80059d0:	22ff      	movs	r2, #255	; 0xff
 80059d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059d4:	4b4f      	ldr	r3, [pc, #316]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80059da:	4b4e      	ldr	r3, [pc, #312]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 80059dc:	2200      	movs	r2, #0
 80059de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059e0:	4b4c      	ldr	r3, [pc, #304]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80059e6:	484b      	ldr	r0, [pc, #300]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 80059e8:	f005 fcea 	bl	800b3c0 <HAL_TIM_Base_Init>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf14      	ite	ne
 80059f2:	2301      	movne	r3, #1
 80059f4:	2300      	moveq	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 80059fc:	f001 fdcc 	bl	8007598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005a06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4841      	ldr	r0, [pc, #260]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 8005a0e:	f006 f8e7 	bl	800bbe0 <HAL_TIM_ConfigClockSource>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bf14      	ite	ne
 8005a18:	2301      	movne	r3, #1
 8005a1a:	2300      	moveq	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8005a22:	f001 fdb9 	bl	8007598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005a26:	483b      	ldr	r0, [pc, #236]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 8005a28:	f005 fd68 	bl	800b4fc <HAL_TIM_PWM_Init>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf14      	ite	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	2300      	moveq	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8005a3c:	f001 fdac 	bl	8007598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a40:	2300      	movs	r3, #0
 8005a42:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005a48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4831      	ldr	r0, [pc, #196]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 8005a50:	f006 fe1a 	bl	800c688 <HAL_TIMEx_MasterConfigSynchronization>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bf14      	ite	ne
 8005a5a:	2301      	movne	r3, #1
 8005a5c:	2300      	moveq	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8005a64:	f001 fd98 	bl	8007598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a68:	2360      	movs	r3, #96	; 0x60
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a70:	2300      	movs	r3, #0
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a74:	2300      	movs	r3, #0
 8005a76:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005a80:	2300      	movs	r3, #0
 8005a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4821      	ldr	r0, [pc, #132]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 8005a8e:	f005 ffe1 	bl	800ba54 <HAL_TIM_PWM_ConfigChannel>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8005aa2:	f001 fd79 	bl	8007598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aaa:	2208      	movs	r2, #8
 8005aac:	4619      	mov	r1, r3
 8005aae:	4819      	ldr	r0, [pc, #100]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 8005ab0:	f005 ffd0 	bl	800ba54 <HAL_TIM_PWM_ConfigChannel>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bf14      	ite	ne
 8005aba:	2301      	movne	r3, #1
 8005abc:	2300      	moveq	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8005ac4:	f001 fd68 	bl	8007598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ae0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005ae6:	1d3b      	adds	r3, r7, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	480a      	ldr	r0, [pc, #40]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 8005aec:	f006 fe48 	bl	800c780 <HAL_TIMEx_ConfigBreakDeadTime>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bf14      	ite	ne
 8005af6:	2301      	movne	r3, #1
 8005af8:	2300      	moveq	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <_ZL12MX_TIM1_Initv+0x188>
  {
    Error_Handler();
 8005b00:	f001 fd4a 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005b04:	4803      	ldr	r0, [pc, #12]	; (8005b14 <_ZL12MX_TIM1_Initv+0x198>)
 8005b06:	f002 f871 	bl	8007bec <HAL_TIM_MspPostInit>

}
 8005b0a:	bf00      	nop
 8005b0c:	3758      	adds	r7, #88	; 0x58
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000194 	.word	0x20000194
 8005b18:	40010000 	.word	0x40010000

08005b1c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b22:	f107 0308 	add.w	r3, r7, #8
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	609a      	str	r2, [r3, #8]
 8005b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b30:	463b      	mov	r3, r7
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005b38:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8005b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999-1;
 8005b40:	4b23      	ldr	r3, [pc, #140]	; (8005bd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8005b42:	f242 720e 	movw	r2, #9998	; 0x270e
 8005b46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b48:	4b21      	ldr	r3, [pc, #132]	; (8005bd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 431999-1;
 8005b4e:	4b20      	ldr	r3, [pc, #128]	; (8005bd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8005b50:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <_ZL12MX_TIM2_Initv+0xb8>)
 8005b52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b54:	4b1e      	ldr	r3, [pc, #120]	; (8005bd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005b60:	481b      	ldr	r0, [pc, #108]	; (8005bd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8005b62:	f005 fc2d 	bl	800b3c0 <HAL_TIM_Base_Init>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8005b76:	f001 fd0f 	bl	8007598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005b80:	f107 0308 	add.w	r3, r7, #8
 8005b84:	4619      	mov	r1, r3
 8005b86:	4812      	ldr	r0, [pc, #72]	; (8005bd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8005b88:	f006 f82a 	bl	800bbe0 <HAL_TIM_ConfigClockSource>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bf14      	ite	ne
 8005b92:	2301      	movne	r3, #1
 8005b94:	2300      	moveq	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8005b9c:	f001 fcfc 	bl	8007598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005ba8:	463b      	mov	r3, r7
 8005baa:	4619      	mov	r1, r3
 8005bac:	4808      	ldr	r0, [pc, #32]	; (8005bd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8005bae:	f006 fd6b 	bl	800c688 <HAL_TIMEx_MasterConfigSynchronization>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	bf14      	ite	ne
 8005bb8:	2301      	movne	r3, #1
 8005bba:	2300      	moveq	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8005bc2:	f001 fce9 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005bc6:	bf00      	nop
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	200001d4 	.word	0x200001d4
 8005bd4:	0006977e 	.word	0x0006977e

08005bd8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bde:	f107 0310 	add.w	r3, r7, #16
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005be8:	463b      	mov	r3, r7
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	609a      	str	r2, [r3, #8]
 8005bf2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005bf4:	4b3f      	ldr	r3, [pc, #252]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005bf6:	4a40      	ldr	r2, [pc, #256]	; (8005cf8 <_ZL12MX_TIM3_Initv+0x120>)
 8005bf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005bfa:	4b3e      	ldr	r3, [pc, #248]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c00:	4b3c      	ldr	r3, [pc, #240]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8005c06:	4b3b      	ldr	r3, [pc, #236]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c0c:	4b39      	ldr	r3, [pc, #228]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c12:	4b38      	ldr	r3, [pc, #224]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005c18:	4836      	ldr	r0, [pc, #216]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005c1a:	f005 fce3 	bl	800b5e4 <HAL_TIM_IC_Init>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	bf14      	ite	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	2300      	moveq	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <_ZL12MX_TIM3_Initv+0x5a>
  {
    Error_Handler();
 8005c2e:	f001 fcb3 	bl	8007598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005c3a:	f107 0310 	add.w	r3, r7, #16
 8005c3e:	4619      	mov	r1, r3
 8005c40:	482c      	ldr	r0, [pc, #176]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005c42:	f006 fd21 	bl	800c688 <HAL_TIMEx_MasterConfigSynchronization>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	bf14      	ite	ne
 8005c4c:	2301      	movne	r3, #1
 8005c4e:	2300      	moveq	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8005c56:	f001 fc9f 	bl	8007598 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8005c5a:	230a      	movs	r3, #10
 8005c5c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 8;
 8005c66:	2308      	movs	r3, #8
 8005c68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4820      	ldr	r0, [pc, #128]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005c72:	f005 fe53 	bl	800b91c <HAL_TIM_IC_ConfigChannel>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	bf14      	ite	ne
 8005c7c:	2301      	movne	r3, #1
 8005c7e:	2300      	moveq	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8005c86:	f001 fc87 	bl	8007598 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	2204      	movs	r2, #4
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4818      	ldr	r0, [pc, #96]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005c92:	f005 fe43 	bl	800b91c <HAL_TIM_IC_ConfigChannel>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bf14      	ite	ne
 8005c9c:	2301      	movne	r3, #1
 8005c9e:	2300      	moveq	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 8005ca6:	f001 fc77 	bl	8007598 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8005caa:	463b      	mov	r3, r7
 8005cac:	2208      	movs	r2, #8
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4810      	ldr	r0, [pc, #64]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005cb2:	f005 fe33 	bl	800b91c <HAL_TIM_IC_ConfigChannel>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	bf14      	ite	ne
 8005cbc:	2301      	movne	r3, #1
 8005cbe:	2300      	moveq	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <_ZL12MX_TIM3_Initv+0xf2>
  {
    Error_Handler();
 8005cc6:	f001 fc67 	bl	8007598 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8005cca:	463b      	mov	r3, r7
 8005ccc:	220c      	movs	r2, #12
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4808      	ldr	r0, [pc, #32]	; (8005cf4 <_ZL12MX_TIM3_Initv+0x11c>)
 8005cd2:	f005 fe23 	bl	800b91c <HAL_TIM_IC_ConfigChannel>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bf14      	ite	ne
 8005cdc:	2301      	movne	r3, #1
 8005cde:	2300      	moveq	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <_ZL12MX_TIM3_Initv+0x112>
  {
    Error_Handler();
 8005ce6:	f001 fc57 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005cea:	bf00      	nop
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000214 	.word	0x20000214
 8005cf8:	40000400 	.word	0x40000400

08005cfc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d02:	f107 0310 	add.w	r3, r7, #16
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	605a      	str	r2, [r3, #4]
 8005d14:	609a      	str	r2, [r3, #8]
 8005d16:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005d18:	4b27      	ldr	r3, [pc, #156]	; (8005db8 <_ZL12MX_TIM4_Initv+0xbc>)
 8005d1a:	4a28      	ldr	r2, [pc, #160]	; (8005dbc <_ZL12MX_TIM4_Initv+0xc0>)
 8005d1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8005d1e:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <_ZL12MX_TIM4_Initv+0xbc>)
 8005d20:	2247      	movs	r2, #71	; 0x47
 8005d22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d24:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <_ZL12MX_TIM4_Initv+0xbc>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8005d2a:	4b23      	ldr	r3, [pc, #140]	; (8005db8 <_ZL12MX_TIM4_Initv+0xbc>)
 8005d2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005d30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d32:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <_ZL12MX_TIM4_Initv+0xbc>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d38:	4b1f      	ldr	r3, [pc, #124]	; (8005db8 <_ZL12MX_TIM4_Initv+0xbc>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8005d3e:	481e      	ldr	r0, [pc, #120]	; (8005db8 <_ZL12MX_TIM4_Initv+0xbc>)
 8005d40:	f005 fc50 	bl	800b5e4 <HAL_TIM_IC_Init>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bf14      	ite	ne
 8005d4a:	2301      	movne	r3, #1
 8005d4c:	2300      	moveq	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8005d54:	f001 fc20 	bl	8007598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005d60:	f107 0310 	add.w	r3, r7, #16
 8005d64:	4619      	mov	r1, r3
 8005d66:	4814      	ldr	r0, [pc, #80]	; (8005db8 <_ZL12MX_TIM4_Initv+0xbc>)
 8005d68:	f006 fc8e 	bl	800c688 <HAL_TIMEx_MasterConfigSynchronization>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf14      	ite	ne
 8005d72:	2301      	movne	r3, #1
 8005d74:	2300      	moveq	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8005d7c:	f001 fc0c 	bl	8007598 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005d80:	2300      	movs	r3, #0
 8005d82:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005d84:	2301      	movs	r3, #1
 8005d86:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8005d90:	463b      	mov	r3, r7
 8005d92:	220c      	movs	r2, #12
 8005d94:	4619      	mov	r1, r3
 8005d96:	4808      	ldr	r0, [pc, #32]	; (8005db8 <_ZL12MX_TIM4_Initv+0xbc>)
 8005d98:	f005 fdc0 	bl	800b91c <HAL_TIM_IC_ConfigChannel>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bf14      	ite	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	2300      	moveq	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <_ZL12MX_TIM4_Initv+0xb4>
  {
    Error_Handler();
 8005dac:	f001 fbf4 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005db0:	bf00      	nop
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000254 	.word	0x20000254
 8005dbc:	40000800 	.word	0x40000800

08005dc0 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dc6:	f107 0310 	add.w	r3, r7, #16
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005dd0:	463b      	mov	r3, r7
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	605a      	str	r2, [r3, #4]
 8005dd8:	609a      	str	r2, [r3, #8]
 8005dda:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005ddc:	4b29      	ldr	r3, [pc, #164]	; (8005e84 <_ZL12MX_TIM8_Initv+0xc4>)
 8005dde:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <_ZL12MX_TIM8_Initv+0xc8>)
 8005de0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72-1;
 8005de2:	4b28      	ldr	r3, [pc, #160]	; (8005e84 <_ZL12MX_TIM8_Initv+0xc4>)
 8005de4:	2247      	movs	r2, #71	; 0x47
 8005de6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005de8:	4b26      	ldr	r3, [pc, #152]	; (8005e84 <_ZL12MX_TIM8_Initv+0xc4>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff-1;
 8005dee:	4b25      	ldr	r3, [pc, #148]	; (8005e84 <_ZL12MX_TIM8_Initv+0xc4>)
 8005df0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005df4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005df6:	4b23      	ldr	r3, [pc, #140]	; (8005e84 <_ZL12MX_TIM8_Initv+0xc4>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005dfc:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <_ZL12MX_TIM8_Initv+0xc4>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e02:	4b20      	ldr	r3, [pc, #128]	; (8005e84 <_ZL12MX_TIM8_Initv+0xc4>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8005e08:	481e      	ldr	r0, [pc, #120]	; (8005e84 <_ZL12MX_TIM8_Initv+0xc4>)
 8005e0a:	f005 fbeb 	bl	800b5e4 <HAL_TIM_IC_Init>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	bf14      	ite	ne
 8005e14:	2301      	movne	r3, #1
 8005e16:	2300      	moveq	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 8005e1e:	f001 fbbb 	bl	8007598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e22:	2300      	movs	r3, #0
 8005e24:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005e2a:	f107 0310 	add.w	r3, r7, #16
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4814      	ldr	r0, [pc, #80]	; (8005e84 <_ZL12MX_TIM8_Initv+0xc4>)
 8005e32:	f006 fc29 	bl	800c688 <HAL_TIMEx_MasterConfigSynchronization>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	bf14      	ite	ne
 8005e3c:	2301      	movne	r3, #1
 8005e3e:	2300      	moveq	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <_ZL12MX_TIM8_Initv+0x8a>
  {
    Error_Handler();
 8005e46:	f001 fba7 	bl	8007598 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4808      	ldr	r0, [pc, #32]	; (8005e84 <_ZL12MX_TIM8_Initv+0xc4>)
 8005e62:	f005 fd5b 	bl	800b91c <HAL_TIM_IC_ConfigChannel>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	bf14      	ite	ne
 8005e6c:	2301      	movne	r3, #1
 8005e6e:	2300      	moveq	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <_ZL12MX_TIM8_Initv+0xba>
  {
    Error_Handler();
 8005e76:	f001 fb8f 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005e7a:	bf00      	nop
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000294 	.word	0x20000294
 8005e88:	40010400 	.word	0x40010400

08005e8c <_ZL12MX_TIM9_Initv>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08c      	sub	sp, #48	; 0x30
 8005e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e92:	f107 0320 	add.w	r3, r7, #32
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	605a      	str	r2, [r3, #4]
 8005e9c:	609a      	str	r2, [r3, #8]
 8005e9e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ea0:	1d3b      	adds	r3, r7, #4
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	605a      	str	r2, [r3, #4]
 8005ea8:	609a      	str	r2, [r3, #8]
 8005eaa:	60da      	str	r2, [r3, #12]
 8005eac:	611a      	str	r2, [r3, #16]
 8005eae:	615a      	str	r2, [r3, #20]
 8005eb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8005eb2:	4b37      	ldr	r3, [pc, #220]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005eb4:	4a37      	ldr	r2, [pc, #220]	; (8005f94 <_ZL12MX_TIM9_Initv+0x108>)
 8005eb6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 554-1;
 8005eb8:	4b35      	ldr	r3, [pc, #212]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005eba:	f240 2229 	movw	r2, #553	; 0x229
 8005ebe:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ec0:	4b33      	ldr	r3, [pc, #204]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 256-1;
 8005ec6:	4b32      	ldr	r3, [pc, #200]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005ec8:	22ff      	movs	r2, #255	; 0xff
 8005eca:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ecc:	4b30      	ldr	r3, [pc, #192]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ed2:	4b2f      	ldr	r3, [pc, #188]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005ed8:	482d      	ldr	r0, [pc, #180]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005eda:	f005 fa71 	bl	800b3c0 <HAL_TIM_Base_Init>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bf14      	ite	ne
 8005ee4:	2301      	movne	r3, #1
 8005ee6:	2300      	moveq	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <_ZL12MX_TIM9_Initv+0x66>
  {
    Error_Handler();
 8005eee:	f001 fb53 	bl	8007598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ef6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005ef8:	f107 0320 	add.w	r3, r7, #32
 8005efc:	4619      	mov	r1, r3
 8005efe:	4824      	ldr	r0, [pc, #144]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005f00:	f005 fe6e 	bl	800bbe0 <HAL_TIM_ConfigClockSource>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bf14      	ite	ne
 8005f0a:	2301      	movne	r3, #1
 8005f0c:	2300      	moveq	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <_ZL12MX_TIM9_Initv+0x8c>
  {
    Error_Handler();
 8005f14:	f001 fb40 	bl	8007598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8005f18:	481d      	ldr	r0, [pc, #116]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005f1a:	f005 faef 	bl	800b4fc <HAL_TIM_PWM_Init>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf14      	ite	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	2300      	moveq	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <_ZL12MX_TIM9_Initv+0xa6>
  {
    Error_Handler();
 8005f2e:	f001 fb33 	bl	8007598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f32:	2360      	movs	r3, #96	; 0x60
 8005f34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f42:	1d3b      	adds	r3, r7, #4
 8005f44:	2200      	movs	r2, #0
 8005f46:	4619      	mov	r1, r3
 8005f48:	4811      	ldr	r0, [pc, #68]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005f4a:	f005 fd83 	bl	800ba54 <HAL_TIM_PWM_ConfigChannel>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <_ZL12MX_TIM9_Initv+0xd6>
  {
    Error_Handler();
 8005f5e:	f001 fb1b 	bl	8007598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	2204      	movs	r2, #4
 8005f66:	4619      	mov	r1, r3
 8005f68:	4809      	ldr	r0, [pc, #36]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005f6a:	f005 fd73 	bl	800ba54 <HAL_TIM_PWM_ConfigChannel>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bf14      	ite	ne
 8005f74:	2301      	movne	r3, #1
 8005f76:	2300      	moveq	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <_ZL12MX_TIM9_Initv+0xf6>
  {
    Error_Handler();
 8005f7e:	f001 fb0b 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8005f82:	4803      	ldr	r0, [pc, #12]	; (8005f90 <_ZL12MX_TIM9_Initv+0x104>)
 8005f84:	f001 fe32 	bl	8007bec <HAL_TIM_MspPostInit>

}
 8005f88:	bf00      	nop
 8005f8a:	3730      	adds	r7, #48	; 0x30
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	200002d4 	.word	0x200002d4
 8005f94:	40014000 	.word	0x40014000

08005f98 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <_ZL13MX_TIM10_Initv+0x4c>)
 8005f9e:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <_ZL13MX_TIM10_Initv+0x50>)
 8005fa0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999-1;
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <_ZL13MX_TIM10_Initv+0x4c>)
 8005fa4:	f242 720e 	movw	r2, #9998	; 0x270e
 8005fa8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <_ZL13MX_TIM10_Initv+0x4c>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 7199-1;
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <_ZL13MX_TIM10_Initv+0x4c>)
 8005fb2:	f641 421e 	movw	r2, #7198	; 0x1c1e
 8005fb6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <_ZL13MX_TIM10_Initv+0x4c>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fbe:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <_ZL13MX_TIM10_Initv+0x4c>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005fc4:	4807      	ldr	r0, [pc, #28]	; (8005fe4 <_ZL13MX_TIM10_Initv+0x4c>)
 8005fc6:	f005 f9fb 	bl	800b3c0 <HAL_TIM_Base_Init>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	bf14      	ite	ne
 8005fd0:	2301      	movne	r3, #1
 8005fd2:	2300      	moveq	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <_ZL13MX_TIM10_Initv+0x46>
  {
    Error_Handler();
 8005fda:	f001 fadd 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005fde:	bf00      	nop
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000314 	.word	0x20000314
 8005fe8:	40014400 	.word	0x40014400

08005fec <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005ff0:	4b10      	ldr	r3, [pc, #64]	; (8006034 <_ZL13MX_TIM11_Initv+0x48>)
 8005ff2:	4a11      	ldr	r2, [pc, #68]	; (8006038 <_ZL13MX_TIM11_Initv+0x4c>)
 8005ff4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 72-1;
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <_ZL13MX_TIM11_Initv+0x48>)
 8005ff8:	2247      	movs	r2, #71	; 0x47
 8005ffa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ffc:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <_ZL13MX_TIM11_Initv+0x48>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0xffff-1;
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <_ZL13MX_TIM11_Initv+0x48>)
 8006004:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006008:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <_ZL13MX_TIM11_Initv+0x48>)
 800600c:	2200      	movs	r2, #0
 800600e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006010:	4b08      	ldr	r3, [pc, #32]	; (8006034 <_ZL13MX_TIM11_Initv+0x48>)
 8006012:	2200      	movs	r2, #0
 8006014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006016:	4807      	ldr	r0, [pc, #28]	; (8006034 <_ZL13MX_TIM11_Initv+0x48>)
 8006018:	f005 f9d2 	bl	800b3c0 <HAL_TIM_Base_Init>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	bf14      	ite	ne
 8006022:	2301      	movne	r3, #1
 8006024:	2300      	moveq	r3, #0
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 800602c:	f001 fab4 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8006030:	bf00      	nop
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000354 	.word	0x20000354
 8006038:	40014800 	.word	0x40014800

0800603c <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006042:	463b      	mov	r3, r7
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	609a      	str	r2, [r3, #8]
 800604c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800604e:	4b1b      	ldr	r3, [pc, #108]	; (80060bc <_ZL13MX_TIM12_Initv+0x80>)
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <_ZL13MX_TIM12_Initv+0x84>)
 8006052:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 72-1;
 8006054:	4b19      	ldr	r3, [pc, #100]	; (80060bc <_ZL13MX_TIM12_Initv+0x80>)
 8006056:	2247      	movs	r2, #71	; 0x47
 8006058:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800605a:	4b18      	ldr	r3, [pc, #96]	; (80060bc <_ZL13MX_TIM12_Initv+0x80>)
 800605c:	2200      	movs	r2, #0
 800605e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0xffff-1;
 8006060:	4b16      	ldr	r3, [pc, #88]	; (80060bc <_ZL13MX_TIM12_Initv+0x80>)
 8006062:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006066:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006068:	4b14      	ldr	r3, [pc, #80]	; (80060bc <_ZL13MX_TIM12_Initv+0x80>)
 800606a:	2200      	movs	r2, #0
 800606c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800606e:	4b13      	ldr	r3, [pc, #76]	; (80060bc <_ZL13MX_TIM12_Initv+0x80>)
 8006070:	2200      	movs	r2, #0
 8006072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8006074:	4811      	ldr	r0, [pc, #68]	; (80060bc <_ZL13MX_TIM12_Initv+0x80>)
 8006076:	f005 f9a3 	bl	800b3c0 <HAL_TIM_Base_Init>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	bf14      	ite	ne
 8006080:	2301      	movne	r3, #1
 8006082:	2300      	moveq	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <_ZL13MX_TIM12_Initv+0x52>
  {
    Error_Handler();
 800608a:	f001 fa85 	bl	8007598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800608e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006092:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8006094:	463b      	mov	r3, r7
 8006096:	4619      	mov	r1, r3
 8006098:	4808      	ldr	r0, [pc, #32]	; (80060bc <_ZL13MX_TIM12_Initv+0x80>)
 800609a:	f005 fda1 	bl	800bbe0 <HAL_TIM_ConfigClockSource>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf14      	ite	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	2300      	moveq	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 80060ae:	f001 fa73 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000394 	.word	0x20000394
 80060c0:	40001800 	.word	0x40001800

080060c4 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80060c8:	4b11      	ldr	r3, [pc, #68]	; (8006110 <_ZL13MX_TIM13_Initv+0x4c>)
 80060ca:	4a12      	ldr	r2, [pc, #72]	; (8006114 <_ZL13MX_TIM13_Initv+0x50>)
 80060cc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 9999-1;
 80060ce:	4b10      	ldr	r3, [pc, #64]	; (8006110 <_ZL13MX_TIM13_Initv+0x4c>)
 80060d0:	f242 720e 	movw	r2, #9998	; 0x270e
 80060d4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060d6:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <_ZL13MX_TIM13_Initv+0x4c>)
 80060d8:	2200      	movs	r2, #0
 80060da:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1439-1;
 80060dc:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <_ZL13MX_TIM13_Initv+0x4c>)
 80060de:	f240 529e 	movw	r2, #1438	; 0x59e
 80060e2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <_ZL13MX_TIM13_Initv+0x4c>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060ea:	4b09      	ldr	r3, [pc, #36]	; (8006110 <_ZL13MX_TIM13_Initv+0x4c>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80060f0:	4807      	ldr	r0, [pc, #28]	; (8006110 <_ZL13MX_TIM13_Initv+0x4c>)
 80060f2:	f005 f965 	bl	800b3c0 <HAL_TIM_Base_Init>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bf14      	ite	ne
 80060fc:	2301      	movne	r3, #1
 80060fe:	2300      	moveq	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <_ZL13MX_TIM13_Initv+0x46>
  {
    Error_Handler();
 8006106:	f001 fa47 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800610a:	bf00      	nop
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	200003d4 	.word	0x200003d4
 8006114:	40001c00 	.word	0x40001c00

08006118 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800611c:	4b11      	ldr	r3, [pc, #68]	; (8006164 <_ZL13MX_TIM14_Initv+0x4c>)
 800611e:	4a12      	ldr	r2, [pc, #72]	; (8006168 <_ZL13MX_TIM14_Initv+0x50>)
 8006120:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 720-1;
 8006122:	4b10      	ldr	r3, [pc, #64]	; (8006164 <_ZL13MX_TIM14_Initv+0x4c>)
 8006124:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006128:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800612a:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <_ZL13MX_TIM14_Initv+0x4c>)
 800612c:	2200      	movs	r2, #0
 800612e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8006130:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <_ZL13MX_TIM14_Initv+0x4c>)
 8006132:	f242 720f 	movw	r2, #9999	; 0x270f
 8006136:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <_ZL13MX_TIM14_Initv+0x4c>)
 800613a:	2200      	movs	r2, #0
 800613c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800613e:	4b09      	ldr	r3, [pc, #36]	; (8006164 <_ZL13MX_TIM14_Initv+0x4c>)
 8006140:	2200      	movs	r2, #0
 8006142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8006144:	4807      	ldr	r0, [pc, #28]	; (8006164 <_ZL13MX_TIM14_Initv+0x4c>)
 8006146:	f005 f93b 	bl	800b3c0 <HAL_TIM_Base_Init>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	bf14      	ite	ne
 8006150:	2301      	movne	r3, #1
 8006152:	2300      	moveq	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 800615a:	f001 fa1d 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000414 	.word	0x20000414
 8006168:	40002000 	.word	0x40002000

0800616c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006170:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006172:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8006174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006176:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800617c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800617e:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006180:	2200      	movs	r2, #0
 8006182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006186:	2200      	movs	r2, #0
 8006188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800618a:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800618c:	2200      	movs	r2, #0
 800618e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006192:	220c      	movs	r2, #12
 8006194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006196:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006198:	2200      	movs	r2, #0
 800619a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800619c:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800619e:	2200      	movs	r2, #0
 80061a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80061a2:	4807      	ldr	r0, [pc, #28]	; (80061c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80061a4:	f006 fb52 	bl	800c84c <HAL_UART_Init>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bf14      	ite	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	2300      	moveq	r3, #0
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80061b8:	f001 f9ee 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80061bc:	bf00      	nop
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000454 	.word	0x20000454
 80061c4:	40004400 	.word	0x40004400

080061c8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80061cc:	4b13      	ldr	r3, [pc, #76]	; (800621c <_ZL19MX_USART3_UART_Initv+0x54>)
 80061ce:	4a14      	ldr	r2, [pc, #80]	; (8006220 <_ZL19MX_USART3_UART_Initv+0x58>)
 80061d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80061d2:	4b12      	ldr	r3, [pc, #72]	; (800621c <_ZL19MX_USART3_UART_Initv+0x54>)
 80061d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80061d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80061da:	4b10      	ldr	r3, [pc, #64]	; (800621c <_ZL19MX_USART3_UART_Initv+0x54>)
 80061dc:	2200      	movs	r2, #0
 80061de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80061e0:	4b0e      	ldr	r3, [pc, #56]	; (800621c <_ZL19MX_USART3_UART_Initv+0x54>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80061e6:	4b0d      	ldr	r3, [pc, #52]	; (800621c <_ZL19MX_USART3_UART_Initv+0x54>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <_ZL19MX_USART3_UART_Initv+0x54>)
 80061ee:	220c      	movs	r2, #12
 80061f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061f2:	4b0a      	ldr	r3, [pc, #40]	; (800621c <_ZL19MX_USART3_UART_Initv+0x54>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80061f8:	4b08      	ldr	r3, [pc, #32]	; (800621c <_ZL19MX_USART3_UART_Initv+0x54>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80061fe:	4807      	ldr	r0, [pc, #28]	; (800621c <_ZL19MX_USART3_UART_Initv+0x54>)
 8006200:	f006 fb24 	bl	800c84c <HAL_UART_Init>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8006214:	f001 f9c0 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006218:	bf00      	nop
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000494 	.word	0x20000494
 8006220:	40004800 	.word	0x40004800

08006224 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006228:	4b13      	ldr	r3, [pc, #76]	; (8006278 <_ZL19MX_USART6_UART_Initv+0x54>)
 800622a:	4a14      	ldr	r2, [pc, #80]	; (800627c <_ZL19MX_USART6_UART_Initv+0x58>)
 800622c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800622e:	4b12      	ldr	r3, [pc, #72]	; (8006278 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006230:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006234:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006236:	4b10      	ldr	r3, [pc, #64]	; (8006278 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006238:	2200      	movs	r2, #0
 800623a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800623c:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <_ZL19MX_USART6_UART_Initv+0x54>)
 800623e:	2200      	movs	r2, #0
 8006240:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006244:	2200      	movs	r2, #0
 8006246:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006248:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <_ZL19MX_USART6_UART_Initv+0x54>)
 800624a:	220c      	movs	r2, #12
 800624c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006250:	2200      	movs	r2, #0
 8006252:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006254:	4b08      	ldr	r3, [pc, #32]	; (8006278 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006256:	2200      	movs	r2, #0
 8006258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800625a:	4807      	ldr	r0, [pc, #28]	; (8006278 <_ZL19MX_USART6_UART_Initv+0x54>)
 800625c:	f006 faf6 	bl	800c84c <HAL_UART_Init>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	bf14      	ite	ne
 8006266:	2301      	movne	r3, #1
 8006268:	2300      	moveq	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8006270:	f001 f992 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006274:	bf00      	nop
 8006276:	bd80      	pop	{r7, pc}
 8006278:	200004d4 	.word	0x200004d4
 800627c:	40011400 	.word	0x40011400

08006280 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006284:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8006286:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800628a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800628c:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800628e:	2204      	movs	r2, #4
 8006290:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006292:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8006294:	2202      	movs	r2, #2
 8006296:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006298:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800629a:	2200      	movs	r2, #0
 800629c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800629e:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80062a0:	2202      	movs	r2, #2
 80062a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80062aa:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80062b0:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80062bc:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80062c2:	4807      	ldr	r0, [pc, #28]	; (80062e0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80062c4:	f004 fafc 	bl	800a8c0 <HAL_PCD_Init>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bf14      	ite	ne
 80062ce:	2301      	movne	r3, #1
 80062d0:	2300      	moveq	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 80062d8:	f001 f95e 	bl	8007598 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80062dc:	bf00      	nop
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	200005d4 	.word	0x200005d4

080062e4 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]
 80062ee:	4b1b      	ldr	r3, [pc, #108]	; (800635c <_ZL11MX_DMA_Initv+0x78>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	4a1a      	ldr	r2, [pc, #104]	; (800635c <_ZL11MX_DMA_Initv+0x78>)
 80062f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062f8:	6313      	str	r3, [r2, #48]	; 0x30
 80062fa:	4b18      	ldr	r3, [pc, #96]	; (800635c <_ZL11MX_DMA_Initv+0x78>)
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006302:	607b      	str	r3, [r7, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006306:	2300      	movs	r3, #0
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	4b14      	ldr	r3, [pc, #80]	; (800635c <_ZL11MX_DMA_Initv+0x78>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	4a13      	ldr	r2, [pc, #76]	; (800635c <_ZL11MX_DMA_Initv+0x78>)
 8006310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006314:	6313      	str	r3, [r2, #48]	; 0x30
 8006316:	4b11      	ldr	r3, [pc, #68]	; (800635c <_ZL11MX_DMA_Initv+0x78>)
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8006322:	2200      	movs	r2, #0
 8006324:	2100      	movs	r1, #0
 8006326:	2010      	movs	r0, #16
 8006328:	f002 fcc7 	bl	8008cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800632c:	2010      	movs	r0, #16
 800632e:	f002 fce0 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006332:	2200      	movs	r2, #0
 8006334:	2100      	movs	r1, #0
 8006336:	2038      	movs	r0, #56	; 0x38
 8006338:	f002 fcbf 	bl	8008cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800633c:	2038      	movs	r0, #56	; 0x38
 800633e:	f002 fcd8 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8006342:	2200      	movs	r2, #0
 8006344:	2100      	movs	r1, #0
 8006346:	2039      	movs	r0, #57	; 0x39
 8006348:	f002 fcb7 	bl	8008cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800634c:	2039      	movs	r0, #57	; 0x39
 800634e:	f002 fcd0 	bl	8008cf2 <HAL_NVIC_EnableIRQ>

}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40023800 	.word	0x40023800

08006360 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08e      	sub	sp, #56	; 0x38
 8006364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	605a      	str	r2, [r3, #4]
 8006370:	609a      	str	r2, [r3, #8]
 8006372:	60da      	str	r2, [r3, #12]
 8006374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006376:	2300      	movs	r3, #0
 8006378:	623b      	str	r3, [r7, #32]
 800637a:	4b9b      	ldr	r3, [pc, #620]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	4a9a      	ldr	r2, [pc, #616]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 8006380:	f043 0310 	orr.w	r3, r3, #16
 8006384:	6313      	str	r3, [r2, #48]	; 0x30
 8006386:	4b98      	ldr	r3, [pc, #608]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	623b      	str	r3, [r7, #32]
 8006390:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	4b94      	ldr	r3, [pc, #592]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	4a93      	ldr	r2, [pc, #588]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 800639c:	f043 0304 	orr.w	r3, r3, #4
 80063a0:	6313      	str	r3, [r2, #48]	; 0x30
 80063a2:	4b91      	ldr	r3, [pc, #580]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80063ae:	2300      	movs	r3, #0
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	4b8d      	ldr	r3, [pc, #564]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	4a8c      	ldr	r2, [pc, #560]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 80063b8:	f043 0320 	orr.w	r3, r3, #32
 80063bc:	6313      	str	r3, [r2, #48]	; 0x30
 80063be:	4b8a      	ldr	r3, [pc, #552]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	4b86      	ldr	r3, [pc, #536]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	4a85      	ldr	r2, [pc, #532]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 80063d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d8:	6313      	str	r3, [r2, #48]	; 0x30
 80063da:	4b83      	ldr	r3, [pc, #524]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 80063dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	4b7f      	ldr	r3, [pc, #508]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	4a7e      	ldr	r2, [pc, #504]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	6313      	str	r3, [r2, #48]	; 0x30
 80063f6:	4b7c      	ldr	r3, [pc, #496]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	4b78      	ldr	r3, [pc, #480]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 8006408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640a:	4a77      	ldr	r2, [pc, #476]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	6313      	str	r3, [r2, #48]	; 0x30
 8006412:	4b75      	ldr	r3, [pc, #468]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800641e:	2300      	movs	r3, #0
 8006420:	60bb      	str	r3, [r7, #8]
 8006422:	4b71      	ldr	r3, [pc, #452]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 8006424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006426:	4a70      	ldr	r2, [pc, #448]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 8006428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800642c:	6313      	str	r3, [r2, #48]	; 0x30
 800642e:	4b6e      	ldr	r3, [pc, #440]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	60bb      	str	r3, [r7, #8]
 8006438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800643a:	2300      	movs	r3, #0
 800643c:	607b      	str	r3, [r7, #4]
 800643e:	4b6a      	ldr	r3, [pc, #424]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 8006440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006442:	4a69      	ldr	r2, [pc, #420]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 8006444:	f043 0308 	orr.w	r3, r3, #8
 8006448:	6313      	str	r3, [r2, #48]	; 0x30
 800644a:	4b67      	ldr	r3, [pc, #412]	; (80065e8 <_ZL12MX_GPIO_Initv+0x288>)
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	607b      	str	r3, [r7, #4]
 8006454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|lefttrig_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8006456:	2200      	movs	r2, #0
 8006458:	f244 0185 	movw	r1, #16517	; 0x4085
 800645c:	4863      	ldr	r0, [pc, #396]	; (80065ec <_ZL12MX_GPIO_Initv+0x28c>)
 800645e:	f003 f9b5 	bl	80097cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, temphumsens_Pin|GPIO_PIN_0, GPIO_PIN_RESET);
 8006462:	2200      	movs	r2, #0
 8006464:	f240 1101 	movw	r1, #257	; 0x101
 8006468:	4861      	ldr	r0, [pc, #388]	; (80065f0 <_ZL12MX_GPIO_Initv+0x290>)
 800646a:	f003 f9af 	bl	80097cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|righttrig_Pin|GPIO_PIN_10|GPIO_PIN_11 
 800646e:	2200      	movs	r2, #0
 8006470:	f64a 5140 	movw	r1, #44352	; 0xad40
 8006474:	485f      	ldr	r0, [pc, #380]	; (80065f4 <_ZL12MX_GPIO_Initv+0x294>)
 8006476:	f003 f9a9 	bl	80097cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800647a:	2200      	movs	r2, #0
 800647c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006480:	485d      	ldr	r0, [pc, #372]	; (80065f8 <_ZL12MX_GPIO_Initv+0x298>)
 8006482:	f003 f9a3 	bl	80097cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8006486:	2200      	movs	r2, #0
 8006488:	2102      	movs	r1, #2
 800648a:	485c      	ldr	r0, [pc, #368]	; (80065fc <_ZL12MX_GPIO_Initv+0x29c>)
 800648c:	f003 f99e 	bl	80097cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8006490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006496:	4b5a      	ldr	r3, [pc, #360]	; (8006600 <_ZL12MX_GPIO_Initv+0x2a0>)
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649a:	2300      	movs	r3, #0
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800649e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a2:	4619      	mov	r1, r3
 80064a4:	4854      	ldr	r0, [pc, #336]	; (80065f8 <_ZL12MX_GPIO_Initv+0x298>)
 80064a6:	f002 ffcf 	bl	8009448 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80064aa:	2332      	movs	r3, #50	; 0x32
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ae:	2302      	movs	r3, #2
 80064b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064b6:	2303      	movs	r3, #3
 80064b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064ba:	230b      	movs	r3, #11
 80064bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064c2:	4619      	mov	r1, r3
 80064c4:	484c      	ldr	r0, [pc, #304]	; (80065f8 <_ZL12MX_GPIO_Initv+0x298>)
 80064c6:	f002 ffbf 	bl	8009448 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80064ca:	2386      	movs	r3, #134	; 0x86
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ce:	2302      	movs	r3, #2
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064d6:	2303      	movs	r3, #3
 80064d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064da:	230b      	movs	r3, #11
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064e2:	4619      	mov	r1, r3
 80064e4:	4847      	ldr	r0, [pc, #284]	; (8006604 <_ZL12MX_GPIO_Initv+0x2a4>)
 80064e6:	f002 ffaf 	bl	8009448 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin lefttrig_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|lefttrig_Pin|LD3_Pin|LD2_Pin;
 80064ea:	f244 0385 	movw	r3, #16517	; 0x4085
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064f0:	2301      	movs	r3, #1
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064f8:	2300      	movs	r3, #0
 80064fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006500:	4619      	mov	r1, r3
 8006502:	483a      	ldr	r0, [pc, #232]	; (80065ec <_ZL12MX_GPIO_Initv+0x28c>)
 8006504:	f002 ffa0 	bl	8009448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006508:	2301      	movs	r3, #1
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800650c:	4b3c      	ldr	r3, [pc, #240]	; (8006600 <_ZL12MX_GPIO_Initv+0x2a0>)
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006510:	2300      	movs	r3, #0
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006518:	4619      	mov	r1, r3
 800651a:	4836      	ldr	r0, [pc, #216]	; (80065f4 <_ZL12MX_GPIO_Initv+0x294>)
 800651c:	f002 ff94 	bl	8009448 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006526:	2302      	movs	r3, #2
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652a:	2300      	movs	r3, #0
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800652e:	2303      	movs	r3, #3
 8006530:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006532:	230b      	movs	r3, #11
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800653a:	4619      	mov	r1, r3
 800653c:	482b      	ldr	r0, [pc, #172]	; (80065ec <_ZL12MX_GPIO_Initv+0x28c>)
 800653e:	f002 ff83 	bl	8009448 <HAL_GPIO_Init>

  /*Configure GPIO pins : temphumsens_Pin PD0 */
  GPIO_InitStruct.Pin = temphumsens_Pin|GPIO_PIN_0;
 8006542:	f240 1301 	movw	r3, #257	; 0x101
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006548:	2301      	movs	r3, #1
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654c:	2300      	movs	r3, #0
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006550:	2300      	movs	r3, #0
 8006552:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006558:	4619      	mov	r1, r3
 800655a:	4825      	ldr	r0, [pc, #148]	; (80065f0 <_ZL12MX_GPIO_Initv+0x290>)
 800655c:	f002 ff74 	bl	8009448 <HAL_GPIO_Init>

  /*Configure GPIO pins : mz80sl_Pin mz80fl_Pin mz80sr_Pin mz80fr_Pin 
                           USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = mz80sl_Pin|mz80fl_Pin|mz80sr_Pin|mz80fr_Pin 
 8006560:	23bc      	movs	r3, #188	; 0xbc
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
                          |USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006564:	2300      	movs	r3, #0
 8006566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006568:	2300      	movs	r3, #0
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800656c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006570:	4619      	mov	r1, r3
 8006572:	4820      	ldr	r0, [pc, #128]	; (80065f4 <_ZL12MX_GPIO_Initv+0x294>)
 8006574:	f002 ff68 	bl	8009448 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin righttrig_Pin PG10 PG11 
                           PG13 PG15 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|righttrig_Pin|GPIO_PIN_10|GPIO_PIN_11 
 8006578:	f64a 5340 	movw	r3, #44352	; 0xad40
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800657e:	2301      	movs	r3, #1
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006582:	2300      	movs	r3, #0
 8006584:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006586:	2300      	movs	r3, #0
 8006588:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800658a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800658e:	4619      	mov	r1, r3
 8006590:	4818      	ldr	r0, [pc, #96]	; (80065f4 <_ZL12MX_GPIO_Initv+0x294>)
 8006592:	f002 ff59 	bl	8009448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800659c:	2301      	movs	r3, #1
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065a4:	2300      	movs	r3, #0
 80065a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065ac:	4619      	mov	r1, r3
 80065ae:	4812      	ldr	r0, [pc, #72]	; (80065f8 <_ZL12MX_GPIO_Initv+0x298>)
 80065b0:	f002 ff4a 	bl	8009448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80065b4:	2302      	movs	r3, #2
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065b8:	2301      	movs	r3, #1
 80065ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065c0:	2300      	movs	r3, #0
 80065c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c8:	4619      	mov	r1, r3
 80065ca:	480c      	ldr	r0, [pc, #48]	; (80065fc <_ZL12MX_GPIO_Initv+0x29c>)
 80065cc:	f002 ff3c 	bl	8009448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80065d0:	2200      	movs	r2, #0
 80065d2:	2100      	movs	r1, #0
 80065d4:	2006      	movs	r0, #6
 80065d6:	f002 fb70 	bl	8008cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80065da:	2006      	movs	r0, #6
 80065dc:	f002 fb89 	bl	8008cf2 <HAL_NVIC_EnableIRQ>

}
 80065e0:	bf00      	nop
 80065e2:	3738      	adds	r7, #56	; 0x38
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40023800 	.word	0x40023800
 80065ec:	40020400 	.word	0x40020400
 80065f0:	40020c00 	.word	0x40020c00
 80065f4:	40021800 	.word	0x40021800
 80065f8:	40020800 	.word	0x40020800
 80065fc:	40021000 	.word	0x40021000
 8006600:	10110000 	.word	0x10110000
 8006604:	40020000 	.word	0x40020000

08006608 <_Z10set_outputv>:

/* USER CODE BEGIN 4 */
void set_output(){
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef DHT11_DATA={0};
 800660e:	1d3b      	adds	r3, r7, #4
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	605a      	str	r2, [r3, #4]
 8006616:	609a      	str	r2, [r3, #8]
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	611a      	str	r2, [r3, #16]

	DHT11_DATA.Pin= temphumsens_Pin;
 800661c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006620:	607b      	str	r3, [r7, #4]
	DHT11_DATA.Mode=GPIO_MODE_OUTPUT_PP;
 8006622:	2301      	movs	r3, #1
 8006624:	60bb      	str	r3, [r7, #8]
	DHT11_DATA.Pull=GPIO_NOPULL;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(temphumsens_GPIO_Port,&DHT11_DATA);
 800662e:	1d3b      	adds	r3, r7, #4
 8006630:	4619      	mov	r1, r3
 8006632:	4803      	ldr	r0, [pc, #12]	; (8006640 <_Z10set_outputv+0x38>)
 8006634:	f002 ff08 	bl	8009448 <HAL_GPIO_Init>
}
 8006638:	bf00      	nop
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40020c00 	.word	0x40020c00

08006644 <_Z9set_inputv>:
void set_input(){
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef DHT11_DATA={0};
 800664a:	1d3b      	adds	r3, r7, #4
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	609a      	str	r2, [r3, #8]
 8006654:	60da      	str	r2, [r3, #12]
 8006656:	611a      	str	r2, [r3, #16]

	DHT11_DATA.Pin= temphumsens_Pin;
 8006658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800665c:	607b      	str	r3, [r7, #4]
	DHT11_DATA.Mode=GPIO_MODE_INPUT;
 800665e:	2300      	movs	r3, #0
 8006660:	60bb      	str	r3, [r7, #8]
	DHT11_DATA.Pull=GPIO_NOPULL;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 8006666:	2300      	movs	r3, #0
 8006668:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(temphumsens_GPIO_Port,&DHT11_DATA);
 800666a:	1d3b      	adds	r3, r7, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4803      	ldr	r0, [pc, #12]	; (800667c <_Z9set_inputv+0x38>)
 8006670:	f002 feea 	bl	8009448 <HAL_GPIO_Init>
}
 8006674:	bf00      	nop
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	40020c00 	.word	0x40020c00

08006680 <_Z6delay2t>:

void delay2(uint16_t time){
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim11,0);
 800668a:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <_Z6delay2t+0x38>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2200      	movs	r2, #0
 8006690:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < time );
 8006692:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <_Z6delay2t+0x38>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	429a      	cmp	r2, r3
 800669c:	bf34      	ite	cc
 800669e:	2301      	movcc	r3, #1
 80066a0:	2300      	movcs	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d000      	beq.n	80066aa <_Z6delay2t+0x2a>
 80066a8:	e7f3      	b.n	8006692 <_Z6delay2t+0x12>
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20000354 	.word	0x20000354

080066bc <_Z5delayt>:

void delay(uint16_t time){
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 80066c6:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <_Z5delayt+0x38>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2200      	movs	r2, #0
 80066cc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim12) < time );
 80066ce:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <_Z5delayt+0x38>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066d4:	88fb      	ldrh	r3, [r7, #6]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	bf34      	ite	cc
 80066da:	2301      	movcc	r3, #1
 80066dc:	2300      	movcs	r3, #0
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d000      	beq.n	80066e6 <_Z5delayt+0x2a>
 80066e4:	e7f3      	b.n	80066ce <_Z5delayt+0x12>
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000394 	.word	0x20000394

080066f8 <_Z11HCSR04_Readv>:

void HCSR04_Read (){
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);  // pull the TRIG pin low
			__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
			break;
	}
	*/
	HAL_GPIO_WritePin(GPIOB, lefttrig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80066fc:	2201      	movs	r2, #1
 80066fe:	2104      	movs	r1, #4
 8006700:	4814      	ldr	r0, [pc, #80]	; (8006754 <_Z11HCSR04_Readv+0x5c>)
 8006702:	f003 f863 	bl	80097cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, righttrig_Pin, GPIO_PIN_SET);
 8006706:	2201      	movs	r2, #1
 8006708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800670c:	4812      	ldr	r0, [pc, #72]	; (8006758 <_Z11HCSR04_Readv+0x60>)
 800670e:	f003 f85d 	bl	80097cc <HAL_GPIO_WritePin>
	delay(20);  // wait for 10 us
 8006712:	2014      	movs	r0, #20
 8006714:	f7ff ffd2 	bl	80066bc <_Z5delayt>
	HAL_GPIO_WritePin(GPIOB, lefttrig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8006718:	2200      	movs	r2, #0
 800671a:	2104      	movs	r1, #4
 800671c:	480d      	ldr	r0, [pc, #52]	; (8006754 <_Z11HCSR04_Readv+0x5c>)
 800671e:	f003 f855 	bl	80097cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, righttrig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8006722:	2200      	movs	r2, #0
 8006724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006728:	480b      	ldr	r0, [pc, #44]	; (8006758 <_Z11HCSR04_Readv+0x60>)
 800672a:	f003 f84f 	bl	80097cc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_CC1 );
 800672e:	4b0b      	ldr	r3, [pc, #44]	; (800675c <_Z11HCSR04_Readv+0x64>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	4b09      	ldr	r3, [pc, #36]	; (800675c <_Z11HCSR04_Readv+0x64>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0202 	orr.w	r2, r2, #2
 800673c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC4 );
 800673e:	4b08      	ldr	r3, [pc, #32]	; (8006760 <_Z11HCSR04_Readv+0x68>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	4b06      	ldr	r3, [pc, #24]	; (8006760 <_Z11HCSR04_Readv+0x68>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0210 	orr.w	r2, r2, #16
 800674c:	60da      	str	r2, [r3, #12]

}
 800674e:	bf00      	nop
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40020400 	.word	0x40020400
 8006758:	40021800 	.word	0x40021800
 800675c:	20000294 	.word	0x20000294
 8006760:	20000254 	.word	0x20000254

08006764 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af02      	add	r7, sp, #8
 800676a:	6078      	str	r0, [r7, #4]
	adcval[0] = buffer[0];
 800676c:	4b18      	ldr	r3, [pc, #96]	; (80067d0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800676e:	881a      	ldrh	r2, [r3, #0]
 8006770:	4b18      	ldr	r3, [pc, #96]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 8006772:	801a      	strh	r2, [r3, #0]
	adcval[1] = buffer[1];
 8006774:	4b16      	ldr	r3, [pc, #88]	; (80067d0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8006776:	885a      	ldrh	r2, [r3, #2]
 8006778:	4b16      	ldr	r3, [pc, #88]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 800677a:	805a      	strh	r2, [r3, #2]
	adcval[2] = buffer[2];
 800677c:	4b14      	ldr	r3, [pc, #80]	; (80067d0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800677e:	889a      	ldrh	r2, [r3, #4]
 8006780:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 8006782:	809a      	strh	r2, [r3, #4]
	adcval[3] = buffer[3];
 8006784:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8006786:	88da      	ldrh	r2, [r3, #6]
 8006788:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 800678a:	80da      	strh	r2, [r3, #6]
	adcval[4] = buffer[4];
 800678c:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800678e:	891a      	ldrh	r2, [r3, #8]
 8006790:	4b10      	ldr	r3, [pc, #64]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 8006792:	811a      	strh	r2, [r3, #8]
	adcval[5] = buffer[5];
 8006794:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8006796:	895a      	ldrh	r2, [r3, #10]
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 800679a:	815a      	strh	r2, [r3, #10]
	adcval[6] = buffer[6];
 800679c:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800679e:	899a      	ldrh	r2, [r3, #12]
 80067a0:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 80067a2:	819a      	strh	r2, [r3, #12]
	adcval[7] = buffer[7];
 80067a4:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <HAL_ADC_ConvCpltCallback+0x6c>)
 80067a6:	89da      	ldrh	r2, [r3, #14]
 80067a8:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 80067aa:	81da      	strh	r2, [r3, #14]
	//set_panels(uint16_t tl , uint16_t tr , uint16_t bl , uint16_t br );
	tracker.set_panels(adcval[4] , adcval[3] , adcval[5] , adcval[6] );
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 80067ae:	8919      	ldrh	r1, [r3, #8]
 80067b0:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 80067b2:	88da      	ldrh	r2, [r3, #6]
 80067b4:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 80067b6:	8958      	ldrh	r0, [r3, #10]
 80067b8:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x70>)
 80067ba:	899b      	ldrh	r3, [r3, #12]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	4603      	mov	r3, r0
 80067c0:	4805      	ldr	r0, [pc, #20]	; (80067d8 <HAL_ADC_ConvCpltCallback+0x74>)
 80067c2:	f7fb fa86 	bl	8001cd2 <_ZN7Tracker10set_panelsEtttt>
	//Fdistance = 29.988 * pow(buffer[0]*0.003 , -1.173);
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000a64 	.word	0x20000a64
 80067d4:	20000a74 	.word	0x20000a74
 80067d8:	20000ae8 	.word	0x20000ae8
 80067dc:	00000000 	.word	0x00000000

080067e0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80067e0:	b590      	push	{r4, r7, lr}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a8d      	ldr	r2, [pc, #564]	; (8006a20 <HAL_TIM_IC_CaptureCallback+0x240>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d11c      	bne.n	800682a <HAL_TIM_IC_CaptureCallback+0x4a>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 ){
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	7f1b      	ldrb	r3, [r3, #28]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d003      	beq.n	8006800 <HAL_TIM_IC_CaptureCallback+0x20>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	7f1b      	ldrb	r3, [r3, #28]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d105      	bne.n	800680c <HAL_TIM_IC_CaptureCallback+0x2c>
			encoderR+=1;
 8006800:	4b88      	ldr	r3, [pc, #544]	; (8006a24 <HAL_TIM_IC_CaptureCallback+0x244>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3301      	adds	r3, #1
 8006806:	4a87      	ldr	r2, [pc, #540]	; (8006a24 <HAL_TIM_IC_CaptureCallback+0x244>)
 8006808:	6013      	str	r3, [r2, #0]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC4);
			}

		}
	}
}
 800680a:	e18f      	b.n	8006b2c <HAL_TIM_IC_CaptureCallback+0x34c>
		}else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 ){
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7f1b      	ldrb	r3, [r3, #28]
 8006810:	2b04      	cmp	r3, #4
 8006812:	d004      	beq.n	800681e <HAL_TIM_IC_CaptureCallback+0x3e>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	7f1b      	ldrb	r3, [r3, #28]
 8006818:	2b08      	cmp	r3, #8
 800681a:	f040 8187 	bne.w	8006b2c <HAL_TIM_IC_CaptureCallback+0x34c>
			encoderL+=1;
 800681e:	4b82      	ldr	r3, [pc, #520]	; (8006a28 <HAL_TIM_IC_CaptureCallback+0x248>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3301      	adds	r3, #1
 8006824:	4a80      	ldr	r2, [pc, #512]	; (8006a28 <HAL_TIM_IC_CaptureCallback+0x248>)
 8006826:	6013      	str	r3, [r2, #0]
}
 8006828:	e180      	b.n	8006b2c <HAL_TIM_IC_CaptureCallback+0x34c>
	}else if (htim == &htim8){
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a7f      	ldr	r2, [pc, #508]	; (8006a2c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	f040 80a9 	bne.w	8006986 <HAL_TIM_IC_CaptureCallback+0x1a6>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){  // left distance
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	7f1b      	ldrb	r3, [r3, #28]
 8006838:	2b01      	cmp	r3, #1
 800683a:	f040 8177 	bne.w	8006b2c <HAL_TIM_IC_CaptureCallback+0x34c>
			if (Is_First_Captured2==0){
 800683e:	4b7c      	ldr	r3, [pc, #496]	; (8006a30 <HAL_TIM_IC_CaptureCallback+0x250>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d11b      	bne.n	800687e <HAL_TIM_IC_CaptureCallback+0x9e>
				IC_Val12 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f005 fa80 	bl	800bd50 <HAL_TIM_ReadCapturedValue>
 8006850:	4602      	mov	r2, r0
 8006852:	4b78      	ldr	r3, [pc, #480]	; (8006a34 <HAL_TIM_IC_CaptureCallback+0x254>)
 8006854:	601a      	str	r2, [r3, #0]
				Is_First_Captured2 = 1;  // set the first captured as true
 8006856:	4b76      	ldr	r3, [pc, #472]	; (8006a30 <HAL_TIM_IC_CaptureCallback+0x250>)
 8006858:	2201      	movs	r2, #1
 800685a:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a1a      	ldr	r2, [r3, #32]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 020a 	bic.w	r2, r2, #10
 800686a:	621a      	str	r2, [r3, #32]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a1a      	ldr	r2, [r3, #32]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0202 	orr.w	r2, r2, #2
 800687a:	621a      	str	r2, [r3, #32]
}
 800687c:	e156      	b.n	8006b2c <HAL_TIM_IC_CaptureCallback+0x34c>
			}else if (Is_First_Captured2==1){
 800687e:	4b6c      	ldr	r3, [pc, #432]	; (8006a30 <HAL_TIM_IC_CaptureCallback+0x250>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b01      	cmp	r3, #1
 8006884:	f040 8152 	bne.w	8006b2c <HAL_TIM_IC_CaptureCallback+0x34c>
				IC_Val22 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f005 fa5f 	bl	800bd50 <HAL_TIM_ReadCapturedValue>
 8006892:	4602      	mov	r2, r0
 8006894:	4b68      	ldr	r3, [pc, #416]	; (8006a38 <HAL_TIM_IC_CaptureCallback+0x258>)
 8006896:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2200      	movs	r2, #0
 800689e:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val22 > IC_Val12){
 80068a0:	4b65      	ldr	r3, [pc, #404]	; (8006a38 <HAL_TIM_IC_CaptureCallback+0x258>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4b63      	ldr	r3, [pc, #396]	; (8006a34 <HAL_TIM_IC_CaptureCallback+0x254>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d907      	bls.n	80068bc <HAL_TIM_IC_CaptureCallback+0xdc>
					Difference2 = IC_Val22-IC_Val12;
 80068ac:	4b62      	ldr	r3, [pc, #392]	; (8006a38 <HAL_TIM_IC_CaptureCallback+0x258>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	4b60      	ldr	r3, [pc, #384]	; (8006a34 <HAL_TIM_IC_CaptureCallback+0x254>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	4a61      	ldr	r2, [pc, #388]	; (8006a3c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	e00f      	b.n	80068dc <HAL_TIM_IC_CaptureCallback+0xfc>
				}else if (IC_Val12 > IC_Val22){
 80068bc:	4b5d      	ldr	r3, [pc, #372]	; (8006a34 <HAL_TIM_IC_CaptureCallback+0x254>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	4b5d      	ldr	r3, [pc, #372]	; (8006a38 <HAL_TIM_IC_CaptureCallback+0x258>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d909      	bls.n	80068dc <HAL_TIM_IC_CaptureCallback+0xfc>
					Difference2 = (0xffff - IC_Val12) + IC_Val22;
 80068c8:	4b5b      	ldr	r3, [pc, #364]	; (8006a38 <HAL_TIM_IC_CaptureCallback+0x258>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	4b59      	ldr	r3, [pc, #356]	; (8006a34 <HAL_TIM_IC_CaptureCallback+0x254>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80068d6:	33ff      	adds	r3, #255	; 0xff
 80068d8:	4a58      	ldr	r2, [pc, #352]	; (8006a3c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80068da:	6013      	str	r3, [r2, #0]
				Distance2 = Difference2 * .034/2;
 80068dc:	4b57      	ldr	r3, [pc, #348]	; (8006a3c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7f9 fdc7 	bl	8000474 <__aeabi_ui2d>
 80068e6:	a34c      	add	r3, pc, #304	; (adr r3, 8006a18 <HAL_TIM_IC_CaptureCallback+0x238>)
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f7f9 fe3c 	bl	8000568 <__aeabi_dmul>
 80068f0:	4603      	mov	r3, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	4618      	mov	r0, r3
 80068f6:	4621      	mov	r1, r4
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006900:	f7f9 ff5c 	bl	80007bc <__aeabi_ddiv>
 8006904:	4603      	mov	r3, r0
 8006906:	460c      	mov	r4, r1
 8006908:	4618      	mov	r0, r3
 800690a:	4621      	mov	r1, r4
 800690c:	f7fa f904 	bl	8000b18 <__aeabi_d2uiz>
 8006910:	4603      	mov	r3, r0
 8006912:	b2da      	uxtb	r2, r3
 8006914:	4b4a      	ldr	r3, [pc, #296]	; (8006a40 <HAL_TIM_IC_CaptureCallback+0x260>)
 8006916:	701a      	strb	r2, [r3, #0]
				if(mz80L == GPIO_PIN_RESET && Distance2 >= 30){
 8006918:	4b4a      	ldr	r3, [pc, #296]	; (8006a44 <HAL_TIM_IC_CaptureCallback+0x264>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d107      	bne.n	8006930 <HAL_TIM_IC_CaptureCallback+0x150>
 8006920:	4b47      	ldr	r3, [pc, #284]	; (8006a40 <HAL_TIM_IC_CaptureCallback+0x260>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b1d      	cmp	r3, #29
 8006926:	d903      	bls.n	8006930 <HAL_TIM_IC_CaptureCallback+0x150>
					Distance2 = 15 ;
 8006928:	4b45      	ldr	r3, [pc, #276]	; (8006a40 <HAL_TIM_IC_CaptureCallback+0x260>)
 800692a:	220f      	movs	r2, #15
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e00a      	b.n	8006946 <HAL_TIM_IC_CaptureCallback+0x166>
				}else if(mz80R == GPIO_PIN_SET && Distance2 <= 30){
 8006930:	4b45      	ldr	r3, [pc, #276]	; (8006a48 <HAL_TIM_IC_CaptureCallback+0x268>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d106      	bne.n	8006946 <HAL_TIM_IC_CaptureCallback+0x166>
 8006938:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <HAL_TIM_IC_CaptureCallback+0x260>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b1e      	cmp	r3, #30
 800693e:	d802      	bhi.n	8006946 <HAL_TIM_IC_CaptureCallback+0x166>
					Distance2 = 35;
 8006940:	4b3f      	ldr	r3, [pc, #252]	; (8006a40 <HAL_TIM_IC_CaptureCallback+0x260>)
 8006942:	2223      	movs	r2, #35	; 0x23
 8006944:	701a      	strb	r2, [r3, #0]
				tracker.set_Ldis(Distance2);
 8006946:	4b3e      	ldr	r3, [pc, #248]	; (8006a40 <HAL_TIM_IC_CaptureCallback+0x260>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	4619      	mov	r1, r3
 800694c:	483f      	ldr	r0, [pc, #252]	; (8006a4c <HAL_TIM_IC_CaptureCallback+0x26c>)
 800694e:	f7fb f9f3 	bl	8001d38 <_ZN7Tracker8set_LdisEh>
				Is_First_Captured2 = 0; // set it back to false
 8006952:	4b37      	ldr	r3, [pc, #220]	; (8006a30 <HAL_TIM_IC_CaptureCallback+0x250>)
 8006954:	2200      	movs	r2, #0
 8006956:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6a1a      	ldr	r2, [r3, #32]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 020a 	bic.w	r2, r2, #10
 8006966:	621a      	str	r2, [r3, #32]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6a12      	ldr	r2, [r2, #32]
 8006972:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC1);
 8006974:	4b2d      	ldr	r3, [pc, #180]	; (8006a2c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	4b2c      	ldr	r3, [pc, #176]	; (8006a2c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0202 	bic.w	r2, r2, #2
 8006982:	60da      	str	r2, [r3, #12]
}
 8006984:	e0d2      	b.n	8006b2c <HAL_TIM_IC_CaptureCallback+0x34c>
	}else if(htim == &htim4){
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a31      	ldr	r2, [pc, #196]	; (8006a50 <HAL_TIM_IC_CaptureCallback+0x270>)
 800698a:	4293      	cmp	r3, r2
 800698c:	f040 80ce 	bne.w	8006b2c <HAL_TIM_IC_CaptureCallback+0x34c>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	7f1b      	ldrb	r3, [r3, #28]
 8006994:	2b08      	cmp	r3, #8
 8006996:	f040 80c9 	bne.w	8006b2c <HAL_TIM_IC_CaptureCallback+0x34c>
			if (Is_First_Captured3==0){
 800699a:	4b2e      	ldr	r3, [pc, #184]	; (8006a54 <HAL_TIM_IC_CaptureCallback+0x274>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d11b      	bne.n	80069da <HAL_TIM_IC_CaptureCallback+0x1fa>
				IC_Val13 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	210c      	movs	r1, #12
 80069a6:	4618      	mov	r0, r3
 80069a8:	f005 f9d2 	bl	800bd50 <HAL_TIM_ReadCapturedValue>
 80069ac:	4602      	mov	r2, r0
 80069ae:	4b2a      	ldr	r3, [pc, #168]	; (8006a58 <HAL_TIM_IC_CaptureCallback+0x278>)
 80069b0:	601a      	str	r2, [r3, #0]
				Is_First_Captured3 = 1;  // set the first captured as true
 80069b2:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <HAL_TIM_IC_CaptureCallback+0x274>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a1a      	ldr	r2, [r3, #32]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80069c6:	621a      	str	r2, [r3, #32]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6a1a      	ldr	r2, [r3, #32]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069d6:	621a      	str	r2, [r3, #32]
}
 80069d8:	e0a8      	b.n	8006b2c <HAL_TIM_IC_CaptureCallback+0x34c>
			}else if (Is_First_Captured3==1){
 80069da:	4b1e      	ldr	r3, [pc, #120]	; (8006a54 <HAL_TIM_IC_CaptureCallback+0x274>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	f040 80a4 	bne.w	8006b2c <HAL_TIM_IC_CaptureCallback+0x34c>
				IC_Val23 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	210c      	movs	r1, #12
 80069e8:	4618      	mov	r0, r3
 80069ea:	f005 f9b1 	bl	800bd50 <HAL_TIM_ReadCapturedValue>
 80069ee:	4602      	mov	r2, r0
 80069f0:	4b1a      	ldr	r3, [pc, #104]	; (8006a5c <HAL_TIM_IC_CaptureCallback+0x27c>)
 80069f2:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2200      	movs	r2, #0
 80069fa:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val23 > IC_Val13){
 80069fc:	4b17      	ldr	r3, [pc, #92]	; (8006a5c <HAL_TIM_IC_CaptureCallback+0x27c>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <HAL_TIM_IC_CaptureCallback+0x278>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d92d      	bls.n	8006a64 <HAL_TIM_IC_CaptureCallback+0x284>
					Difference3 = IC_Val23-IC_Val13;
 8006a08:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <HAL_TIM_IC_CaptureCallback+0x278>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <HAL_TIM_IC_CaptureCallback+0x280>)
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	e035      	b.n	8006a84 <HAL_TIM_IC_CaptureCallback+0x2a4>
 8006a18:	b020c49c 	.word	0xb020c49c
 8006a1c:	3fa16872 	.word	0x3fa16872
 8006a20:	20000214 	.word	0x20000214
 8006a24:	200009fc 	.word	0x200009fc
 8006a28:	200009f8 	.word	0x200009f8
 8006a2c:	20000294 	.word	0x20000294
 8006a30:	20000a94 	.word	0x20000a94
 8006a34:	20000a88 	.word	0x20000a88
 8006a38:	20000a8c 	.word	0x20000a8c
 8006a3c:	20000a90 	.word	0x20000a90
 8006a40:	20000a95 	.word	0x20000a95
 8006a44:	20000a86 	.word	0x20000a86
 8006a48:	20000a87 	.word	0x20000a87
 8006a4c:	20000ae8 	.word	0x20000ae8
 8006a50:	20000254 	.word	0x20000254
 8006a54:	20000aa4 	.word	0x20000aa4
 8006a58:	20000a98 	.word	0x20000a98
 8006a5c:	20000a9c 	.word	0x20000a9c
 8006a60:	20000aa0 	.word	0x20000aa0
				}else if (IC_Val13 > IC_Val23){
 8006a64:	4b36      	ldr	r3, [pc, #216]	; (8006b40 <HAL_TIM_IC_CaptureCallback+0x360>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4b36      	ldr	r3, [pc, #216]	; (8006b44 <HAL_TIM_IC_CaptureCallback+0x364>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d909      	bls.n	8006a84 <HAL_TIM_IC_CaptureCallback+0x2a4>
					Difference3 = (0xffff - IC_Val13) + IC_Val23;
 8006a70:	4b34      	ldr	r3, [pc, #208]	; (8006b44 <HAL_TIM_IC_CaptureCallback+0x364>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	4b32      	ldr	r3, [pc, #200]	; (8006b40 <HAL_TIM_IC_CaptureCallback+0x360>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8006a7e:	33ff      	adds	r3, #255	; 0xff
 8006a80:	4a31      	ldr	r2, [pc, #196]	; (8006b48 <HAL_TIM_IC_CaptureCallback+0x368>)
 8006a82:	6013      	str	r3, [r2, #0]
				Distance3 = Difference3 * .034/2;
 8006a84:	4b30      	ldr	r3, [pc, #192]	; (8006b48 <HAL_TIM_IC_CaptureCallback+0x368>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7f9 fcf3 	bl	8000474 <__aeabi_ui2d>
 8006a8e:	a32a      	add	r3, pc, #168	; (adr r3, 8006b38 <HAL_TIM_IC_CaptureCallback+0x358>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7f9 fd68 	bl	8000568 <__aeabi_dmul>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006aa8:	f7f9 fe88 	bl	80007bc <__aeabi_ddiv>
 8006aac:	4603      	mov	r3, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	f7fa f830 	bl	8000b18 <__aeabi_d2uiz>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	4b23      	ldr	r3, [pc, #140]	; (8006b4c <HAL_TIM_IC_CaptureCallback+0x36c>)
 8006abe:	701a      	strb	r2, [r3, #0]
				if(mz80R == GPIO_PIN_RESET && Distance3 >= 30){
 8006ac0:	4b23      	ldr	r3, [pc, #140]	; (8006b50 <HAL_TIM_IC_CaptureCallback+0x370>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d107      	bne.n	8006ad8 <HAL_TIM_IC_CaptureCallback+0x2f8>
 8006ac8:	4b20      	ldr	r3, [pc, #128]	; (8006b4c <HAL_TIM_IC_CaptureCallback+0x36c>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b1d      	cmp	r3, #29
 8006ace:	d903      	bls.n	8006ad8 <HAL_TIM_IC_CaptureCallback+0x2f8>
					Distance3 = 15 ;
 8006ad0:	4b1e      	ldr	r3, [pc, #120]	; (8006b4c <HAL_TIM_IC_CaptureCallback+0x36c>)
 8006ad2:	220f      	movs	r2, #15
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	e00a      	b.n	8006aee <HAL_TIM_IC_CaptureCallback+0x30e>
				}else if(mz80R == GPIO_PIN_SET && Distance3 <= 30){
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <HAL_TIM_IC_CaptureCallback+0x370>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d106      	bne.n	8006aee <HAL_TIM_IC_CaptureCallback+0x30e>
 8006ae0:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <HAL_TIM_IC_CaptureCallback+0x36c>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b1e      	cmp	r3, #30
 8006ae6:	d802      	bhi.n	8006aee <HAL_TIM_IC_CaptureCallback+0x30e>
					Distance3 = 35 ;
 8006ae8:	4b18      	ldr	r3, [pc, #96]	; (8006b4c <HAL_TIM_IC_CaptureCallback+0x36c>)
 8006aea:	2223      	movs	r2, #35	; 0x23
 8006aec:	701a      	strb	r2, [r3, #0]
				tracker.set_Rdis(Distance3);
 8006aee:	4b17      	ldr	r3, [pc, #92]	; (8006b4c <HAL_TIM_IC_CaptureCallback+0x36c>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	4619      	mov	r1, r3
 8006af4:	4817      	ldr	r0, [pc, #92]	; (8006b54 <HAL_TIM_IC_CaptureCallback+0x374>)
 8006af6:	f7fb f933 	bl	8001d60 <_ZN7Tracker8set_RdisEh>
				Is_First_Captured3 = 0; // set it back to false
 8006afa:	4b17      	ldr	r3, [pc, #92]	; (8006b58 <HAL_TIM_IC_CaptureCallback+0x378>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6a1a      	ldr	r2, [r3, #32]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8006b0e:	621a      	str	r2, [r3, #32]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6a12      	ldr	r2, [r2, #32]
 8006b1a:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC4);
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <HAL_TIM_IC_CaptureCallback+0x37c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	4b0e      	ldr	r3, [pc, #56]	; (8006b5c <HAL_TIM_IC_CaptureCallback+0x37c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0210 	bic.w	r2, r2, #16
 8006b2a:	60da      	str	r2, [r3, #12]
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd90      	pop	{r4, r7, pc}
 8006b34:	f3af 8000 	nop.w
 8006b38:	b020c49c 	.word	0xb020c49c
 8006b3c:	3fa16872 	.word	0x3fa16872
 8006b40:	20000a98 	.word	0x20000a98
 8006b44:	20000a9c 	.word	0x20000a9c
 8006b48:	20000aa0 	.word	0x20000aa0
 8006b4c:	20000aa5 	.word	0x20000aa5
 8006b50:	20000a87 	.word	0x20000a87
 8006b54:	20000ae8 	.word	0x20000ae8
 8006b58:	20000aa4 	.word	0x20000aa4
 8006b5c:	20000254 	.word	0x20000254

08006b60 <_Z12battery_calcv>:

void battery_calc(){
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
	float V = 0.00966796875 * adcval[7] ;
 8006b66:	4bc6      	ldr	r3, [pc, #792]	; (8006e80 <_Z12battery_calcv+0x320>)
 8006b68:	89db      	ldrh	r3, [r3, #14]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7f9 fc92 	bl	8000494 <__aeabi_i2d>
 8006b70:	a39b      	add	r3, pc, #620	; (adr r3, 8006de0 <_Z12battery_calcv+0x280>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fcf7 	bl	8000568 <__aeabi_dmul>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	4618      	mov	r0, r3
 8006b80:	4621      	mov	r1, r4
 8006b82:	f7f9 ffe9 	bl	8000b58 <__aeabi_d2f>
 8006b86:	4603      	mov	r3, r0
 8006b88:	607b      	str	r3, [r7, #4]
	if(V >= 8.35 ){
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7f9 fc94 	bl	80004b8 <__aeabi_f2d>
 8006b90:	a395      	add	r3, pc, #596	; (adr r3, 8006de8 <_Z12battery_calcv+0x288>)
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 ff6d 	bl	8000a74 <__aeabi_dcmpge>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <_Z12battery_calcv+0x48>
		batteryP = 100 ;
 8006ba0:	4bb8      	ldr	r3, [pc, #736]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006ba2:	2264      	movs	r2, #100	; 0x64
 8006ba4:	701a      	strb	r2, [r3, #0]
		batteryP = 5 ;
	}else if(V >= 6.55){
		batteryP = 0 ;
	}

}
 8006ba6:	e17e      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 8.3){
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7f9 fc85 	bl	80004b8 <__aeabi_f2d>
 8006bae:	a390      	add	r3, pc, #576	; (adr r3, 8006df0 <_Z12battery_calcv+0x290>)
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f7f9 ff5e 	bl	8000a74 <__aeabi_dcmpge>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <_Z12battery_calcv+0x66>
		batteryP = 95 ;
 8006bbe:	4bb1      	ldr	r3, [pc, #708]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006bc0:	225f      	movs	r2, #95	; 0x5f
 8006bc2:	701a      	strb	r2, [r3, #0]
}
 8006bc4:	e16f      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 8.22){
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7f9 fc76 	bl	80004b8 <__aeabi_f2d>
 8006bcc:	a38a      	add	r3, pc, #552	; (adr r3, 8006df8 <_Z12battery_calcv+0x298>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f7f9 ff4f 	bl	8000a74 <__aeabi_dcmpge>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <_Z12battery_calcv+0x84>
		batteryP = 90 ;
 8006bdc:	4ba9      	ldr	r3, [pc, #676]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006bde:	225a      	movs	r2, #90	; 0x5a
 8006be0:	701a      	strb	r2, [r3, #0]
}
 8006be2:	e160      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 8.16){
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7f9 fc67 	bl	80004b8 <__aeabi_f2d>
 8006bea:	a385      	add	r3, pc, #532	; (adr r3, 8006e00 <_Z12battery_calcv+0x2a0>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 ff40 	bl	8000a74 <__aeabi_dcmpge>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <_Z12battery_calcv+0xa2>
		batteryP = 85 ;
 8006bfa:	4ba2      	ldr	r3, [pc, #648]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006bfc:	2255      	movs	r2, #85	; 0x55
 8006bfe:	701a      	strb	r2, [r3, #0]
}
 8006c00:	e151      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 8.05){
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7f9 fc58 	bl	80004b8 <__aeabi_f2d>
 8006c08:	a37f      	add	r3, pc, #508	; (adr r3, 8006e08 <_Z12battery_calcv+0x2a8>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f7f9 ff31 	bl	8000a74 <__aeabi_dcmpge>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <_Z12battery_calcv+0xc0>
		batteryP = 80 ;
 8006c18:	4b9a      	ldr	r3, [pc, #616]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006c1a:	2250      	movs	r2, #80	; 0x50
 8006c1c:	701a      	strb	r2, [r3, #0]
}
 8006c1e:	e142      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.97){
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7f9 fc49 	bl	80004b8 <__aeabi_f2d>
 8006c26:	a37a      	add	r3, pc, #488	; (adr r3, 8006e10 <_Z12battery_calcv+0x2b0>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	f7f9 ff22 	bl	8000a74 <__aeabi_dcmpge>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <_Z12battery_calcv+0xde>
		batteryP = 75 ;
 8006c36:	4b93      	ldr	r3, [pc, #588]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006c38:	224b      	movs	r2, #75	; 0x4b
 8006c3a:	701a      	strb	r2, [r3, #0]
}
 8006c3c:	e133      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.91){
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7f9 fc3a 	bl	80004b8 <__aeabi_f2d>
 8006c44:	a374      	add	r3, pc, #464	; (adr r3, 8006e18 <_Z12battery_calcv+0x2b8>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f7f9 ff13 	bl	8000a74 <__aeabi_dcmpge>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <_Z12battery_calcv+0xfc>
		batteryP = 70 ;
 8006c54:	4b8b      	ldr	r3, [pc, #556]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006c56:	2246      	movs	r2, #70	; 0x46
 8006c58:	701a      	strb	r2, [r3, #0]
}
 8006c5a:	e124      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.83){
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7f9 fc2b 	bl	80004b8 <__aeabi_f2d>
 8006c62:	a36f      	add	r3, pc, #444	; (adr r3, 8006e20 <_Z12battery_calcv+0x2c0>)
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f7f9 ff04 	bl	8000a74 <__aeabi_dcmpge>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <_Z12battery_calcv+0x11a>
		batteryP = 65 ;
 8006c72:	4b84      	ldr	r3, [pc, #528]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006c74:	2241      	movs	r2, #65	; 0x41
 8006c76:	701a      	strb	r2, [r3, #0]
}
 8006c78:	e115      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.75){
 8006c7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c7e:	eeb1 7a0f 	vmov.f32	s14, #31	; 0x40f80000  7.750
 8006c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8a:	db03      	blt.n	8006c94 <_Z12battery_calcv+0x134>
		batteryP = 60 ;
 8006c8c:	4b7d      	ldr	r3, [pc, #500]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006c8e:	223c      	movs	r2, #60	; 0x3c
 8006c90:	701a      	strb	r2, [r3, #0]
}
 8006c92:	e108      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.71){
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7f9 fc0f 	bl	80004b8 <__aeabi_f2d>
 8006c9a:	a363      	add	r3, pc, #396	; (adr r3, 8006e28 <_Z12battery_calcv+0x2c8>)
 8006c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca0:	f7f9 fee8 	bl	8000a74 <__aeabi_dcmpge>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <_Z12battery_calcv+0x152>
		batteryP = 55 ;
 8006caa:	4b76      	ldr	r3, [pc, #472]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006cac:	2237      	movs	r2, #55	; 0x37
 8006cae:	701a      	strb	r2, [r3, #0]
}
 8006cb0:	e0f9      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.67){
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7f9 fc00 	bl	80004b8 <__aeabi_f2d>
 8006cb8:	a35d      	add	r3, pc, #372	; (adr r3, 8006e30 <_Z12battery_calcv+0x2d0>)
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	f7f9 fed9 	bl	8000a74 <__aeabi_dcmpge>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <_Z12battery_calcv+0x170>
		batteryP = 50 ;
 8006cc8:	4b6e      	ldr	r3, [pc, #440]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006cca:	2232      	movs	r2, #50	; 0x32
 8006ccc:	701a      	strb	r2, [r3, #0]
}
 8006cce:	e0ea      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.63){
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7f9 fbf1 	bl	80004b8 <__aeabi_f2d>
 8006cd6:	a358      	add	r3, pc, #352	; (adr r3, 8006e38 <_Z12battery_calcv+0x2d8>)
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	f7f9 feca 	bl	8000a74 <__aeabi_dcmpge>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <_Z12battery_calcv+0x18e>
		batteryP = 45 ;
 8006ce6:	4b67      	ldr	r3, [pc, #412]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006ce8:	222d      	movs	r2, #45	; 0x2d
 8006cea:	701a      	strb	r2, [r3, #0]
}
 8006cec:	e0db      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.59){
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7f9 fbe2 	bl	80004b8 <__aeabi_f2d>
 8006cf4:	a352      	add	r3, pc, #328	; (adr r3, 8006e40 <_Z12battery_calcv+0x2e0>)
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	f7f9 febb 	bl	8000a74 <__aeabi_dcmpge>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <_Z12battery_calcv+0x1ac>
		batteryP = 40 ;
 8006d04:	4b5f      	ldr	r3, [pc, #380]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006d06:	2228      	movs	r2, #40	; 0x28
 8006d08:	701a      	strb	r2, [r3, #0]
}
 8006d0a:	e0cc      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.57){
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7f9 fbd3 	bl	80004b8 <__aeabi_f2d>
 8006d12:	a34d      	add	r3, pc, #308	; (adr r3, 8006e48 <_Z12battery_calcv+0x2e8>)
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f7f9 feac 	bl	8000a74 <__aeabi_dcmpge>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <_Z12battery_calcv+0x1ca>
		batteryP = 35 ;
 8006d22:	4b58      	ldr	r3, [pc, #352]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006d24:	2223      	movs	r2, #35	; 0x23
 8006d26:	701a      	strb	r2, [r3, #0]
}
 8006d28:	e0bd      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.53){
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7f9 fbc4 	bl	80004b8 <__aeabi_f2d>
 8006d30:	a347      	add	r3, pc, #284	; (adr r3, 8006e50 <_Z12battery_calcv+0x2f0>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fe9d 	bl	8000a74 <__aeabi_dcmpge>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <_Z12battery_calcv+0x1e8>
		batteryP = 30 ;
 8006d40:	4b50      	ldr	r3, [pc, #320]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006d42:	221e      	movs	r2, #30
 8006d44:	701a      	strb	r2, [r3, #0]
}
 8006d46:	e0ae      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.49){
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7f9 fbb5 	bl	80004b8 <__aeabi_f2d>
 8006d4e:	a342      	add	r3, pc, #264	; (adr r3, 8006e58 <_Z12battery_calcv+0x2f8>)
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f7f9 fe8e 	bl	8000a74 <__aeabi_dcmpge>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <_Z12battery_calcv+0x206>
		batteryP = 25 ;
 8006d5e:	4b49      	ldr	r3, [pc, #292]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006d60:	2219      	movs	r2, #25
 8006d62:	701a      	strb	r2, [r3, #0]
}
 8006d64:	e09f      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.45){
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7f9 fba6 	bl	80004b8 <__aeabi_f2d>
 8006d6c:	a33c      	add	r3, pc, #240	; (adr r3, 8006e60 <_Z12battery_calcv+0x300>)
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	f7f9 fe7f 	bl	8000a74 <__aeabi_dcmpge>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <_Z12battery_calcv+0x224>
		batteryP = 20 ;
 8006d7c:	4b41      	ldr	r3, [pc, #260]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006d7e:	2214      	movs	r2, #20
 8006d80:	701a      	strb	r2, [r3, #0]
}
 8006d82:	e090      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.41){
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7f9 fb97 	bl	80004b8 <__aeabi_f2d>
 8006d8a:	a337      	add	r3, pc, #220	; (adr r3, 8006e68 <_Z12battery_calcv+0x308>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f7f9 fe70 	bl	8000a74 <__aeabi_dcmpge>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <_Z12battery_calcv+0x242>
		batteryP = 15 ;
 8006d9a:	4b3a      	ldr	r3, [pc, #232]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006d9c:	220f      	movs	r2, #15
 8006d9e:	701a      	strb	r2, [r3, #0]
}
 8006da0:	e081      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.37){
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7f9 fb88 	bl	80004b8 <__aeabi_f2d>
 8006da8:	a331      	add	r3, pc, #196	; (adr r3, 8006e70 <_Z12battery_calcv+0x310>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	f7f9 fe61 	bl	8000a74 <__aeabi_dcmpge>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <_Z12battery_calcv+0x260>
		batteryP = 10 ;
 8006db8:	4b32      	ldr	r3, [pc, #200]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006dba:	220a      	movs	r2, #10
 8006dbc:	701a      	strb	r2, [r3, #0]
}
 8006dbe:	e072      	b.n	8006ea6 <_Z12battery_calcv+0x346>
	}else if(V >= 7.22){
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7f9 fb79 	bl	80004b8 <__aeabi_f2d>
 8006dc6:	a32c      	add	r3, pc, #176	; (adr r3, 8006e78 <_Z12battery_calcv+0x318>)
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	f7f9 fe52 	bl	8000a74 <__aeabi_dcmpge>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d058      	beq.n	8006e88 <_Z12battery_calcv+0x328>
		batteryP = 5 ;
 8006dd6:	4b2b      	ldr	r3, [pc, #172]	; (8006e84 <_Z12battery_calcv+0x324>)
 8006dd8:	2205      	movs	r2, #5
 8006dda:	701a      	strb	r2, [r3, #0]
}
 8006ddc:	e063      	b.n	8006ea6 <_Z12battery_calcv+0x346>
 8006dde:	bf00      	nop
 8006de0:	cccccccd 	.word	0xcccccccd
 8006de4:	3f83cccc 	.word	0x3f83cccc
 8006de8:	33333333 	.word	0x33333333
 8006dec:	4020b333 	.word	0x4020b333
 8006df0:	9999999a 	.word	0x9999999a
 8006df4:	40209999 	.word	0x40209999
 8006df8:	d70a3d71 	.word	0xd70a3d71
 8006dfc:	402070a3 	.word	0x402070a3
 8006e00:	851eb852 	.word	0x851eb852
 8006e04:	402051eb 	.word	0x402051eb
 8006e08:	9999999a 	.word	0x9999999a
 8006e0c:	40201999 	.word	0x40201999
 8006e10:	ae147ae1 	.word	0xae147ae1
 8006e14:	401fe147 	.word	0x401fe147
 8006e18:	0a3d70a4 	.word	0x0a3d70a4
 8006e1c:	401fa3d7 	.word	0x401fa3d7
 8006e20:	851eb852 	.word	0x851eb852
 8006e24:	401f51eb 	.word	0x401f51eb
 8006e28:	3d70a3d7 	.word	0x3d70a3d7
 8006e2c:	401ed70a 	.word	0x401ed70a
 8006e30:	7ae147ae 	.word	0x7ae147ae
 8006e34:	401eae14 	.word	0x401eae14
 8006e38:	b851eb85 	.word	0xb851eb85
 8006e3c:	401e851e 	.word	0x401e851e
 8006e40:	f5c28f5c 	.word	0xf5c28f5c
 8006e44:	401e5c28 	.word	0x401e5c28
 8006e48:	147ae148 	.word	0x147ae148
 8006e4c:	401e47ae 	.word	0x401e47ae
 8006e50:	51eb851f 	.word	0x51eb851f
 8006e54:	401e1eb8 	.word	0x401e1eb8
 8006e58:	8f5c28f6 	.word	0x8f5c28f6
 8006e5c:	401df5c2 	.word	0x401df5c2
 8006e60:	cccccccd 	.word	0xcccccccd
 8006e64:	401dcccc 	.word	0x401dcccc
 8006e68:	0a3d70a4 	.word	0x0a3d70a4
 8006e6c:	401da3d7 	.word	0x401da3d7
 8006e70:	47ae147b 	.word	0x47ae147b
 8006e74:	401d7ae1 	.word	0x401d7ae1
 8006e78:	ae147ae1 	.word	0xae147ae1
 8006e7c:	401ce147 	.word	0x401ce147
 8006e80:	20000a74 	.word	0x20000a74
 8006e84:	20000ae4 	.word	0x20000ae4
	}else if(V >= 6.55){
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7f9 fb15 	bl	80004b8 <__aeabi_f2d>
 8006e8e:	a309      	add	r3, pc, #36	; (adr r3, 8006eb4 <_Z12battery_calcv+0x354>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f7f9 fdee 	bl	8000a74 <__aeabi_dcmpge>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d100      	bne.n	8006ea0 <_Z12battery_calcv+0x340>
}
 8006e9e:	e002      	b.n	8006ea6 <_Z12battery_calcv+0x346>
		batteryP = 0 ;
 8006ea0:	4b03      	ldr	r3, [pc, #12]	; (8006eb0 <_Z12battery_calcv+0x350>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd90      	pop	{r4, r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20000ae4 	.word	0x20000ae4
 8006eb4:	33333333 	.word	0x33333333
 8006eb8:	401a3333 	.word	0x401a3333
 8006ebc:	00000000 	.word	0x00000000

08006ec0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8006ec0:	b590      	push	{r4, r7, lr}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	if(htim == &htim13){
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a8b      	ldr	r2, [pc, #556]	; (80070f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d16f      	bne.n	8006fb0 <HAL_TIM_PeriodElapsedCallback+0xf0>
		mz80FL = HAL_GPIO_ReadPin(GPIOG, mz80fl_Pin);
 8006ed0:	2108      	movs	r1, #8
 8006ed2:	488a      	ldr	r0, [pc, #552]	; (80070fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006ed4:	f002 fc62 	bl	800979c <HAL_GPIO_ReadPin>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	4b88      	ldr	r3, [pc, #544]	; (8007100 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006ede:	701a      	strb	r2, [r3, #0]
		mz80FR = HAL_GPIO_ReadPin(GPIOG, mz80fr_Pin);
 8006ee0:	2120      	movs	r1, #32
 8006ee2:	4886      	ldr	r0, [pc, #536]	; (80070fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006ee4:	f002 fc5a 	bl	800979c <HAL_GPIO_ReadPin>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	4b85      	ldr	r3, [pc, #532]	; (8007104 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006eee:	701a      	strb	r2, [r3, #0]
		mz80L  = HAL_GPIO_ReadPin(GPIOG, mz80sl_Pin);
 8006ef0:	2104      	movs	r1, #4
 8006ef2:	4882      	ldr	r0, [pc, #520]	; (80070fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006ef4:	f002 fc52 	bl	800979c <HAL_GPIO_ReadPin>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	461a      	mov	r2, r3
 8006efc:	4b82      	ldr	r3, [pc, #520]	; (8007108 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006efe:	701a      	strb	r2, [r3, #0]
		mz80R  = HAL_GPIO_ReadPin(GPIOG, mz80sr_Pin);
 8006f00:	2110      	movs	r1, #16
 8006f02:	487e      	ldr	r0, [pc, #504]	; (80070fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006f04:	f002 fc4a 	bl	800979c <HAL_GPIO_ReadPin>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4b7f      	ldr	r3, [pc, #508]	; (800710c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006f0e:	701a      	strb	r2, [r3, #0]

		//HCSR04_Read(num);
		HCSR04_Read();
 8006f10:	f7ff fbf2 	bl	80066f8 <_Z11HCSR04_Readv>

		//num = (num+1)%2;
		Fdistance = 29.988 * pow(buffer[0]*0.003 , -1.173);
 8006f14:	4b7e      	ldr	r3, [pc, #504]	; (8007110 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7f9 fabb 	bl	8000494 <__aeabi_i2d>
 8006f1e:	a370      	add	r3, pc, #448	; (adr r3, 80070e0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	f7f9 fb20 	bl	8000568 <__aeabi_dmul>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	ec44 3b17 	vmov	d7, r3, r4
 8006f30:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 80070e8 <HAL_TIM_PeriodElapsedCallback+0x228>
 8006f34:	eeb0 0a47 	vmov.f32	s0, s14
 8006f38:	eef0 0a67 	vmov.f32	s1, s15
 8006f3c:	f006 fff0 	bl	800df20 <pow>
 8006f40:	ec51 0b10 	vmov	r0, r1, d0
 8006f44:	a36a      	add	r3, pc, #424	; (adr r3, 80070f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 fb0d 	bl	8000568 <__aeabi_dmul>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	460c      	mov	r4, r1
 8006f52:	4618      	mov	r0, r3
 8006f54:	4621      	mov	r1, r4
 8006f56:	f7f9 fddf 	bl	8000b18 <__aeabi_d2uiz>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	4b6d      	ldr	r3, [pc, #436]	; (8007114 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006f60:	701a      	strb	r2, [r3, #0]
		if(mz80FL == GPIO_PIN_RESET || mz80FR == GPIO_PIN_RESET){
 8006f62:	4b67      	ldr	r3, [pc, #412]	; (8007100 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_TIM_PeriodElapsedCallback+0xb2>
 8006f6a:	4b66      	ldr	r3, [pc, #408]	; (8007104 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <HAL_TIM_PeriodElapsedCallback+0xb8>
			Fdistance = 0 ;
 8006f72:	4b68      	ldr	r3, [pc, #416]	; (8007114 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
		}
		tracker.set_Fdis(Fdistance);
 8006f78:	4b66      	ldr	r3, [pc, #408]	; (8007114 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4866      	ldr	r0, [pc, #408]	; (8007118 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006f80:	f7fa fec6 	bl	8001d10 <_ZN7Tracker8set_FdisEh>

		t_data.x = tracker.getX() ;
 8006f84:	4864      	ldr	r0, [pc, #400]	; (8007118 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006f86:	f7fe f97f 	bl	8005288 <_ZN7Tracker4getXEv>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	b21a      	sxth	r2, r3
 8006f8e:	4b63      	ldr	r3, [pc, #396]	; (800711c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006f90:	801a      	strh	r2, [r3, #0]
		t_data.y = tracker.gety() ;
 8006f92:	4861      	ldr	r0, [pc, #388]	; (8007118 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006f94:	f7fe f987 	bl	80052a6 <_ZN7Tracker4getyEv>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	b21a      	sxth	r2, r3
 8006f9c:	4b5f      	ldr	r3, [pc, #380]	; (800711c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006f9e:	805a      	strh	r2, [r3, #2]
		t_data.is_sun = tracker.isSun() ;
 8006fa0:	485d      	ldr	r0, [pc, #372]	; (8007118 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006fa2:	f7fe f99b 	bl	80052dc <_ZN7Tracker5isSunEv>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	b21a      	sxth	r2, r3
 8006faa:	4b5c      	ldr	r3, [pc, #368]	; (800711c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006fac:	809a      	strh	r2, [r3, #4]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
			demo_counter = 0 ;
		}

	}
}
 8006fae:	e093      	b.n	80070d8 <HAL_TIM_PeriodElapsedCallback+0x218>
	}else if (htim == &htim10){
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a5b      	ldr	r2, [pc, #364]	; (8007120 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d113      	bne.n	8006fe0 <HAL_TIM_PeriodElapsedCallback+0x120>
		DHT11_Read();
 8006fb8:	f000 f8ca 	bl	8007150 <_Z10DHT11_Readv>
		t_data.hum = Humidity ;
 8006fbc:	4b59      	ldr	r3, [pc, #356]	; (8007124 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b21a      	sxth	r2, r3
 8006fc2:	4b56      	ldr	r3, [pc, #344]	; (800711c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006fc4:	811a      	strh	r2, [r3, #8]
		t_data.temp = Temperature ;
 8006fc6:	4b58      	ldr	r3, [pc, #352]	; (8007128 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b21a      	sxth	r2, r3
 8006fcc:	4b53      	ldr	r3, [pc, #332]	; (800711c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006fce:	80da      	strh	r2, [r3, #6]
		t_data.is_operate = tracker.is_OP();
 8006fd0:	4851      	ldr	r0, [pc, #324]	; (8007118 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006fd2:	f7fe f977 	bl	80052c4 <_ZN7Tracker5is_OPEv>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	b21a      	sxth	r2, r3
 8006fda:	4b50      	ldr	r3, [pc, #320]	; (800711c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006fdc:	81da      	strh	r2, [r3, #14]
}
 8006fde:	e07b      	b.n	80070d8 <HAL_TIM_PeriodElapsedCallback+0x218>
	}else if (htim == &htim2){
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a52      	ldr	r2, [pc, #328]	; (800712c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d177      	bne.n	80070d8 <HAL_TIM_PeriodElapsedCallback+0x218>
		battery_calc();
 8006fe8:	f7ff fdba 	bl	8006b60 <_Z12battery_calcv>
		t_data.battery_percentage = batteryP ;
 8006fec:	4b50      	ldr	r3, [pc, #320]	; (8007130 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	b21a      	sxth	r2, r3
 8006ff2:	4b4a      	ldr	r3, [pc, #296]	; (800711c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006ff4:	821a      	strh	r2, [r3, #16]
		watering_counter++;
 8006ff6:	4b4f      	ldr	r3, [pc, #316]	; (8007134 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	4a4d      	ldr	r2, [pc, #308]	; (8007134 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006ffe:	6013      	str	r3, [r2, #0]
		demo_counter++;
 8007000:	4b4d      	ldr	r3, [pc, #308]	; (8007138 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	4a4c      	ldr	r2, [pc, #304]	; (8007138 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8007008:	6013      	str	r3, [r2, #0]
		t_data.water_levet = (int16_t)(adcval[1]*0.09765625) ;
 800700a:	4b4c      	ldr	r3, [pc, #304]	; (800713c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800700c:	885b      	ldrh	r3, [r3, #2]
 800700e:	4618      	mov	r0, r3
 8007010:	f7f9 fa40 	bl	8000494 <__aeabi_i2d>
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	4b49      	ldr	r3, [pc, #292]	; (8007140 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800701a:	f7f9 faa5 	bl	8000568 <__aeabi_dmul>
 800701e:	4603      	mov	r3, r0
 8007020:	460c      	mov	r4, r1
 8007022:	4618      	mov	r0, r3
 8007024:	4621      	mov	r1, r4
 8007026:	f7f9 fd4f 	bl	8000ac8 <__aeabi_d2iz>
 800702a:	4603      	mov	r3, r0
 800702c:	b21a      	sxth	r2, r3
 800702e:	4b3b      	ldr	r3, [pc, #236]	; (800711c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8007030:	819a      	strh	r2, [r3, #12]
		t_data.soil = (int16_t)(100-(adcval[2]*0.09765625)) ;
 8007032:	4b42      	ldr	r3, [pc, #264]	; (800713c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8007034:	889b      	ldrh	r3, [r3, #4]
 8007036:	4618      	mov	r0, r3
 8007038:	f7f9 fa2c 	bl	8000494 <__aeabi_i2d>
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	4b3f      	ldr	r3, [pc, #252]	; (8007140 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8007042:	f7f9 fa91 	bl	8000568 <__aeabi_dmul>
 8007046:	4603      	mov	r3, r0
 8007048:	460c      	mov	r4, r1
 800704a:	461a      	mov	r2, r3
 800704c:	4623      	mov	r3, r4
 800704e:	f04f 0000 	mov.w	r0, #0
 8007052:	493c      	ldr	r1, [pc, #240]	; (8007144 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007054:	f7f9 f8d0 	bl	80001f8 <__aeabi_dsub>
 8007058:	4603      	mov	r3, r0
 800705a:	460c      	mov	r4, r1
 800705c:	4618      	mov	r0, r3
 800705e:	4621      	mov	r1, r4
 8007060:	f7f9 fd32 	bl	8000ac8 <__aeabi_d2iz>
 8007064:	4603      	mov	r3, r0
 8007066:	b21a      	sxth	r2, r3
 8007068:	4b2c      	ldr	r3, [pc, #176]	; (800711c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800706a:	815a      	strh	r2, [r3, #10]
		if(watering_counter >= watering_period){
 800706c:	4b31      	ldr	r3, [pc, #196]	; (8007134 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	4b35      	ldr	r3, [pc, #212]	; (8007148 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	db05      	blt.n	8007084 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			tracker.setWater();
 8007078:	4827      	ldr	r0, [pc, #156]	; (8007118 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800707a:	f7fe f94a 	bl	8005312 <_ZN7Tracker8setWaterEv>
			watering_counter = 0 ;
 800707e:	4b2d      	ldr	r3, [pc, #180]	; (8007134 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8007080:	2200      	movs	r2, #0
 8007082:	601a      	str	r2, [r3, #0]
		if(demo_counter == 2 ){
 8007084:	4b2c      	ldr	r3, [pc, #176]	; (8007138 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d105      	bne.n	8007098 <HAL_TIM_PeriodElapsedCallback+0x1d8>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800708c:	2201      	movs	r2, #1
 800708e:	2101      	movs	r1, #1
 8007090:	482e      	ldr	r0, [pc, #184]	; (800714c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007092:	f002 fb9b 	bl	80097cc <HAL_GPIO_WritePin>
}
 8007096:	e01f      	b.n	80070d8 <HAL_TIM_PeriodElapsedCallback+0x218>
		}else if(demo_counter == 6){
 8007098:	4b27      	ldr	r3, [pc, #156]	; (8007138 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b06      	cmp	r3, #6
 800709e:	d105      	bne.n	80070ac <HAL_TIM_PeriodElapsedCallback+0x1ec>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80070a0:	2200      	movs	r2, #0
 80070a2:	2101      	movs	r1, #1
 80070a4:	4829      	ldr	r0, [pc, #164]	; (800714c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80070a6:	f002 fb91 	bl	80097cc <HAL_GPIO_WritePin>
}
 80070aa:	e015      	b.n	80070d8 <HAL_TIM_PeriodElapsedCallback+0x218>
		}else if(demo_counter == 7){
 80070ac:	4b22      	ldr	r3, [pc, #136]	; (8007138 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b07      	cmp	r3, #7
 80070b2:	d105      	bne.n	80070c0 <HAL_TIM_PeriodElapsedCallback+0x200>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80070b4:	2201      	movs	r2, #1
 80070b6:	2101      	movs	r1, #1
 80070b8:	4824      	ldr	r0, [pc, #144]	; (800714c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80070ba:	f002 fb87 	bl	80097cc <HAL_GPIO_WritePin>
}
 80070be:	e00b      	b.n	80070d8 <HAL_TIM_PeriodElapsedCallback+0x218>
		}else if(demo_counter == 9){
 80070c0:	4b1d      	ldr	r3, [pc, #116]	; (8007138 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b09      	cmp	r3, #9
 80070c6:	d107      	bne.n	80070d8 <HAL_TIM_PeriodElapsedCallback+0x218>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80070c8:	2200      	movs	r2, #0
 80070ca:	2101      	movs	r1, #1
 80070cc:	481f      	ldr	r0, [pc, #124]	; (800714c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80070ce:	f002 fb7d 	bl	80097cc <HAL_GPIO_WritePin>
			demo_counter = 0 ;
 80070d2:	4b19      	ldr	r3, [pc, #100]	; (8007138 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd90      	pop	{r4, r7, pc}
 80070e0:	bc6a7efa 	.word	0xbc6a7efa
 80070e4:	3f689374 	.word	0x3f689374
 80070e8:	a5e353f8 	.word	0xa5e353f8
 80070ec:	bff2c49b 	.word	0xbff2c49b
 80070f0:	916872b0 	.word	0x916872b0
 80070f4:	403dfced 	.word	0x403dfced
 80070f8:	200003d4 	.word	0x200003d4
 80070fc:	40021800 	.word	0x40021800
 8007100:	20000a85 	.word	0x20000a85
 8007104:	20000a84 	.word	0x20000a84
 8007108:	20000a86 	.word	0x20000a86
 800710c:	20000a87 	.word	0x20000a87
 8007110:	20000a64 	.word	0x20000a64
 8007114:	20000aa6 	.word	0x20000aa6
 8007118:	20000ae8 	.word	0x20000ae8
 800711c:	200009dc 	.word	0x200009dc
 8007120:	20000314 	.word	0x20000314
 8007124:	20000aa8 	.word	0x20000aa8
 8007128:	20000aaa 	.word	0x20000aaa
 800712c:	200001d4 	.word	0x200001d4
 8007130:	20000ae4 	.word	0x20000ae4
 8007134:	20002724 	.word	0x20002724
 8007138:	2000272c 	.word	0x2000272c
 800713c:	20000a74 	.word	0x20000a74
 8007140:	3fb90000 	.word	0x3fb90000
 8007144:	40590000 	.word	0x40590000
 8007148:	20000004 	.word	0x20000004
 800714c:	40020c00 	.word	0x40020c00

08007150 <_Z10DHT11_Readv>:

uint8_t DHT11_Read (void){
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0

	for(int a=0;a<40;a++) mData[a]=0;
 8007156:	2300      	movs	r3, #0
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b27      	cmp	r3, #39	; 0x27
 800715e:	dc08      	bgt.n	8007172 <_Z10DHT11_Readv+0x22>
 8007160:	4a96      	ldr	r2, [pc, #600]	; (80073bc <_Z10DHT11_Readv+0x26c>)
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	4413      	add	r3, r2
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	3301      	adds	r3, #1
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	e7f3      	b.n	800715a <_Z10DHT11_Readv+0xa>

	HAL_TIM_Base_Start(&htim11);
 8007172:	4893      	ldr	r0, [pc, #588]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 8007174:	f004 f94f 	bl	800b416 <HAL_TIM_Base_Start>

	mTime1 = 0, mTime2 = 0,/* durum=0, tempVal=0, humVal=0,*/ parityVal = 0, genParity = 0,  mbit = 0;
 8007178:	4b92      	ldr	r3, [pc, #584]	; (80073c4 <_Z10DHT11_Readv+0x274>)
 800717a:	2200      	movs	r2, #0
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	4b92      	ldr	r3, [pc, #584]	; (80073c8 <_Z10DHT11_Readv+0x278>)
 8007180:	2200      	movs	r2, #0
 8007182:	801a      	strh	r2, [r3, #0]
 8007184:	4b91      	ldr	r3, [pc, #580]	; (80073cc <_Z10DHT11_Readv+0x27c>)
 8007186:	2200      	movs	r2, #0
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	4b91      	ldr	r3, [pc, #580]	; (80073d0 <_Z10DHT11_Readv+0x280>)
 800718c:	2200      	movs	r2, #0
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	4b90      	ldr	r3, [pc, #576]	; (80073d4 <_Z10DHT11_Readv+0x284>)
 8007192:	2200      	movs	r2, #0
 8007194:	801a      	strh	r2, [r3, #0]

	set_output();
 8007196:	f7ff fa37 	bl	8006608 <_Z10set_outputv>
	HAL_GPIO_WritePin(temphumsens_GPIO_Port,temphumsens_Pin,GPIO_PIN_RESET);
 800719a:	2200      	movs	r2, #0
 800719c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071a0:	488d      	ldr	r0, [pc, #564]	; (80073d8 <_Z10DHT11_Readv+0x288>)
 80071a2:	f002 fb13 	bl	80097cc <HAL_GPIO_WritePin>
	delay2(18000);
 80071a6:	f244 6050 	movw	r0, #18000	; 0x4650
 80071aa:	f7ff fa69 	bl	8006680 <_Z6delay2t>
   	set_input();
 80071ae:	f7ff fa49 	bl	8006644 <_Z9set_inputv>

	__HAL_TIM_SET_COUNTER(&htim11, 0);				//set timer counter to zero
 80071b2:	4b83      	ldr	r3, [pc, #524]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2200      	movs	r2, #0
 80071b8:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(temphumsens_GPIO_Port,temphumsens_Pin) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim11) > 500) return 0;
 80071ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071be:	4886      	ldr	r0, [pc, #536]	; (80073d8 <_Z10DHT11_Readv+0x288>)
 80071c0:	f002 faec 	bl	800979c <HAL_GPIO_ReadPin>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	bf0c      	ite	eq
 80071ca:	2301      	moveq	r3, #1
 80071cc:	2300      	movne	r3, #0
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00d      	beq.n	80071f0 <_Z10DHT11_Readv+0xa0>
 80071d4:	4b7a      	ldr	r3, [pc, #488]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80071e0:	bf8c      	ite	hi
 80071e2:	2301      	movhi	r3, #1
 80071e4:	2300      	movls	r3, #0
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0e6      	beq.n	80071ba <_Z10DHT11_Readv+0x6a>
 80071ec:	2300      	movs	r3, #0
 80071ee:	e15f      	b.n	80074b0 <_Z10DHT11_Readv+0x360>

	__HAL_TIM_SET_COUNTER(&htim11, 0);
 80071f0:	4b73      	ldr	r3, [pc, #460]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2200      	movs	r2, #0
 80071f6:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(temphumsens_GPIO_Port,temphumsens_Pin) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim11) > 500) return 0;
 80071f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071fc:	4876      	ldr	r0, [pc, #472]	; (80073d8 <_Z10DHT11_Readv+0x288>)
 80071fe:	f002 facd 	bl	800979c <HAL_GPIO_ReadPin>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	bf0c      	ite	eq
 8007208:	2301      	moveq	r3, #1
 800720a:	2300      	movne	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00d      	beq.n	800722e <_Z10DHT11_Readv+0xde>
 8007212:	4b6b      	ldr	r3, [pc, #428]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	b29b      	uxth	r3, r3
 800721a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800721e:	bf8c      	ite	hi
 8007220:	2301      	movhi	r3, #1
 8007222:	2300      	movls	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0e6      	beq.n	80071f8 <_Z10DHT11_Readv+0xa8>
 800722a:	2300      	movs	r3, #0
 800722c:	e140      	b.n	80074b0 <_Z10DHT11_Readv+0x360>
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim11);
 800722e:	4b64      	ldr	r3, [pc, #400]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	b29a      	uxth	r2, r3
 8007236:	4b63      	ldr	r3, [pc, #396]	; (80073c4 <_Z10DHT11_Readv+0x274>)
 8007238:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COUNTER(&htim11, 0);
 800723a:	4b61      	ldr	r3, [pc, #388]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2200      	movs	r2, #0
 8007240:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(temphumsens_GPIO_Port,temphumsens_Pin) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim11) > 500) return 0;
 8007242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007246:	4864      	ldr	r0, [pc, #400]	; (80073d8 <_Z10DHT11_Readv+0x288>)
 8007248:	f002 faa8 	bl	800979c <HAL_GPIO_ReadPin>
 800724c:	4603      	mov	r3, r0
 800724e:	2b01      	cmp	r3, #1
 8007250:	bf0c      	ite	eq
 8007252:	2301      	moveq	r3, #1
 8007254:	2300      	movne	r3, #0
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00d      	beq.n	8007278 <_Z10DHT11_Readv+0x128>
 800725c:	4b58      	ldr	r3, [pc, #352]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	b29b      	uxth	r3, r3
 8007264:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007268:	bf8c      	ite	hi
 800726a:	2301      	movhi	r3, #1
 800726c:	2300      	movls	r3, #0
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0e6      	beq.n	8007242 <_Z10DHT11_Readv+0xf2>
 8007274:	2300      	movs	r3, #0
 8007276:	e11b      	b.n	80074b0 <_Z10DHT11_Readv+0x360>
    mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim11);
 8007278:	4b51      	ldr	r3, [pc, #324]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	b29a      	uxth	r2, r3
 8007280:	4b51      	ldr	r3, [pc, #324]	; (80073c8 <_Z10DHT11_Readv+0x278>)
 8007282:	801a      	strh	r2, [r3, #0]

	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85){return 0;}
 8007284:	4b4f      	ldr	r3, [pc, #316]	; (80073c4 <_Z10DHT11_Readv+0x274>)
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	2b4a      	cmp	r3, #74	; 0x4a
 800728a:	d80d      	bhi.n	80072a8 <_Z10DHT11_Readv+0x158>
 800728c:	4b4d      	ldr	r3, [pc, #308]	; (80073c4 <_Z10DHT11_Readv+0x274>)
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	2b55      	cmp	r3, #85	; 0x55
 8007292:	d909      	bls.n	80072a8 <_Z10DHT11_Readv+0x158>
 8007294:	4b4c      	ldr	r3, [pc, #304]	; (80073c8 <_Z10DHT11_Readv+0x278>)
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	2b4a      	cmp	r3, #74	; 0x4a
 800729a:	d805      	bhi.n	80072a8 <_Z10DHT11_Readv+0x158>
 800729c:	4b4a      	ldr	r3, [pc, #296]	; (80073c8 <_Z10DHT11_Readv+0x278>)
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	2b55      	cmp	r3, #85	; 0x55
 80072a2:	d901      	bls.n	80072a8 <_Z10DHT11_Readv+0x158>
 80072a4:	2300      	movs	r3, #0
 80072a6:	e103      	b.n	80074b0 <_Z10DHT11_Readv+0x360>

	for(int j = 0; j < 40; j++){
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b27      	cmp	r3, #39	; 0x27
 80072b0:	dc66      	bgt.n	8007380 <_Z10DHT11_Readv+0x230>
		__HAL_TIM_SET_COUNTER(&htim11, 0);
 80072b2:	4b43      	ldr	r3, [pc, #268]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2200      	movs	r2, #0
 80072b8:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(temphumsens_GPIO_Port,temphumsens_Pin) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim11) > 500) return 0;
 80072ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072be:	4846      	ldr	r0, [pc, #280]	; (80073d8 <_Z10DHT11_Readv+0x288>)
 80072c0:	f002 fa6c 	bl	800979c <HAL_GPIO_ReadPin>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bf0c      	ite	eq
 80072ca:	2301      	moveq	r3, #1
 80072cc:	2300      	movne	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <_Z10DHT11_Readv+0x1a0>
 80072d4:	4b3a      	ldr	r3, [pc, #232]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80072e0:	bf8c      	ite	hi
 80072e2:	2301      	movhi	r3, #1
 80072e4:	2300      	movls	r3, #0
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0e6      	beq.n	80072ba <_Z10DHT11_Readv+0x16a>
 80072ec:	2300      	movs	r3, #0
 80072ee:	e0df      	b.n	80074b0 <_Z10DHT11_Readv+0x360>
		__HAL_TIM_SET_COUNTER(&htim11, 0);
 80072f0:	4b33      	ldr	r3, [pc, #204]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2200      	movs	r2, #0
 80072f6:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(temphumsens_GPIO_Port,temphumsens_Pin) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim11) > 500) return 0;
 80072f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072fc:	4836      	ldr	r0, [pc, #216]	; (80073d8 <_Z10DHT11_Readv+0x288>)
 80072fe:	f002 fa4d 	bl	800979c <HAL_GPIO_ReadPin>
 8007302:	4603      	mov	r3, r0
 8007304:	2b01      	cmp	r3, #1
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00d      	beq.n	800732e <_Z10DHT11_Readv+0x1de>
 8007312:	4b2b      	ldr	r3, [pc, #172]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	b29b      	uxth	r3, r3
 800731a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800731e:	bf8c      	ite	hi
 8007320:	2301      	movhi	r3, #1
 8007322:	2300      	movls	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0e6      	beq.n	80072f8 <_Z10DHT11_Readv+0x1a8>
 800732a:	2300      	movs	r3, #0
 800732c:	e0c0      	b.n	80074b0 <_Z10DHT11_Readv+0x360>
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim11);
 800732e:	4b24      	ldr	r3, [pc, #144]	; (80073c0 <_Z10DHT11_Readv+0x270>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	b29a      	uxth	r2, r3
 8007336:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <_Z10DHT11_Readv+0x274>)
 8007338:	801a      	strh	r2, [r3, #0]

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30){
 800733a:	4b22      	ldr	r3, [pc, #136]	; (80073c4 <_Z10DHT11_Readv+0x274>)
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	2b14      	cmp	r3, #20
 8007340:	d907      	bls.n	8007352 <_Z10DHT11_Readv+0x202>
 8007342:	4b20      	ldr	r3, [pc, #128]	; (80073c4 <_Z10DHT11_Readv+0x274>)
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	2b1d      	cmp	r3, #29
 8007348:	d803      	bhi.n	8007352 <_Z10DHT11_Readv+0x202>
			mbit = 0;
 800734a:	4b22      	ldr	r3, [pc, #136]	; (80073d4 <_Z10DHT11_Readv+0x284>)
 800734c:	2200      	movs	r2, #0
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	e00a      	b.n	8007368 <_Z10DHT11_Readv+0x218>
		}
		else if(mTime1 > 60 && mTime1 < 80){ //if pass time 70 uS set as HIGH
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <_Z10DHT11_Readv+0x274>)
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	2b3c      	cmp	r3, #60	; 0x3c
 8007358:	d906      	bls.n	8007368 <_Z10DHT11_Readv+0x218>
 800735a:	4b1a      	ldr	r3, [pc, #104]	; (80073c4 <_Z10DHT11_Readv+0x274>)
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	2b4f      	cmp	r3, #79	; 0x4f
 8007360:	d802      	bhi.n	8007368 <_Z10DHT11_Readv+0x218>
			 mbit = 1;
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <_Z10DHT11_Readv+0x284>)
 8007364:	2201      	movs	r2, #1
 8007366:	801a      	strh	r2, [r3, #0]
		}
		//set i th data in data buffer
		mData[j] = mbit;
 8007368:	4b1a      	ldr	r3, [pc, #104]	; (80073d4 <_Z10DHT11_Readv+0x284>)
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b2d9      	uxtb	r1, r3
 800736e:	4a13      	ldr	r2, [pc, #76]	; (80073bc <_Z10DHT11_Readv+0x26c>)
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	4413      	add	r3, r2
 8007374:	460a      	mov	r2, r1
 8007376:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++){
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	3301      	adds	r3, #1
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	e795      	b.n	80072ac <_Z10DHT11_Readv+0x15c>
	}

	//get hum value from data buffer
	humVal = 0 ;
 8007380:	4b16      	ldr	r3, [pc, #88]	; (80073dc <_Z10DHT11_Readv+0x28c>)
 8007382:	2200      	movs	r2, #0
 8007384:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b07      	cmp	r3, #7
 800738e:	dc27      	bgt.n	80073e0 <_Z10DHT11_Readv+0x290>
		humVal += mData[i];
 8007390:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <_Z10DHT11_Readv+0x26c>)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	b29a      	uxth	r2, r3
 800739a:	4b10      	ldr	r3, [pc, #64]	; (80073dc <_Z10DHT11_Readv+0x28c>)
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	4413      	add	r3, r2
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	4b0e      	ldr	r3, [pc, #56]	; (80073dc <_Z10DHT11_Readv+0x28c>)
 80073a4:	801a      	strh	r2, [r3, #0]
		humVal = humVal << 1;
 80073a6:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <_Z10DHT11_Readv+0x28c>)
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	4b0b      	ldr	r3, [pc, #44]	; (80073dc <_Z10DHT11_Readv+0x28c>)
 80073b0:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	e7e7      	b.n	800738a <_Z10DHT11_Readv+0x23a>
 80073ba:	bf00      	nop
 80073bc:	20000ab4 	.word	0x20000ab4
 80073c0:	20000354 	.word	0x20000354
 80073c4:	20000adc 	.word	0x20000adc
 80073c8:	20000ade 	.word	0x20000ade
 80073cc:	20000ae2 	.word	0x20000ae2
 80073d0:	20000ae3 	.word	0x20000ae3
 80073d4:	20000ae0 	.word	0x20000ae0
 80073d8:	40020c00 	.word	0x40020c00
 80073dc:	20000aae 	.word	0x20000aae
	}

	//get temp value from data buffer
	tempVal = 0 ;
 80073e0:	4b35      	ldr	r3, [pc, #212]	; (80074b8 <_Z10DHT11_Readv+0x368>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	801a      	strh	r2, [r3, #0]
	for(int i = 16; i < 24; i++){
 80073e6:	2310      	movs	r3, #16
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b17      	cmp	r3, #23
 80073ee:	dc14      	bgt.n	800741a <_Z10DHT11_Readv+0x2ca>
		tempVal += mData[i];
 80073f0:	4a32      	ldr	r2, [pc, #200]	; (80074bc <_Z10DHT11_Readv+0x36c>)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	4413      	add	r3, r2
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	4b2f      	ldr	r3, [pc, #188]	; (80074b8 <_Z10DHT11_Readv+0x368>)
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	4413      	add	r3, r2
 8007400:	b29a      	uxth	r2, r3
 8007402:	4b2d      	ldr	r3, [pc, #180]	; (80074b8 <_Z10DHT11_Readv+0x368>)
 8007404:	801a      	strh	r2, [r3, #0]
		tempVal = tempVal << 1;
 8007406:	4b2c      	ldr	r3, [pc, #176]	; (80074b8 <_Z10DHT11_Readv+0x368>)
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	b29a      	uxth	r2, r3
 800740e:	4b2a      	ldr	r3, [pc, #168]	; (80074b8 <_Z10DHT11_Readv+0x368>)
 8007410:	801a      	strh	r2, [r3, #0]
	for(int i = 16; i < 24; i++){
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	3301      	adds	r3, #1
 8007416:	60bb      	str	r3, [r7, #8]
 8007418:	e7e7      	b.n	80073ea <_Z10DHT11_Readv+0x29a>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++){
 800741a:	2320      	movs	r3, #32
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b27      	cmp	r3, #39	; 0x27
 8007422:	dc13      	bgt.n	800744c <_Z10DHT11_Readv+0x2fc>
		parityVal += mData[i];
 8007424:	4a25      	ldr	r2, [pc, #148]	; (80074bc <_Z10DHT11_Readv+0x36c>)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4413      	add	r3, r2
 800742a:	781a      	ldrb	r2, [r3, #0]
 800742c:	4b24      	ldr	r3, [pc, #144]	; (80074c0 <_Z10DHT11_Readv+0x370>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	4413      	add	r3, r2
 8007432:	b2da      	uxtb	r2, r3
 8007434:	4b22      	ldr	r3, [pc, #136]	; (80074c0 <_Z10DHT11_Readv+0x370>)
 8007436:	701a      	strb	r2, [r3, #0]
		parityVal = parityVal << 1;
 8007438:	4b21      	ldr	r3, [pc, #132]	; (80074c0 <_Z10DHT11_Readv+0x370>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	b2da      	uxtb	r2, r3
 8007440:	4b1f      	ldr	r3, [pc, #124]	; (80074c0 <_Z10DHT11_Readv+0x370>)
 8007442:	701a      	strb	r2, [r3, #0]
	for(int i = 32; i < 40; i++){
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3301      	adds	r3, #1
 8007448:	607b      	str	r3, [r7, #4]
 800744a:	e7e8      	b.n	800741e <_Z10DHT11_Readv+0x2ce>
	}

	parityVal = parityVal >> 1;
 800744c:	4b1c      	ldr	r3, [pc, #112]	; (80074c0 <_Z10DHT11_Readv+0x370>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	105b      	asrs	r3, r3, #1
 8007452:	b2da      	uxtb	r2, r3
 8007454:	4b1a      	ldr	r3, [pc, #104]	; (80074c0 <_Z10DHT11_Readv+0x370>)
 8007456:	701a      	strb	r2, [r3, #0]
	humVal = humVal >> 1;
 8007458:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <_Z10DHT11_Readv+0x374>)
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	105b      	asrs	r3, r3, #1
 800745e:	b29a      	uxth	r2, r3
 8007460:	4b18      	ldr	r3, [pc, #96]	; (80074c4 <_Z10DHT11_Readv+0x374>)
 8007462:	801a      	strh	r2, [r3, #0]
	tempVal = tempVal >> 1;
 8007464:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <_Z10DHT11_Readv+0x368>)
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	105b      	asrs	r3, r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <_Z10DHT11_Readv+0x368>)
 800746e:	801a      	strh	r2, [r3, #0]
	Humidity = humVal ;
 8007470:	4b14      	ldr	r3, [pc, #80]	; (80074c4 <_Z10DHT11_Readv+0x374>)
 8007472:	881a      	ldrh	r2, [r3, #0]
 8007474:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <_Z10DHT11_Readv+0x378>)
 8007476:	801a      	strh	r2, [r3, #0]
	Temperature = tempVal ;
 8007478:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <_Z10DHT11_Readv+0x368>)
 800747a:	881a      	ldrh	r2, [r3, #0]
 800747c:	4b13      	ldr	r3, [pc, #76]	; (80074cc <_Z10DHT11_Readv+0x37c>)
 800747e:	801a      	strh	r2, [r3, #0]
	genParity = humVal + tempVal;
 8007480:	4b10      	ldr	r3, [pc, #64]	; (80074c4 <_Z10DHT11_Readv+0x374>)
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b2da      	uxtb	r2, r3
 8007486:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <_Z10DHT11_Readv+0x368>)
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	4413      	add	r3, r2
 800748e:	b2da      	uxtb	r2, r3
 8007490:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <_Z10DHT11_Readv+0x380>)
 8007492:	701a      	strb	r2, [r3, #0]

	dhtVal[0]= tempVal;
 8007494:	4b08      	ldr	r3, [pc, #32]	; (80074b8 <_Z10DHT11_Readv+0x368>)
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b2da      	uxtb	r2, r3
 800749a:	4b0e      	ldr	r3, [pc, #56]	; (80074d4 <_Z10DHT11_Readv+0x384>)
 800749c:	701a      	strb	r2, [r3, #0]
	dhtVal[1] = humVal;
 800749e:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <_Z10DHT11_Readv+0x374>)
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <_Z10DHT11_Readv+0x384>)
 80074a6:	705a      	strb	r2, [r3, #1]
	HAL_TIM_Base_Stop(&htim11);
 80074a8:	480b      	ldr	r0, [pc, #44]	; (80074d8 <_Z10DHT11_Readv+0x388>)
 80074aa:	f003 ffd8 	bl	800b45e <HAL_TIM_Base_Stop>
	return 1;
 80074ae:	2301      	movs	r3, #1
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	20000aac 	.word	0x20000aac
 80074bc:	20000ab4 	.word	0x20000ab4
 80074c0:	20000ae2 	.word	0x20000ae2
 80074c4:	20000aae 	.word	0x20000aae
 80074c8:	20000aa8 	.word	0x20000aa8
 80074cc:	20000aaa 	.word	0x20000aaa
 80074d0:	20000ae3 	.word	0x20000ae3
 80074d4:	20000ab0 	.word	0x20000ab0
 80074d8:	20000354 	.word	0x20000354

080074dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_0) // If The INT Source Is EXTI Line9 (A9 Pin)
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d106      	bne.n	80074fa <HAL_GPIO_EXTI_Callback+0x1e>
    {
    	//HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin); // Toggle The Output (LED) Pin
    	HAL_UART_Transmit(&huart2, (uint8_t*)&t_data, size_of_T, -1);
 80074ec:	f04f 33ff 	mov.w	r3, #4294967295
 80074f0:	2214      	movs	r2, #20
 80074f2:	4904      	ldr	r1, [pc, #16]	; (8007504 <HAL_GPIO_EXTI_Callback+0x28>)
 80074f4:	4804      	ldr	r0, [pc, #16]	; (8007508 <HAL_GPIO_EXTI_Callback+0x2c>)
 80074f6:	f005 f9f6 	bl	800c8e6 <HAL_UART_Transmit>
    }
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200009dc 	.word	0x200009dc
 8007508:	20000454 	.word	0x20000454

0800750c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]


	tracker.set_enf(r_data.enforce);
 8007514:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <HAL_UART_RxCpltCallback+0x74>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	481a      	ldr	r0, [pc, #104]	; (8007584 <HAL_UART_RxCpltCallback+0x78>)
 800751c:	f7fd fe96 	bl	800524c <_ZN7Tracker7set_enfEb>
	tracker.set_ok(r_data.ok);
 8007520:	4b17      	ldr	r3, [pc, #92]	; (8007580 <HAL_UART_RxCpltCallback+0x74>)
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	4619      	mov	r1, r3
 8007526:	4817      	ldr	r0, [pc, #92]	; (8007584 <HAL_UART_RxCpltCallback+0x78>)
 8007528:	f7fd fe9f 	bl	800526a <_ZN7Tracker6set_okEb>
	tracker.set_sunlight_scheduale(r_data.sunlight_amount);
 800752c:	4b14      	ldr	r3, [pc, #80]	; (8007580 <HAL_UART_RxCpltCallback+0x74>)
 800752e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007532:	4619      	mov	r1, r3
 8007534:	4813      	ldr	r0, [pc, #76]	; (8007584 <HAL_UART_RxCpltCallback+0x78>)
 8007536:	f7fd ff08 	bl	800534a <_ZN7Tracker22set_sunlight_schedualeEs>
	if(r_data.water_scedual != water_schaduale){
 800753a:	4b11      	ldr	r3, [pc, #68]	; (8007580 <HAL_UART_RxCpltCallback+0x74>)
 800753c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007540:	461a      	mov	r2, r3
 8007542:	4b11      	ldr	r3, [pc, #68]	; (8007588 <HAL_UART_RxCpltCallback+0x7c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d016      	beq.n	8007578 <HAL_UART_RxCpltCallback+0x6c>
		water_schaduale = r_data.water_scedual ;
 800754a:	4b0d      	ldr	r3, [pc, #52]	; (8007580 <HAL_UART_RxCpltCallback+0x74>)
 800754c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007550:	461a      	mov	r2, r3
 8007552:	4b0d      	ldr	r3, [pc, #52]	; (8007588 <HAL_UART_RxCpltCallback+0x7c>)
 8007554:	601a      	str	r2, [r3, #0]
		watering_counter = 0 ;
 8007556:	4b0d      	ldr	r3, [pc, #52]	; (800758c <HAL_UART_RxCpltCallback+0x80>)
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
		watering_period = (int)(1440/water_schaduale) ;
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <HAL_UART_RxCpltCallback+0x7c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8007564:	fb92 f3f3 	sdiv	r3, r2, r3
 8007568:	4a09      	ldr	r2, [pc, #36]	; (8007590 <HAL_UART_RxCpltCallback+0x84>)
 800756a:	6013      	str	r3, [r2, #0]
		sunlight_schaduale = r_data.sunlight_amount ;
 800756c:	4b04      	ldr	r3, [pc, #16]	; (8007580 <HAL_UART_RxCpltCallback+0x74>)
 800756e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007572:	461a      	mov	r2, r3
 8007574:	4b07      	ldr	r3, [pc, #28]	; (8007594 <HAL_UART_RxCpltCallback+0x88>)
 8007576:	601a      	str	r2, [r3, #0]
	}
	if(r_data.is_night == true){
		//sunlight_counter = 0 ;
		//tracker.set_sunlight_counter(0);
	}
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	200009f0 	.word	0x200009f0
 8007584:	20000ae8 	.word	0x20000ae8
 8007588:	20000000 	.word	0x20000000
 800758c:	20002724 	.word	0x20002724
 8007590:	20000004 	.word	0x20000004
 8007594:	20000008 	.word	0x20000008

08007598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800759c:	bf00      	nop
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <_Z41__static_initialization_and_destruction_0ii>:
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d11e      	bne.n	80075f6 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075be:	4293      	cmp	r3, r2
 80075c0:	d119      	bne.n	80075f6 <_Z41__static_initialization_and_destruction_0ii+0x4e>
DCMotor dcright = DCMotor(htim9.Instance->CCR2);
 80075c2:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3338      	adds	r3, #56	; 0x38
 80075c8:	4619      	mov	r1, r3
 80075ca:	480e      	ldr	r0, [pc, #56]	; (8007604 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80075cc:	f7f9 fc94 	bl	8000ef8 <_ZN7DCMotorC1ERVm>
DCMotor dcleft  = DCMotor(htim9.Instance->CCR1);
 80075d0:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3334      	adds	r3, #52	; 0x34
 80075d6:	4619      	mov	r1, r3
 80075d8:	480b      	ldr	r0, [pc, #44]	; (8007608 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80075da:	f7f9 fc8d 	bl	8000ef8 <_ZN7DCMotorC1ERVm>
DCSystem dcSys  = DCSystem(dcright,dcleft);
 80075de:	4a0a      	ldr	r2, [pc, #40]	; (8007608 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80075e0:	4908      	ldr	r1, [pc, #32]	; (8007604 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80075e2:	480a      	ldr	r0, [pc, #40]	; (800760c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80075e4:	f7f9 fda5 	bl	8001132 <_ZN8DCSystemC1ER7DCMotorS1_>
MPU6050 mpu = MPU6050();
 80075e8:	4809      	ldr	r0, [pc, #36]	; (8007610 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80075ea:	f7fa f965 	bl	80018b8 <_ZN7MPU6050C1Ev>
Tracker tracker = Tracker(dcSys);
 80075ee:	4907      	ldr	r1, [pc, #28]	; (800760c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80075f0:	4808      	ldr	r0, [pc, #32]	; (8007614 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80075f2:	f7fa fadb 	bl	8001bac <_ZN7TrackerC1ER8DCSystem>
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200002d4 	.word	0x200002d4
 8007604:	20000a00 	.word	0x20000a00
 8007608:	20000a18 	.word	0x20000a18
 800760c:	20000a30 	.word	0x20000a30
 8007610:	20000a50 	.word	0x20000a50
 8007614:	20000ae8 	.word	0x20000ae8

08007618 <_GLOBAL__sub_I_hadc3>:
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
 800761c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007620:	2001      	movs	r0, #1
 8007622:	f7ff ffc1 	bl	80075a8 <_Z41__static_initialization_and_destruction_0ii>
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800762e:	2300      	movs	r3, #0
 8007630:	607b      	str	r3, [r7, #4]
 8007632:	4b10      	ldr	r3, [pc, #64]	; (8007674 <HAL_MspInit+0x4c>)
 8007634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007636:	4a0f      	ldr	r2, [pc, #60]	; (8007674 <HAL_MspInit+0x4c>)
 8007638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800763c:	6453      	str	r3, [r2, #68]	; 0x44
 800763e:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <HAL_MspInit+0x4c>)
 8007640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007646:	607b      	str	r3, [r7, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800764a:	2300      	movs	r3, #0
 800764c:	603b      	str	r3, [r7, #0]
 800764e:	4b09      	ldr	r3, [pc, #36]	; (8007674 <HAL_MspInit+0x4c>)
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	4a08      	ldr	r2, [pc, #32]	; (8007674 <HAL_MspInit+0x4c>)
 8007654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007658:	6413      	str	r3, [r2, #64]	; 0x40
 800765a:	4b06      	ldr	r3, [pc, #24]	; (8007674 <HAL_MspInit+0x4c>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40023800 	.word	0x40023800

08007678 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08a      	sub	sp, #40	; 0x28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007680:	f107 0314 	add.w	r3, r7, #20
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	605a      	str	r2, [r3, #4]
 800768a:	609a      	str	r2, [r3, #8]
 800768c:	60da      	str	r2, [r3, #12]
 800768e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a3d      	ldr	r2, [pc, #244]	; (800778c <HAL_ADC_MspInit+0x114>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d173      	bne.n	8007782 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800769a:	2300      	movs	r3, #0
 800769c:	613b      	str	r3, [r7, #16]
 800769e:	4b3c      	ldr	r3, [pc, #240]	; (8007790 <HAL_ADC_MspInit+0x118>)
 80076a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a2:	4a3b      	ldr	r2, [pc, #236]	; (8007790 <HAL_ADC_MspInit+0x118>)
 80076a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076a8:	6453      	str	r3, [r2, #68]	; 0x44
 80076aa:	4b39      	ldr	r3, [pc, #228]	; (8007790 <HAL_ADC_MspInit+0x118>)
 80076ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	4b35      	ldr	r3, [pc, #212]	; (8007790 <HAL_ADC_MspInit+0x118>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	4a34      	ldr	r2, [pc, #208]	; (8007790 <HAL_ADC_MspInit+0x118>)
 80076c0:	f043 0320 	orr.w	r3, r3, #32
 80076c4:	6313      	str	r3, [r2, #48]	; 0x30
 80076c6:	4b32      	ldr	r3, [pc, #200]	; (8007790 <HAL_ADC_MspInit+0x118>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076d2:	2300      	movs	r3, #0
 80076d4:	60bb      	str	r3, [r7, #8]
 80076d6:	4b2e      	ldr	r3, [pc, #184]	; (8007790 <HAL_ADC_MspInit+0x118>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	4a2d      	ldr	r2, [pc, #180]	; (8007790 <HAL_ADC_MspInit+0x118>)
 80076dc:	f043 0301 	orr.w	r3, r3, #1
 80076e0:	6313      	str	r3, [r2, #48]	; 0x30
 80076e2:	4b2b      	ldr	r3, [pc, #172]	; (8007790 <HAL_ADC_MspInit+0x118>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	60bb      	str	r3, [r7, #8]
 80076ec:	68bb      	ldr	r3, [r7, #8]
    PF9     ------> ADC3_IN7
    PF10     ------> ADC3_IN8
    PA0/WKUP     ------> ADC3_IN0
    PA3     ------> ADC3_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80076ee:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
 80076f2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80076f4:	2303      	movs	r3, #3
 80076f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80076fc:	f107 0314 	add.w	r3, r7, #20
 8007700:	4619      	mov	r1, r3
 8007702:	4824      	ldr	r0, [pc, #144]	; (8007794 <HAL_ADC_MspInit+0x11c>)
 8007704:	f001 fea0 	bl	8009448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8007708:	2309      	movs	r3, #9
 800770a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800770c:	2303      	movs	r3, #3
 800770e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007710:	2300      	movs	r3, #0
 8007712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007714:	f107 0314 	add.w	r3, r7, #20
 8007718:	4619      	mov	r1, r3
 800771a:	481f      	ldr	r0, [pc, #124]	; (8007798 <HAL_ADC_MspInit+0x120>)
 800771c:	f001 fe94 	bl	8009448 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8007720:	4b1e      	ldr	r3, [pc, #120]	; (800779c <HAL_ADC_MspInit+0x124>)
 8007722:	4a1f      	ldr	r2, [pc, #124]	; (80077a0 <HAL_ADC_MspInit+0x128>)
 8007724:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8007726:	4b1d      	ldr	r3, [pc, #116]	; (800779c <HAL_ADC_MspInit+0x124>)
 8007728:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800772c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800772e:	4b1b      	ldr	r3, [pc, #108]	; (800779c <HAL_ADC_MspInit+0x124>)
 8007730:	2200      	movs	r2, #0
 8007732:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8007734:	4b19      	ldr	r3, [pc, #100]	; (800779c <HAL_ADC_MspInit+0x124>)
 8007736:	2200      	movs	r2, #0
 8007738:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800773a:	4b18      	ldr	r3, [pc, #96]	; (800779c <HAL_ADC_MspInit+0x124>)
 800773c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007740:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007742:	4b16      	ldr	r3, [pc, #88]	; (800779c <HAL_ADC_MspInit+0x124>)
 8007744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007748:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800774a:	4b14      	ldr	r3, [pc, #80]	; (800779c <HAL_ADC_MspInit+0x124>)
 800774c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007750:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8007752:	4b12      	ldr	r3, [pc, #72]	; (800779c <HAL_ADC_MspInit+0x124>)
 8007754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007758:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800775a:	4b10      	ldr	r3, [pc, #64]	; (800779c <HAL_ADC_MspInit+0x124>)
 800775c:	2200      	movs	r2, #0
 800775e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007760:	4b0e      	ldr	r3, [pc, #56]	; (800779c <HAL_ADC_MspInit+0x124>)
 8007762:	2200      	movs	r2, #0
 8007764:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8007766:	480d      	ldr	r0, [pc, #52]	; (800779c <HAL_ADC_MspInit+0x124>)
 8007768:	f001 fade 	bl	8008d28 <HAL_DMA_Init>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <HAL_ADC_MspInit+0xfe>
    {
      Error_Handler();
 8007772:	f7ff ff11 	bl	8007598 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a08      	ldr	r2, [pc, #32]	; (800779c <HAL_ADC_MspInit+0x124>)
 800777a:	639a      	str	r2, [r3, #56]	; 0x38
 800777c:	4a07      	ldr	r2, [pc, #28]	; (800779c <HAL_ADC_MspInit+0x124>)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8007782:	bf00      	nop
 8007784:	3728      	adds	r7, #40	; 0x28
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	40012200 	.word	0x40012200
 8007790:	40023800 	.word	0x40023800
 8007794:	40021400 	.word	0x40021400
 8007798:	40020000 	.word	0x40020000
 800779c:	200000e0 	.word	0x200000e0
 80077a0:	40026410 	.word	0x40026410

080077a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	; 0x28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ac:	f107 0314 	add.w	r3, r7, #20
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	605a      	str	r2, [r3, #4]
 80077b6:	609a      	str	r2, [r3, #8]
 80077b8:	60da      	str	r2, [r3, #12]
 80077ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a19      	ldr	r2, [pc, #100]	; (8007828 <HAL_I2C_MspInit+0x84>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d12c      	bne.n	8007820 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	4b18      	ldr	r3, [pc, #96]	; (800782c <HAL_I2C_MspInit+0x88>)
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	4a17      	ldr	r2, [pc, #92]	; (800782c <HAL_I2C_MspInit+0x88>)
 80077d0:	f043 0302 	orr.w	r3, r3, #2
 80077d4:	6313      	str	r3, [r2, #48]	; 0x30
 80077d6:	4b15      	ldr	r3, [pc, #84]	; (800782c <HAL_I2C_MspInit+0x88>)
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	613b      	str	r3, [r7, #16]
 80077e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80077e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80077e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077e8:	2312      	movs	r3, #18
 80077ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80077ec:	2301      	movs	r3, #1
 80077ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077f0:	2303      	movs	r3, #3
 80077f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80077f4:	2304      	movs	r3, #4
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077f8:	f107 0314 	add.w	r3, r7, #20
 80077fc:	4619      	mov	r1, r3
 80077fe:	480c      	ldr	r0, [pc, #48]	; (8007830 <HAL_I2C_MspInit+0x8c>)
 8007800:	f001 fe22 	bl	8009448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	4b08      	ldr	r3, [pc, #32]	; (800782c <HAL_I2C_MspInit+0x88>)
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	4a07      	ldr	r2, [pc, #28]	; (800782c <HAL_I2C_MspInit+0x88>)
 800780e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007812:	6413      	str	r3, [r2, #64]	; 0x40
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <HAL_I2C_MspInit+0x88>)
 8007816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007820:	bf00      	nop
 8007822:	3728      	adds	r7, #40	; 0x28
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40005400 	.word	0x40005400
 800782c:	40023800 	.word	0x40023800
 8007830:	40020400 	.word	0x40020400

08007834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	; 0x28
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a64      	ldr	r2, [pc, #400]	; (80079d4 <HAL_TIM_Base_MspInit+0x1a0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d116      	bne.n	8007874 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007846:	2300      	movs	r3, #0
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
 800784a:	4b63      	ldr	r3, [pc, #396]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 800784c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784e:	4a62      	ldr	r2, [pc, #392]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	6453      	str	r3, [r2, #68]	; 0x44
 8007856:	4b60      	ldr	r3, [pc, #384]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007862:	2200      	movs	r2, #0
 8007864:	2100      	movs	r1, #0
 8007866:	2019      	movs	r0, #25
 8007868:	f001 fa27 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800786c:	2019      	movs	r0, #25
 800786e:	f001 fa40 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8007872:	e0aa      	b.n	80079ca <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM2)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787c:	d116      	bne.n	80078ac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800787e:	2300      	movs	r3, #0
 8007880:	623b      	str	r3, [r7, #32]
 8007882:	4b55      	ldr	r3, [pc, #340]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	4a54      	ldr	r2, [pc, #336]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007888:	f043 0301 	orr.w	r3, r3, #1
 800788c:	6413      	str	r3, [r2, #64]	; 0x40
 800788e:	4b52      	ldr	r3, [pc, #328]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	623b      	str	r3, [r7, #32]
 8007898:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800789a:	2200      	movs	r2, #0
 800789c:	2100      	movs	r1, #0
 800789e:	201c      	movs	r0, #28
 80078a0:	f001 fa0b 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80078a4:	201c      	movs	r0, #28
 80078a6:	f001 fa24 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
}
 80078aa:	e08e      	b.n	80079ca <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM9)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a4a      	ldr	r2, [pc, #296]	; (80079dc <HAL_TIM_Base_MspInit+0x1a8>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d10e      	bne.n	80078d4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80078b6:	2300      	movs	r3, #0
 80078b8:	61fb      	str	r3, [r7, #28]
 80078ba:	4b47      	ldr	r3, [pc, #284]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 80078bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078be:	4a46      	ldr	r2, [pc, #280]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c4:	6453      	str	r3, [r2, #68]	; 0x44
 80078c6:	4b44      	ldr	r3, [pc, #272]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 80078c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078ce:	61fb      	str	r3, [r7, #28]
 80078d0:	69fb      	ldr	r3, [r7, #28]
}
 80078d2:	e07a      	b.n	80079ca <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM10)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a41      	ldr	r2, [pc, #260]	; (80079e0 <HAL_TIM_Base_MspInit+0x1ac>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d116      	bne.n	800790c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80078de:	2300      	movs	r3, #0
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	4b3d      	ldr	r3, [pc, #244]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 80078e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e6:	4a3c      	ldr	r2, [pc, #240]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 80078e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ec:	6453      	str	r3, [r2, #68]	; 0x44
 80078ee:	4b3a      	ldr	r3, [pc, #232]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f6:	61bb      	str	r3, [r7, #24]
 80078f8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80078fa:	2200      	movs	r2, #0
 80078fc:	2100      	movs	r1, #0
 80078fe:	2019      	movs	r0, #25
 8007900:	f001 f9db 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007904:	2019      	movs	r0, #25
 8007906:	f001 f9f4 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
}
 800790a:	e05e      	b.n	80079ca <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM11)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a34      	ldr	r2, [pc, #208]	; (80079e4 <HAL_TIM_Base_MspInit+0x1b0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d10e      	bne.n	8007934 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	4b2f      	ldr	r3, [pc, #188]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 800791c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791e:	4a2e      	ldr	r2, [pc, #184]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007924:	6453      	str	r3, [r2, #68]	; 0x44
 8007926:	4b2c      	ldr	r3, [pc, #176]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	697b      	ldr	r3, [r7, #20]
}
 8007932:	e04a      	b.n	80079ca <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM12)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a2b      	ldr	r2, [pc, #172]	; (80079e8 <HAL_TIM_Base_MspInit+0x1b4>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d10e      	bne.n	800795c <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800793e:	2300      	movs	r3, #0
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	4b25      	ldr	r3, [pc, #148]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	4a24      	ldr	r2, [pc, #144]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800794c:	6413      	str	r3, [r2, #64]	; 0x40
 800794e:	4b22      	ldr	r3, [pc, #136]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007956:	613b      	str	r3, [r7, #16]
 8007958:	693b      	ldr	r3, [r7, #16]
}
 800795a:	e036      	b.n	80079ca <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM13)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a22      	ldr	r2, [pc, #136]	; (80079ec <HAL_TIM_Base_MspInit+0x1b8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d116      	bne.n	8007994 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007966:	2300      	movs	r3, #0
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	4a1a      	ldr	r2, [pc, #104]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007974:	6413      	str	r3, [r2, #64]	; 0x40
 8007976:	4b18      	ldr	r3, [pc, #96]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	202c      	movs	r0, #44	; 0x2c
 8007988:	f001 f997 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800798c:	202c      	movs	r0, #44	; 0x2c
 800798e:	f001 f9b0 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
}
 8007992:	e01a      	b.n	80079ca <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM14)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a15      	ldr	r2, [pc, #84]	; (80079f0 <HAL_TIM_Base_MspInit+0x1bc>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d115      	bne.n	80079ca <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800799e:	2300      	movs	r3, #0
 80079a0:	60bb      	str	r3, [r7, #8]
 80079a2:	4b0d      	ldr	r3, [pc, #52]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	4a0c      	ldr	r2, [pc, #48]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 80079a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ac:	6413      	str	r3, [r2, #64]	; 0x40
 80079ae:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <HAL_TIM_Base_MspInit+0x1a4>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b6:	60bb      	str	r3, [r7, #8]
 80079b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80079ba:	2200      	movs	r2, #0
 80079bc:	2100      	movs	r1, #0
 80079be:	202d      	movs	r0, #45	; 0x2d
 80079c0:	f001 f97b 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80079c4:	202d      	movs	r0, #45	; 0x2d
 80079c6:	f001 f994 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
}
 80079ca:	bf00      	nop
 80079cc:	3728      	adds	r7, #40	; 0x28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40023800 	.word	0x40023800
 80079dc:	40014000 	.word	0x40014000
 80079e0:	40014400 	.word	0x40014400
 80079e4:	40014800 	.word	0x40014800
 80079e8:	40001800 	.word	0x40001800
 80079ec:	40001c00 	.word	0x40001c00
 80079f0:	40002000 	.word	0x40002000

080079f4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08e      	sub	sp, #56	; 0x38
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a00:	2200      	movs	r2, #0
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	605a      	str	r2, [r3, #4]
 8007a06:	609a      	str	r2, [r3, #8]
 8007a08:	60da      	str	r2, [r3, #12]
 8007a0a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a6f      	ldr	r2, [pc, #444]	; (8007bd0 <HAL_TIM_IC_MspInit+0x1dc>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d153      	bne.n	8007abe <HAL_TIM_IC_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007a16:	2300      	movs	r3, #0
 8007a18:	623b      	str	r3, [r7, #32]
 8007a1a:	4b6e      	ldr	r3, [pc, #440]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	4a6d      	ldr	r2, [pc, #436]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007a20:	f043 0302 	orr.w	r3, r3, #2
 8007a24:	6413      	str	r3, [r2, #64]	; 0x40
 8007a26:	4b6b      	ldr	r3, [pc, #428]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	623b      	str	r3, [r7, #32]
 8007a30:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	4b67      	ldr	r3, [pc, #412]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	4a66      	ldr	r2, [pc, #408]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007a3c:	f043 0304 	orr.w	r3, r3, #4
 8007a40:	6313      	str	r3, [r2, #48]	; 0x30
 8007a42:	4b64      	ldr	r3, [pc, #400]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	f003 0304 	and.w	r3, r3, #4
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	4b60      	ldr	r3, [pc, #384]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a56:	4a5f      	ldr	r2, [pc, #380]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007a58:	f043 0302 	orr.w	r3, r3, #2
 8007a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a5e:	4b5d      	ldr	r3, [pc, #372]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	61bb      	str	r3, [r7, #24]
 8007a68:	69bb      	ldr	r3, [r7, #24]
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007a6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a70:	2302      	movs	r3, #2
 8007a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a74:	2300      	movs	r3, #0
 8007a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a84:	4619      	mov	r1, r3
 8007a86:	4854      	ldr	r0, [pc, #336]	; (8007bd8 <HAL_TIM_IC_MspInit+0x1e4>)
 8007a88:	f001 fcde 	bl	8009448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007a8c:	2330      	movs	r3, #48	; 0x30
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a90:	2302      	movs	r3, #2
 8007a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a94:	2300      	movs	r3, #0
 8007a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	484d      	ldr	r0, [pc, #308]	; (8007bdc <HAL_TIM_IC_MspInit+0x1e8>)
 8007aa8:	f001 fcce 	bl	8009448 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007aac:	2200      	movs	r2, #0
 8007aae:	2100      	movs	r1, #0
 8007ab0:	201d      	movs	r0, #29
 8007ab2:	f001 f902 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007ab6:	201d      	movs	r0, #29
 8007ab8:	f001 f91b 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007abc:	e083      	b.n	8007bc6 <HAL_TIM_IC_MspInit+0x1d2>
  else if(htim_ic->Instance==TIM4)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a47      	ldr	r2, [pc, #284]	; (8007be0 <HAL_TIM_IC_MspInit+0x1ec>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d135      	bne.n	8007b34 <HAL_TIM_IC_MspInit+0x140>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007ac8:	2300      	movs	r3, #0
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	4b41      	ldr	r3, [pc, #260]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad0:	4a40      	ldr	r2, [pc, #256]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007ad2:	f043 0304 	orr.w	r3, r3, #4
 8007ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8007ad8:	4b3e      	ldr	r3, [pc, #248]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	617b      	str	r3, [r7, #20]
 8007ae2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	613b      	str	r3, [r7, #16]
 8007ae8:	4b3a      	ldr	r3, [pc, #232]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aec:	4a39      	ldr	r2, [pc, #228]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007aee:	f043 0308 	orr.w	r3, r3, #8
 8007af2:	6313      	str	r3, [r2, #48]	; 0x30
 8007af4:	4b37      	ldr	r3, [pc, #220]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af8:	f003 0308 	and.w	r3, r3, #8
 8007afc:	613b      	str	r3, [r7, #16]
 8007afe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b06:	2302      	movs	r3, #2
 8007b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007b12:	2302      	movs	r3, #2
 8007b14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4831      	ldr	r0, [pc, #196]	; (8007be4 <HAL_TIM_IC_MspInit+0x1f0>)
 8007b1e:	f001 fc93 	bl	8009448 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007b22:	2200      	movs	r2, #0
 8007b24:	2100      	movs	r1, #0
 8007b26:	201e      	movs	r0, #30
 8007b28:	f001 f8c7 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007b2c:	201e      	movs	r0, #30
 8007b2e:	f001 f8e0 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
}
 8007b32:	e048      	b.n	8007bc6 <HAL_TIM_IC_MspInit+0x1d2>
  else if(htim_ic->Instance==TIM8)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a2b      	ldr	r2, [pc, #172]	; (8007be8 <HAL_TIM_IC_MspInit+0x1f4>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d143      	bne.n	8007bc6 <HAL_TIM_IC_MspInit+0x1d2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	4b24      	ldr	r3, [pc, #144]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b46:	4a23      	ldr	r2, [pc, #140]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007b48:	f043 0302 	orr.w	r3, r3, #2
 8007b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8007b4e:	4b21      	ldr	r3, [pc, #132]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	4b1d      	ldr	r3, [pc, #116]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	4a1c      	ldr	r2, [pc, #112]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007b64:	f043 0304 	orr.w	r3, r3, #4
 8007b68:	6313      	str	r3, [r2, #48]	; 0x30
 8007b6a:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <HAL_TIM_IC_MspInit+0x1e0>)
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	60bb      	str	r3, [r7, #8]
 8007b74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = leftecho_Pin;
 8007b76:	2340      	movs	r3, #64	; 0x40
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b82:	2300      	movs	r3, #0
 8007b84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007b86:	2303      	movs	r3, #3
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(leftecho_GPIO_Port, &GPIO_InitStruct);
 8007b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4811      	ldr	r0, [pc, #68]	; (8007bd8 <HAL_TIM_IC_MspInit+0x1e4>)
 8007b92:	f001 fc59 	bl	8009448 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007b96:	2200      	movs	r2, #0
 8007b98:	2100      	movs	r1, #0
 8007b9a:	202c      	movs	r0, #44	; 0x2c
 8007b9c:	f001 f88d 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007ba0:	202c      	movs	r0, #44	; 0x2c
 8007ba2:	f001 f8a6 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2100      	movs	r1, #0
 8007baa:	202d      	movs	r0, #45	; 0x2d
 8007bac:	f001 f885 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8007bb0:	202d      	movs	r0, #45	; 0x2d
 8007bb2:	f001 f89e 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2100      	movs	r1, #0
 8007bba:	202e      	movs	r0, #46	; 0x2e
 8007bbc:	f001 f87d 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8007bc0:	202e      	movs	r0, #46	; 0x2e
 8007bc2:	f001 f896 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
}
 8007bc6:	bf00      	nop
 8007bc8:	3738      	adds	r7, #56	; 0x38
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	40000400 	.word	0x40000400
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	40020800 	.word	0x40020800
 8007bdc:	40020400 	.word	0x40020400
 8007be0:	40000800 	.word	0x40000800
 8007be4:	40020c00 	.word	0x40020c00
 8007be8:	40010400 	.word	0x40010400

08007bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	; 0x28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bf4:	f107 0314 	add.w	r3, r7, #20
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	605a      	str	r2, [r3, #4]
 8007bfe:	609a      	str	r2, [r3, #8]
 8007c00:	60da      	str	r2, [r3, #12]
 8007c02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a24      	ldr	r2, [pc, #144]	; (8007c9c <HAL_TIM_MspPostInit+0xb0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d11f      	bne.n	8007c4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c0e:	2300      	movs	r3, #0
 8007c10:	613b      	str	r3, [r7, #16]
 8007c12:	4b23      	ldr	r3, [pc, #140]	; (8007ca0 <HAL_TIM_MspPostInit+0xb4>)
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	4a22      	ldr	r2, [pc, #136]	; (8007ca0 <HAL_TIM_MspPostInit+0xb4>)
 8007c18:	f043 0310 	orr.w	r3, r3, #16
 8007c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c1e:	4b20      	ldr	r3, [pc, #128]	; (8007ca0 <HAL_TIM_MspPostInit+0xb4>)
 8007c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 8007c2a:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8007c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c30:	2302      	movs	r3, #2
 8007c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c40:	f107 0314 	add.w	r3, r7, #20
 8007c44:	4619      	mov	r1, r3
 8007c46:	4817      	ldr	r0, [pc, #92]	; (8007ca4 <HAL_TIM_MspPostInit+0xb8>)
 8007c48:	f001 fbfe 	bl	8009448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8007c4c:	e022      	b.n	8007c94 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a15      	ldr	r2, [pc, #84]	; (8007ca8 <HAL_TIM_MspPostInit+0xbc>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d11d      	bne.n	8007c94 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <HAL_TIM_MspPostInit+0xb4>)
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	4a0f      	ldr	r2, [pc, #60]	; (8007ca0 <HAL_TIM_MspPostInit+0xb4>)
 8007c62:	f043 0310 	orr.w	r3, r3, #16
 8007c66:	6313      	str	r3, [r2, #48]	; 0x30
 8007c68:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <HAL_TIM_MspPostInit+0xb4>)
 8007c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007c74:	2360      	movs	r3, #96	; 0x60
 8007c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c80:	2300      	movs	r3, #0
 8007c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8007c84:	2303      	movs	r3, #3
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c88:	f107 0314 	add.w	r3, r7, #20
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4805      	ldr	r0, [pc, #20]	; (8007ca4 <HAL_TIM_MspPostInit+0xb8>)
 8007c90:	f001 fbda 	bl	8009448 <HAL_GPIO_Init>
}
 8007c94:	bf00      	nop
 8007c96:	3728      	adds	r7, #40	; 0x28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	40010000 	.word	0x40010000
 8007ca0:	40023800 	.word	0x40023800
 8007ca4:	40021000 	.word	0x40021000
 8007ca8:	40014000 	.word	0x40014000

08007cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08e      	sub	sp, #56	; 0x38
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	605a      	str	r2, [r3, #4]
 8007cbe:	609a      	str	r2, [r3, #8]
 8007cc0:	60da      	str	r2, [r3, #12]
 8007cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a92      	ldr	r2, [pc, #584]	; (8007f14 <HAL_UART_MspInit+0x268>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d163      	bne.n	8007d96 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007cce:	2300      	movs	r3, #0
 8007cd0:	623b      	str	r3, [r7, #32]
 8007cd2:	4b91      	ldr	r3, [pc, #580]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	4a90      	ldr	r2, [pc, #576]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8007cde:	4b8e      	ldr	r3, [pc, #568]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce6:	623b      	str	r3, [r7, #32]
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cea:	2300      	movs	r3, #0
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	4b8a      	ldr	r3, [pc, #552]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf2:	4a89      	ldr	r2, [pc, #548]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007cf4:	f043 0308 	orr.w	r3, r3, #8
 8007cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8007cfa:	4b87      	ldr	r3, [pc, #540]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfe:	f003 0308 	and.w	r3, r3, #8
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007d06:	2360      	movs	r3, #96	; 0x60
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d12:	2303      	movs	r3, #3
 8007d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007d16:	2307      	movs	r3, #7
 8007d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d1e:	4619      	mov	r1, r3
 8007d20:	487e      	ldr	r0, [pc, #504]	; (8007f1c <HAL_UART_MspInit+0x270>)
 8007d22:	f001 fb91 	bl	8009448 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007d26:	4b7e      	ldr	r3, [pc, #504]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d28:	4a7e      	ldr	r2, [pc, #504]	; (8007f24 <HAL_UART_MspInit+0x278>)
 8007d2a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007d2c:	4b7c      	ldr	r3, [pc, #496]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d32:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007d34:	4b7a      	ldr	r3, [pc, #488]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d3a:	4b79      	ldr	r3, [pc, #484]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007d40:	4b77      	ldr	r3, [pc, #476]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d46:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d48:	4b75      	ldr	r3, [pc, #468]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d4e:	4b74      	ldr	r3, [pc, #464]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8007d54:	4b72      	ldr	r3, [pc, #456]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007d5c:	4b70      	ldr	r3, [pc, #448]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d62:	4b6f      	ldr	r3, [pc, #444]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007d68:	486d      	ldr	r0, [pc, #436]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d6a:	f000 ffdd 	bl	8008d28 <HAL_DMA_Init>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8007d74:	f7ff fc10 	bl	8007598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a69      	ldr	r2, [pc, #420]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8007d7e:	4a68      	ldr	r2, [pc, #416]	; (8007f20 <HAL_UART_MspInit+0x274>)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007d84:	2200      	movs	r2, #0
 8007d86:	2100      	movs	r1, #0
 8007d88:	2026      	movs	r0, #38	; 0x26
 8007d8a:	f000 ff96 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007d8e:	2026      	movs	r0, #38	; 0x26
 8007d90:	f000 ffaf 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007d94:	e0ba      	b.n	8007f0c <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART3)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a63      	ldr	r2, [pc, #396]	; (8007f28 <HAL_UART_MspInit+0x27c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d12d      	bne.n	8007dfc <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007da0:	2300      	movs	r3, #0
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	4b5c      	ldr	r3, [pc, #368]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	4a5b      	ldr	r2, [pc, #364]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007daa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dae:	6413      	str	r3, [r2, #64]	; 0x40
 8007db0:	4b59      	ldr	r3, [pc, #356]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007db8:	61bb      	str	r3, [r7, #24]
 8007dba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	4b55      	ldr	r3, [pc, #340]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc4:	4a54      	ldr	r2, [pc, #336]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007dc6:	f043 0304 	orr.w	r3, r3, #4
 8007dca:	6313      	str	r3, [r2, #48]	; 0x30
 8007dcc:	4b52      	ldr	r3, [pc, #328]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007dd8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dde:	2302      	movs	r3, #2
 8007de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007de6:	2303      	movs	r3, #3
 8007de8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007dea:	2307      	movs	r3, #7
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007df2:	4619      	mov	r1, r3
 8007df4:	484d      	ldr	r0, [pc, #308]	; (8007f2c <HAL_UART_MspInit+0x280>)
 8007df6:	f001 fb27 	bl	8009448 <HAL_GPIO_Init>
}
 8007dfa:	e087      	b.n	8007f0c <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART6)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a4b      	ldr	r2, [pc, #300]	; (8007f30 <HAL_UART_MspInit+0x284>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	f040 8082 	bne.w	8007f0c <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007e08:	2300      	movs	r3, #0
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	4b42      	ldr	r3, [pc, #264]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e10:	4a41      	ldr	r2, [pc, #260]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007e12:	f043 0320 	orr.w	r3, r3, #32
 8007e16:	6453      	str	r3, [r2, #68]	; 0x44
 8007e18:	4b3f      	ldr	r3, [pc, #252]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	4b3b      	ldr	r3, [pc, #236]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2c:	4a3a      	ldr	r2, [pc, #232]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007e2e:	f043 0304 	orr.w	r3, r3, #4
 8007e32:	6313      	str	r3, [r2, #48]	; 0x30
 8007e34:	4b38      	ldr	r3, [pc, #224]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007e40:	2300      	movs	r3, #0
 8007e42:	60bb      	str	r3, [r7, #8]
 8007e44:	4b34      	ldr	r3, [pc, #208]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e48:	4a33      	ldr	r2, [pc, #204]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8007e50:	4b31      	ldr	r3, [pc, #196]	; (8007f18 <HAL_UART_MspInit+0x26c>)
 8007e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e58:	60bb      	str	r3, [r7, #8]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007e5c:	2380      	movs	r3, #128	; 0x80
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e60:	2302      	movs	r3, #2
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e64:	2300      	movs	r3, #0
 8007e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007e6c:	2308      	movs	r3, #8
 8007e6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e74:	4619      	mov	r1, r3
 8007e76:	482d      	ldr	r0, [pc, #180]	; (8007f2c <HAL_UART_MspInit+0x280>)
 8007e78:	f001 fae6 	bl	8009448 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007e7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e82:	2302      	movs	r3, #2
 8007e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007e8e:	2308      	movs	r3, #8
 8007e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e96:	4619      	mov	r1, r3
 8007e98:	4826      	ldr	r0, [pc, #152]	; (8007f34 <HAL_UART_MspInit+0x288>)
 8007e9a:	f001 fad5 	bl	8009448 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007e9e:	4b26      	ldr	r3, [pc, #152]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007ea0:	4a26      	ldr	r2, [pc, #152]	; (8007f3c <HAL_UART_MspInit+0x290>)
 8007ea2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007ea4:	4b24      	ldr	r3, [pc, #144]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007ea6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8007eaa:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007eac:	4b22      	ldr	r3, [pc, #136]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007eb2:	4b21      	ldr	r3, [pc, #132]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007eb8:	4b1f      	ldr	r3, [pc, #124]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ebe:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ec0:	4b1d      	ldr	r3, [pc, #116]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ec6:	4b1c      	ldr	r3, [pc, #112]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007ecc:	4b1a      	ldr	r3, [pc, #104]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ed2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007ed4:	4b18      	ldr	r3, [pc, #96]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007eda:	4b17      	ldr	r3, [pc, #92]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007ee0:	4815      	ldr	r0, [pc, #84]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007ee2:	f000 ff21 	bl	8008d28 <HAL_DMA_Init>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <HAL_UART_MspInit+0x244>
      Error_Handler();
 8007eec:	f7ff fb54 	bl	8007598 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a11      	ldr	r2, [pc, #68]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007ef4:	635a      	str	r2, [r3, #52]	; 0x34
 8007ef6:	4a10      	ldr	r2, [pc, #64]	; (8007f38 <HAL_UART_MspInit+0x28c>)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007efc:	2200      	movs	r2, #0
 8007efe:	2100      	movs	r1, #0
 8007f00:	2047      	movs	r0, #71	; 0x47
 8007f02:	f000 feda 	bl	8008cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007f06:	2047      	movs	r0, #71	; 0x47
 8007f08:	f000 fef3 	bl	8008cf2 <HAL_NVIC_EnableIRQ>
}
 8007f0c:	bf00      	nop
 8007f0e:	3738      	adds	r7, #56	; 0x38
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40004400 	.word	0x40004400
 8007f18:	40023800 	.word	0x40023800
 8007f1c:	40020c00 	.word	0x40020c00
 8007f20:	20000514 	.word	0x20000514
 8007f24:	40026088 	.word	0x40026088
 8007f28:	40004800 	.word	0x40004800
 8007f2c:	40020800 	.word	0x40020800
 8007f30:	40011400 	.word	0x40011400
 8007f34:	40021800 	.word	0x40021800
 8007f38:	20000574 	.word	0x20000574
 8007f3c:	40026428 	.word	0x40026428

08007f40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	; 0x28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f48:	f107 0314 	add.w	r3, r7, #20
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	605a      	str	r2, [r3, #4]
 8007f52:	609a      	str	r2, [r3, #8]
 8007f54:	60da      	str	r2, [r3, #12]
 8007f56:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f60:	d13f      	bne.n	8007fe2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f62:	2300      	movs	r3, #0
 8007f64:	613b      	str	r3, [r7, #16]
 8007f66:	4b21      	ldr	r3, [pc, #132]	; (8007fec <HAL_PCD_MspInit+0xac>)
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	4a20      	ldr	r2, [pc, #128]	; (8007fec <HAL_PCD_MspInit+0xac>)
 8007f6c:	f043 0301 	orr.w	r3, r3, #1
 8007f70:	6313      	str	r3, [r2, #48]	; 0x30
 8007f72:	4b1e      	ldr	r3, [pc, #120]	; (8007fec <HAL_PCD_MspInit+0xac>)
 8007f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	613b      	str	r3, [r7, #16]
 8007f7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007f7e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f84:	2302      	movs	r3, #2
 8007f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f90:	230a      	movs	r3, #10
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4815      	ldr	r0, [pc, #84]	; (8007ff0 <HAL_PCD_MspInit+0xb0>)
 8007f9c:	f001 fa54 	bl	8009448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007fae:	f107 0314 	add.w	r3, r7, #20
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	480e      	ldr	r0, [pc, #56]	; (8007ff0 <HAL_PCD_MspInit+0xb0>)
 8007fb6:	f001 fa47 	bl	8009448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fba:	4b0c      	ldr	r3, [pc, #48]	; (8007fec <HAL_PCD_MspInit+0xac>)
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbe:	4a0b      	ldr	r2, [pc, #44]	; (8007fec <HAL_PCD_MspInit+0xac>)
 8007fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc4:	6353      	str	r3, [r2, #52]	; 0x34
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	4b08      	ldr	r3, [pc, #32]	; (8007fec <HAL_PCD_MspInit+0xac>)
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fce:	4a07      	ldr	r2, [pc, #28]	; (8007fec <HAL_PCD_MspInit+0xac>)
 8007fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8007fd6:	4b05      	ldr	r3, [pc, #20]	; (8007fec <HAL_PCD_MspInit+0xac>)
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8007fe2:	bf00      	nop
 8007fe4:	3728      	adds	r7, #40	; 0x28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	40023800 	.word	0x40023800
 8007ff0:	40020000 	.word	0x40020000

08007ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007ff8:	bf00      	nop
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008002:	b480      	push	{r7}
 8008004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008006:	e7fe      	b.n	8008006 <HardFault_Handler+0x4>

08008008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800800c:	e7fe      	b.n	800800c <MemManage_Handler+0x4>

0800800e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800800e:	b480      	push	{r7}
 8008010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008012:	e7fe      	b.n	8008012 <BusFault_Handler+0x4>

08008014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008018:	e7fe      	b.n	8008018 <UsageFault_Handler+0x4>

0800801a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800801a:	b480      	push	{r7}
 800801c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800801e:	bf00      	nop
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008028:	b480      	push	{r7}
 800802a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800802c:	bf00      	nop
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008036:	b480      	push	{r7}
 8008038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800803a:	bf00      	nop
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008048:	f000 f920 	bl	800828c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800804c:	bf00      	nop
 800804e:	bd80      	pop	{r7, pc}

08008050 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008054:	2001      	movs	r0, #1
 8008056:	f001 fbed 	bl	8009834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800805a:	bf00      	nop
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008064:	4802      	ldr	r0, [pc, #8]	; (8008070 <DMA1_Stream5_IRQHandler+0x10>)
 8008066:	f000 ff87 	bl	8008f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800806a:	bf00      	nop
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000514 	.word	0x20000514

08008074 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008078:	4803      	ldr	r0, [pc, #12]	; (8008088 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800807a:	f003 fb47 	bl	800b70c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800807e:	4803      	ldr	r0, [pc, #12]	; (800808c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8008080:	f003 fb44 	bl	800b70c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008084:	bf00      	nop
 8008086:	bd80      	pop	{r7, pc}
 8008088:	20000194 	.word	0x20000194
 800808c:	20000314 	.word	0x20000314

08008090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008094:	4802      	ldr	r0, [pc, #8]	; (80080a0 <TIM2_IRQHandler+0x10>)
 8008096:	f003 fb39 	bl	800b70c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800809a:	bf00      	nop
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	200001d4 	.word	0x200001d4

080080a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80080a8:	4802      	ldr	r0, [pc, #8]	; (80080b4 <TIM3_IRQHandler+0x10>)
 80080aa:	f003 fb2f 	bl	800b70c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80080ae:	bf00      	nop
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000214 	.word	0x20000214

080080b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80080bc:	4802      	ldr	r0, [pc, #8]	; (80080c8 <TIM4_IRQHandler+0x10>)
 80080be:	f003 fb25 	bl	800b70c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80080c2:	bf00      	nop
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20000254 	.word	0x20000254

080080cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80080d0:	4802      	ldr	r0, [pc, #8]	; (80080dc <USART2_IRQHandler+0x10>)
 80080d2:	f004 fdc7 	bl	800cc64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80080d6:	bf00      	nop
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000454 	.word	0x20000454

080080e0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80080e4:	4803      	ldr	r0, [pc, #12]	; (80080f4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80080e6:	f003 fb11 	bl	800b70c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80080ea:	4803      	ldr	r0, [pc, #12]	; (80080f8 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80080ec:	f003 fb0e 	bl	800b70c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80080f0:	bf00      	nop
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20000294 	.word	0x20000294
 80080f8:	200003d4 	.word	0x200003d4

080080fc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008100:	4803      	ldr	r0, [pc, #12]	; (8008110 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8008102:	f003 fb03 	bl	800b70c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8008106:	4803      	ldr	r0, [pc, #12]	; (8008114 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8008108:	f003 fb00 	bl	800b70c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800810c:	bf00      	nop
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20000294 	.word	0x20000294
 8008114:	20000414 	.word	0x20000414

08008118 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800811c:	4802      	ldr	r0, [pc, #8]	; (8008128 <TIM8_CC_IRQHandler+0x10>)
 800811e:	f003 faf5 	bl	800b70c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8008122:	bf00      	nop
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000294 	.word	0x20000294

0800812c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8008130:	4802      	ldr	r0, [pc, #8]	; (800813c <DMA2_Stream0_IRQHandler+0x10>)
 8008132:	f000 ff21 	bl	8008f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008136:	bf00      	nop
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	200000e0 	.word	0x200000e0

08008140 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8008144:	4802      	ldr	r0, [pc, #8]	; (8008150 <DMA2_Stream1_IRQHandler+0x10>)
 8008146:	f000 ff17 	bl	8008f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800814a:	bf00      	nop
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	20000574 	.word	0x20000574

08008154 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8008158:	4802      	ldr	r0, [pc, #8]	; (8008164 <USART6_IRQHandler+0x10>)
 800815a:	f004 fd83 	bl	800cc64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800815e:	bf00      	nop
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	200004d4 	.word	0x200004d4

08008168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800816c:	4b08      	ldr	r3, [pc, #32]	; (8008190 <SystemInit+0x28>)
 800816e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008172:	4a07      	ldr	r2, [pc, #28]	; (8008190 <SystemInit+0x28>)
 8008174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800817c:	4b04      	ldr	r3, [pc, #16]	; (8008190 <SystemInit+0x28>)
 800817e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008182:	609a      	str	r2, [r3, #8]
#endif
}
 8008184:	bf00      	nop
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	e000ed00 	.word	0xe000ed00

08008194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80081cc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008198:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800819a:	e003      	b.n	80081a4 <LoopCopyDataInit>

0800819c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800819c:	4b0c      	ldr	r3, [pc, #48]	; (80081d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800819e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80081a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80081a2:	3104      	adds	r1, #4

080081a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80081a4:	480b      	ldr	r0, [pc, #44]	; (80081d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80081a6:	4b0c      	ldr	r3, [pc, #48]	; (80081d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80081a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80081aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80081ac:	d3f6      	bcc.n	800819c <CopyDataInit>
  ldr  r2, =_sbss
 80081ae:	4a0b      	ldr	r2, [pc, #44]	; (80081dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80081b0:	e002      	b.n	80081b8 <LoopFillZerobss>

080081b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80081b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80081b4:	f842 3b04 	str.w	r3, [r2], #4

080081b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80081b8:	4b09      	ldr	r3, [pc, #36]	; (80081e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80081ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80081bc:	d3f9      	bcc.n	80081b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80081be:	f7ff ffd3 	bl	8008168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80081c2:	f006 ff09 	bl	800efd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80081c6:	f7fd f8cf 	bl	8005368 <main>
  bx  lr    
 80081ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80081cc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80081d0:	0800f0c4 	.word	0x0800f0c4
  ldr  r0, =_sdata
 80081d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80081d8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80081dc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80081e0:	2000273c 	.word	0x2000273c

080081e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80081e4:	e7fe      	b.n	80081e4 <ADC_IRQHandler>
	...

080081e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80081ec:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <HAL_Init+0x40>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a0d      	ldr	r2, [pc, #52]	; (8008228 <HAL_Init+0x40>)
 80081f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80081f8:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <HAL_Init+0x40>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a0a      	ldr	r2, [pc, #40]	; (8008228 <HAL_Init+0x40>)
 80081fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008204:	4b08      	ldr	r3, [pc, #32]	; (8008228 <HAL_Init+0x40>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a07      	ldr	r2, [pc, #28]	; (8008228 <HAL_Init+0x40>)
 800820a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800820e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008210:	2003      	movs	r0, #3
 8008212:	f000 fd47 	bl	8008ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008216:	2000      	movs	r0, #0
 8008218:	f000 f808 	bl	800822c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800821c:	f7ff fa04 	bl	8007628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	40023c00 	.word	0x40023c00

0800822c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008234:	4b12      	ldr	r3, [pc, #72]	; (8008280 <HAL_InitTick+0x54>)
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	4b12      	ldr	r3, [pc, #72]	; (8008284 <HAL_InitTick+0x58>)
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	4619      	mov	r1, r3
 800823e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008242:	fbb3 f3f1 	udiv	r3, r3, r1
 8008246:	fbb2 f3f3 	udiv	r3, r2, r3
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fd5f 	bl	8008d0e <HAL_SYSTICK_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e00e      	b.n	8008278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b0f      	cmp	r3, #15
 800825e:	d80a      	bhi.n	8008276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008260:	2200      	movs	r2, #0
 8008262:	6879      	ldr	r1, [r7, #4]
 8008264:	f04f 30ff 	mov.w	r0, #4294967295
 8008268:	f000 fd27 	bl	8008cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800826c:	4a06      	ldr	r2, [pc, #24]	; (8008288 <HAL_InitTick+0x5c>)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	e000      	b.n	8008278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	2000000c 	.word	0x2000000c
 8008284:	20000014 	.word	0x20000014
 8008288:	20000010 	.word	0x20000010

0800828c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008290:	4b06      	ldr	r3, [pc, #24]	; (80082ac <HAL_IncTick+0x20>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	461a      	mov	r2, r3
 8008296:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <HAL_IncTick+0x24>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4413      	add	r3, r2
 800829c:	4a04      	ldr	r2, [pc, #16]	; (80082b0 <HAL_IncTick+0x24>)
 800829e:	6013      	str	r3, [r2, #0]
}
 80082a0:	bf00      	nop
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	20000014 	.word	0x20000014
 80082b0:	20002738 	.word	0x20002738

080082b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082b4:	b480      	push	{r7}
 80082b6:	af00      	add	r7, sp, #0
  return uwTick;
 80082b8:	4b03      	ldr	r3, [pc, #12]	; (80082c8 <HAL_GetTick+0x14>)
 80082ba:	681b      	ldr	r3, [r3, #0]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	20002738 	.word	0x20002738

080082cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80082d4:	f7ff ffee 	bl	80082b4 <HAL_GetTick>
 80082d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e4:	d005      	beq.n	80082f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80082e6:	4b09      	ldr	r3, [pc, #36]	; (800830c <HAL_Delay+0x40>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80082f2:	bf00      	nop
 80082f4:	f7ff ffde 	bl	80082b4 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	429a      	cmp	r2, r3
 8008302:	d8f7      	bhi.n	80082f4 <HAL_Delay+0x28>
  {
  }
}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20000014 	.word	0x20000014

08008310 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e033      	b.n	800838e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	2b00      	cmp	r3, #0
 800832c:	d109      	bne.n	8008342 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff f9a2 	bl	8007678 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	f003 0310 	and.w	r3, r3, #16
 800834a:	2b00      	cmp	r3, #0
 800834c:	d118      	bne.n	8008380 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008352:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008356:	f023 0302 	bic.w	r3, r3, #2
 800835a:	f043 0202 	orr.w	r2, r3, #2
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fa50 	bl	8008808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	f043 0201 	orr.w	r2, r3, #1
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	641a      	str	r2, [r3, #64]	; 0x40
 800837e:	e001      	b.n	8008384 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_ADC_Start_DMA+0x1e>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e0cc      	b.n	8008550 <HAL_ADC_Start_DMA+0x1b8>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d018      	beq.n	80083fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0201 	orr.w	r2, r2, #1
 80083da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80083dc:	4b5e      	ldr	r3, [pc, #376]	; (8008558 <HAL_ADC_Start_DMA+0x1c0>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a5e      	ldr	r2, [pc, #376]	; (800855c <HAL_ADC_Start_DMA+0x1c4>)
 80083e2:	fba2 2303 	umull	r2, r3, r2, r3
 80083e6:	0c9a      	lsrs	r2, r3, #18
 80083e8:	4613      	mov	r3, r2
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	4413      	add	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80083f0:	e002      	b.n	80083f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1f9      	bne.n	80083f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b01      	cmp	r3, #1
 800840a:	f040 80a0 	bne.w	800854e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008416:	f023 0301 	bic.w	r3, r3, #1
 800841a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800842c:	2b00      	cmp	r3, #0
 800842e:	d007      	beq.n	8008440 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008434:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008438:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800844c:	d106      	bne.n	800845c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008452:	f023 0206 	bic.w	r2, r3, #6
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	645a      	str	r2, [r3, #68]	; 0x44
 800845a:	e002      	b.n	8008462 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800846a:	4b3d      	ldr	r3, [pc, #244]	; (8008560 <HAL_ADC_Start_DMA+0x1c8>)
 800846c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008472:	4a3c      	ldr	r2, [pc, #240]	; (8008564 <HAL_ADC_Start_DMA+0x1cc>)
 8008474:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	4a3b      	ldr	r2, [pc, #236]	; (8008568 <HAL_ADC_Start_DMA+0x1d0>)
 800847c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008482:	4a3a      	ldr	r2, [pc, #232]	; (800856c <HAL_ADC_Start_DMA+0x1d4>)
 8008484:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800848e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800849e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	334c      	adds	r3, #76	; 0x4c
 80084ba:	4619      	mov	r1, r3
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f000 fce0 	bl	8008e84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f003 031f 	and.w	r3, r3, #31
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d12a      	bne.n	8008526 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a26      	ldr	r2, [pc, #152]	; (8008570 <HAL_ADC_Start_DMA+0x1d8>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d015      	beq.n	8008506 <HAL_ADC_Start_DMA+0x16e>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a25      	ldr	r2, [pc, #148]	; (8008574 <HAL_ADC_Start_DMA+0x1dc>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d105      	bne.n	80084f0 <HAL_ADC_Start_DMA+0x158>
 80084e4:	4b1e      	ldr	r3, [pc, #120]	; (8008560 <HAL_ADC_Start_DMA+0x1c8>)
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f003 031f 	and.w	r3, r3, #31
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a20      	ldr	r2, [pc, #128]	; (8008578 <HAL_ADC_Start_DMA+0x1e0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d129      	bne.n	800854e <HAL_ADC_Start_DMA+0x1b6>
 80084fa:	4b19      	ldr	r3, [pc, #100]	; (8008560 <HAL_ADC_Start_DMA+0x1c8>)
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f003 031f 	and.w	r3, r3, #31
 8008502:	2b0f      	cmp	r3, #15
 8008504:	d823      	bhi.n	800854e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d11c      	bne.n	800854e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689a      	ldr	r2, [r3, #8]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008522:	609a      	str	r2, [r3, #8]
 8008524:	e013      	b.n	800854e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a11      	ldr	r2, [pc, #68]	; (8008570 <HAL_ADC_Start_DMA+0x1d8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d10e      	bne.n	800854e <HAL_ADC_Start_DMA+0x1b6>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d107      	bne.n	800854e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800854c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	2000000c 	.word	0x2000000c
 800855c:	431bde83 	.word	0x431bde83
 8008560:	40012300 	.word	0x40012300
 8008564:	08008a01 	.word	0x08008a01
 8008568:	08008abb 	.word	0x08008abb
 800856c:	08008ad7 	.word	0x08008ad7
 8008570:	40012000 	.word	0x40012000
 8008574:	40012100 	.word	0x40012100
 8008578:	40012200 	.word	0x40012200

0800857c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d101      	bne.n	80085c0 <HAL_ADC_ConfigChannel+0x1c>
 80085bc:	2302      	movs	r3, #2
 80085be:	e113      	b.n	80087e8 <HAL_ADC_ConfigChannel+0x244>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b09      	cmp	r3, #9
 80085ce:	d925      	bls.n	800861c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68d9      	ldr	r1, [r3, #12]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	461a      	mov	r2, r3
 80085de:	4613      	mov	r3, r2
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	4413      	add	r3, r2
 80085e4:	3b1e      	subs	r3, #30
 80085e6:	2207      	movs	r2, #7
 80085e8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ec:	43da      	mvns	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	400a      	ands	r2, r1
 80085f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68d9      	ldr	r1, [r3, #12]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	b29b      	uxth	r3, r3
 8008606:	4618      	mov	r0, r3
 8008608:	4603      	mov	r3, r0
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	4403      	add	r3, r0
 800860e:	3b1e      	subs	r3, #30
 8008610:	409a      	lsls	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	60da      	str	r2, [r3, #12]
 800861a:	e022      	b.n	8008662 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6919      	ldr	r1, [r3, #16]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	461a      	mov	r2, r3
 800862a:	4613      	mov	r3, r2
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	4413      	add	r3, r2
 8008630:	2207      	movs	r2, #7
 8008632:	fa02 f303 	lsl.w	r3, r2, r3
 8008636:	43da      	mvns	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	400a      	ands	r2, r1
 800863e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6919      	ldr	r1, [r3, #16]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	b29b      	uxth	r3, r3
 8008650:	4618      	mov	r0, r3
 8008652:	4603      	mov	r3, r0
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	4403      	add	r3, r0
 8008658:	409a      	lsls	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b06      	cmp	r3, #6
 8008668:	d824      	bhi.n	80086b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	4613      	mov	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	3b05      	subs	r3, #5
 800867c:	221f      	movs	r2, #31
 800867e:	fa02 f303 	lsl.w	r3, r2, r3
 8008682:	43da      	mvns	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	400a      	ands	r2, r1
 800868a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	4618      	mov	r0, r3
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	3b05      	subs	r3, #5
 80086a6:	fa00 f203 	lsl.w	r2, r0, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	635a      	str	r2, [r3, #52]	; 0x34
 80086b2:	e04c      	b.n	800874e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b0c      	cmp	r3, #12
 80086ba:	d824      	bhi.n	8008706 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	4613      	mov	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	3b23      	subs	r3, #35	; 0x23
 80086ce:	221f      	movs	r2, #31
 80086d0:	fa02 f303 	lsl.w	r3, r2, r3
 80086d4:	43da      	mvns	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	400a      	ands	r2, r1
 80086dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	4618      	mov	r0, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	3b23      	subs	r3, #35	; 0x23
 80086f8:	fa00 f203 	lsl.w	r2, r0, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	631a      	str	r2, [r3, #48]	; 0x30
 8008704:	e023      	b.n	800874e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	3b41      	subs	r3, #65	; 0x41
 8008718:	221f      	movs	r2, #31
 800871a:	fa02 f303 	lsl.w	r3, r2, r3
 800871e:	43da      	mvns	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	400a      	ands	r2, r1
 8008726:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	b29b      	uxth	r3, r3
 8008734:	4618      	mov	r0, r3
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	3b41      	subs	r3, #65	; 0x41
 8008742:	fa00 f203 	lsl.w	r2, r0, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800874e:	4b29      	ldr	r3, [pc, #164]	; (80087f4 <HAL_ADC_ConfigChannel+0x250>)
 8008750:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a28      	ldr	r2, [pc, #160]	; (80087f8 <HAL_ADC_ConfigChannel+0x254>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d10f      	bne.n	800877c <HAL_ADC_ConfigChannel+0x1d8>
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b12      	cmp	r3, #18
 8008762:	d10b      	bne.n	800877c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a1d      	ldr	r2, [pc, #116]	; (80087f8 <HAL_ADC_ConfigChannel+0x254>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d12b      	bne.n	80087de <HAL_ADC_ConfigChannel+0x23a>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a1c      	ldr	r2, [pc, #112]	; (80087fc <HAL_ADC_ConfigChannel+0x258>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d003      	beq.n	8008798 <HAL_ADC_ConfigChannel+0x1f4>
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b11      	cmp	r3, #17
 8008796:	d122      	bne.n	80087de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a11      	ldr	r2, [pc, #68]	; (80087fc <HAL_ADC_ConfigChannel+0x258>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d111      	bne.n	80087de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80087ba:	4b11      	ldr	r3, [pc, #68]	; (8008800 <HAL_ADC_ConfigChannel+0x25c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a11      	ldr	r2, [pc, #68]	; (8008804 <HAL_ADC_ConfigChannel+0x260>)
 80087c0:	fba2 2303 	umull	r2, r3, r2, r3
 80087c4:	0c9a      	lsrs	r2, r3, #18
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80087d0:	e002      	b.n	80087d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1f9      	bne.n	80087d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	40012300 	.word	0x40012300
 80087f8:	40012000 	.word	0x40012000
 80087fc:	10000012 	.word	0x10000012
 8008800:	2000000c 	.word	0x2000000c
 8008804:	431bde83 	.word	0x431bde83

08008808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008810:	4b79      	ldr	r3, [pc, #484]	; (80089f8 <ADC_Init+0x1f0>)
 8008812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	431a      	orrs	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800883c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6859      	ldr	r1, [r3, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	021a      	lsls	r2, r3, #8
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6859      	ldr	r1, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689a      	ldr	r2, [r3, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6899      	ldr	r1, [r3, #8]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	4a58      	ldr	r2, [pc, #352]	; (80089fc <ADC_Init+0x1f4>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d022      	beq.n	80088e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689a      	ldr	r2, [r3, #8]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80088ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6899      	ldr	r1, [r3, #8]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80088d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6899      	ldr	r1, [r3, #8]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	609a      	str	r2, [r3, #8]
 80088e4:	e00f      	b.n	8008906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80088f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0202 	bic.w	r2, r2, #2
 8008914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6899      	ldr	r1, [r3, #8]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	7e1b      	ldrb	r3, [r3, #24]
 8008920:	005a      	lsls	r2, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01b      	beq.n	800896c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6859      	ldr	r1, [r3, #4]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	3b01      	subs	r3, #1
 8008960:	035a      	lsls	r2, r3, #13
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	605a      	str	r2, [r3, #4]
 800896a:	e007      	b.n	800897c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800897a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800898a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	3b01      	subs	r3, #1
 8008998:	051a      	lsls	r2, r3, #20
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80089b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6899      	ldr	r1, [r3, #8]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089be:	025a      	lsls	r2, r3, #9
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6899      	ldr	r1, [r3, #8]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	029a      	lsls	r2, r3, #10
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	609a      	str	r2, [r3, #8]
}
 80089ec:	bf00      	nop
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	40012300 	.word	0x40012300
 80089fc:	0f000001 	.word	0x0f000001

08008a00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d13c      	bne.n	8008a94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d12b      	bne.n	8008a8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d127      	bne.n	8008a8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d006      	beq.n	8008a58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d119      	bne.n	8008a8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0220 	bic.w	r2, r2, #32
 8008a66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d105      	bne.n	8008a8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a84:	f043 0201 	orr.w	r2, r3, #1
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f7fd fe69 	bl	8006764 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008a92:	e00e      	b.n	8008ab2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a98:	f003 0310 	and.w	r3, r3, #16
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7ff fd75 	bl	8008590 <HAL_ADC_ErrorCallback>
}
 8008aa6:	e004      	b.n	8008ab2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
}
 8008ab2:	bf00      	nop
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f7ff fd57 	bl	800857c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ace:	bf00      	nop
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2240      	movs	r2, #64	; 0x40
 8008ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aee:	f043 0204 	orr.w	r2, r3, #4
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7ff fd4a 	bl	8008590 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008afc:	bf00      	nop
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f003 0307 	and.w	r3, r3, #7
 8008b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b14:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <__NVIC_SetPriorityGrouping+0x44>)
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b20:	4013      	ands	r3, r2
 8008b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b36:	4a04      	ldr	r2, [pc, #16]	; (8008b48 <__NVIC_SetPriorityGrouping+0x44>)
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	60d3      	str	r3, [r2, #12]
}
 8008b3c:	bf00      	nop
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	e000ed00 	.word	0xe000ed00

08008b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b50:	4b04      	ldr	r3, [pc, #16]	; (8008b64 <__NVIC_GetPriorityGrouping+0x18>)
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	0a1b      	lsrs	r3, r3, #8
 8008b56:	f003 0307 	and.w	r3, r3, #7
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	e000ed00 	.word	0xe000ed00

08008b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	db0b      	blt.n	8008b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
 8008b7c:	f003 021f 	and.w	r2, r3, #31
 8008b80:	4907      	ldr	r1, [pc, #28]	; (8008ba0 <__NVIC_EnableIRQ+0x38>)
 8008b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b86:	095b      	lsrs	r3, r3, #5
 8008b88:	2001      	movs	r0, #1
 8008b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8008b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008b92:	bf00      	nop
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	e000e100 	.word	0xe000e100

08008ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	4603      	mov	r3, r0
 8008bac:	6039      	str	r1, [r7, #0]
 8008bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	db0a      	blt.n	8008bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	490c      	ldr	r1, [pc, #48]	; (8008bf0 <__NVIC_SetPriority+0x4c>)
 8008bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bc2:	0112      	lsls	r2, r2, #4
 8008bc4:	b2d2      	uxtb	r2, r2
 8008bc6:	440b      	add	r3, r1
 8008bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008bcc:	e00a      	b.n	8008be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	4908      	ldr	r1, [pc, #32]	; (8008bf4 <__NVIC_SetPriority+0x50>)
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	3b04      	subs	r3, #4
 8008bdc:	0112      	lsls	r2, r2, #4
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	440b      	add	r3, r1
 8008be2:	761a      	strb	r2, [r3, #24]
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	e000e100 	.word	0xe000e100
 8008bf4:	e000ed00 	.word	0xe000ed00

08008bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b089      	sub	sp, #36	; 0x24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	f1c3 0307 	rsb	r3, r3, #7
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	bf28      	it	cs
 8008c16:	2304      	movcs	r3, #4
 8008c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	2b06      	cmp	r3, #6
 8008c20:	d902      	bls.n	8008c28 <NVIC_EncodePriority+0x30>
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	3b03      	subs	r3, #3
 8008c26:	e000      	b.n	8008c2a <NVIC_EncodePriority+0x32>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	fa02 f303 	lsl.w	r3, r2, r3
 8008c36:	43da      	mvns	r2, r3
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	401a      	ands	r2, r3
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c40:	f04f 31ff 	mov.w	r1, #4294967295
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	fa01 f303 	lsl.w	r3, r1, r3
 8008c4a:	43d9      	mvns	r1, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c50:	4313      	orrs	r3, r2
         );
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3724      	adds	r7, #36	; 0x24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c70:	d301      	bcc.n	8008c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c72:	2301      	movs	r3, #1
 8008c74:	e00f      	b.n	8008c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c76:	4a0a      	ldr	r2, [pc, #40]	; (8008ca0 <SysTick_Config+0x40>)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c7e:	210f      	movs	r1, #15
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	f7ff ff8e 	bl	8008ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <SysTick_Config+0x40>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c8e:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <SysTick_Config+0x40>)
 8008c90:	2207      	movs	r2, #7
 8008c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	e000e010 	.word	0xe000e010

08008ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff ff29 	bl	8008b04 <__NVIC_SetPriorityGrouping>
}
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b086      	sub	sp, #24
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	607a      	str	r2, [r7, #4]
 8008cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ccc:	f7ff ff3e 	bl	8008b4c <__NVIC_GetPriorityGrouping>
 8008cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	68b9      	ldr	r1, [r7, #8]
 8008cd6:	6978      	ldr	r0, [r7, #20]
 8008cd8:	f7ff ff8e 	bl	8008bf8 <NVIC_EncodePriority>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7ff ff5d 	bl	8008ba4 <__NVIC_SetPriority>
}
 8008cea:	bf00      	nop
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7ff ff31 	bl	8008b68 <__NVIC_EnableIRQ>
}
 8008d06:	bf00      	nop
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff ffa2 	bl	8008c60 <SysTick_Config>
 8008d1c:	4603      	mov	r3, r0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008d34:	f7ff fabe 	bl	80082b4 <HAL_GetTick>
 8008d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e099      	b.n	8008e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 0201 	bic.w	r2, r2, #1
 8008d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d64:	e00f      	b.n	8008d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008d66:	f7ff faa5 	bl	80082b4 <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	2b05      	cmp	r3, #5
 8008d72:	d908      	bls.n	8008d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2220      	movs	r2, #32
 8008d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e078      	b.n	8008e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e8      	bne.n	8008d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	4b38      	ldr	r3, [pc, #224]	; (8008e80 <HAL_DMA_Init+0x158>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	2b04      	cmp	r3, #4
 8008dde:	d107      	bne.n	8008df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de8:	4313      	orrs	r3, r2
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f023 0307 	bic.w	r3, r3, #7
 8008e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d117      	bne.n	8008e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00e      	beq.n	8008e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fa91 	bl	8009354 <DMA_CheckFifoParam>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d008      	beq.n	8008e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2240      	movs	r2, #64	; 0x40
 8008e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008e46:	2301      	movs	r3, #1
 8008e48:	e016      	b.n	8008e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa48 	bl	80092e8 <DMA_CalcBaseAndBitshift>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e60:	223f      	movs	r2, #63	; 0x3f
 8008e62:	409a      	lsls	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	f010803f 	.word	0xf010803f

08008e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d101      	bne.n	8008eaa <HAL_DMA_Start_IT+0x26>
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	e040      	b.n	8008f2c <HAL_DMA_Start_IT+0xa8>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d12f      	bne.n	8008f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	68b9      	ldr	r1, [r7, #8]
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 f9da 	bl	800928c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008edc:	223f      	movs	r2, #63	; 0x3f
 8008ede:	409a      	lsls	r2, r3
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0216 	orr.w	r2, r2, #22
 8008ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d007      	beq.n	8008f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 0208 	orr.w	r2, r2, #8
 8008f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f042 0201 	orr.w	r2, r2, #1
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	e005      	b.n	8008f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008f26:	2302      	movs	r3, #2
 8008f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d004      	beq.n	8008f52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2280      	movs	r2, #128	; 0x80
 8008f4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e00c      	b.n	8008f6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2205      	movs	r2, #5
 8008f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0201 	bic.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008f84:	4b92      	ldr	r3, [pc, #584]	; (80091d0 <HAL_DMA_IRQHandler+0x258>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a92      	ldr	r2, [pc, #584]	; (80091d4 <HAL_DMA_IRQHandler+0x25c>)
 8008f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8e:	0a9b      	lsrs	r3, r3, #10
 8008f90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fa2:	2208      	movs	r2, #8
 8008fa4:	409a      	lsls	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4013      	ands	r3, r2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d01a      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d013      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0204 	bic.w	r2, r2, #4
 8008fca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd0:	2208      	movs	r2, #8
 8008fd2:	409a      	lsls	r2, r3
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fdc:	f043 0201 	orr.w	r2, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe8:	2201      	movs	r2, #1
 8008fea:	409a      	lsls	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d012      	beq.n	800901a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00b      	beq.n	800901a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009006:	2201      	movs	r2, #1
 8009008:	409a      	lsls	r2, r3
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009012:	f043 0202 	orr.w	r2, r3, #2
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800901e:	2204      	movs	r2, #4
 8009020:	409a      	lsls	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	4013      	ands	r3, r2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d012      	beq.n	8009050 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0302 	and.w	r3, r3, #2
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800903c:	2204      	movs	r2, #4
 800903e:	409a      	lsls	r2, r3
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009048:	f043 0204 	orr.w	r2, r3, #4
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009054:	2210      	movs	r2, #16
 8009056:	409a      	lsls	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4013      	ands	r3, r2
 800905c:	2b00      	cmp	r3, #0
 800905e:	d043      	beq.n	80090e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0308 	and.w	r3, r3, #8
 800906a:	2b00      	cmp	r3, #0
 800906c:	d03c      	beq.n	80090e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009072:	2210      	movs	r2, #16
 8009074:	409a      	lsls	r2, r3
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d018      	beq.n	80090ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d108      	bne.n	80090a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	2b00      	cmp	r3, #0
 800909c:	d024      	beq.n	80090e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	4798      	blx	r3
 80090a6:	e01f      	b.n	80090e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01b      	beq.n	80090e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	4798      	blx	r3
 80090b8:	e016      	b.n	80090e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d107      	bne.n	80090d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0208 	bic.w	r2, r2, #8
 80090d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ec:	2220      	movs	r2, #32
 80090ee:	409a      	lsls	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4013      	ands	r3, r2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 808e 	beq.w	8009216 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0310 	and.w	r3, r3, #16
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 8086 	beq.w	8009216 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910e:	2220      	movs	r2, #32
 8009110:	409a      	lsls	r2, r3
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b05      	cmp	r3, #5
 8009120:	d136      	bne.n	8009190 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0216 	bic.w	r2, r2, #22
 8009130:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	695a      	ldr	r2, [r3, #20]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009140:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <HAL_DMA_IRQHandler+0x1da>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800914e:	2b00      	cmp	r3, #0
 8009150:	d007      	beq.n	8009162 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f022 0208 	bic.w	r2, r2, #8
 8009160:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009166:	223f      	movs	r2, #63	; 0x3f
 8009168:	409a      	lsls	r2, r3
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009182:	2b00      	cmp	r3, #0
 8009184:	d07d      	beq.n	8009282 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	4798      	blx	r3
        }
        return;
 800918e:	e078      	b.n	8009282 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01c      	beq.n	80091d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d108      	bne.n	80091be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d030      	beq.n	8009216 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	4798      	blx	r3
 80091bc:	e02b      	b.n	8009216 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d027      	beq.n	8009216 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	4798      	blx	r3
 80091ce:	e022      	b.n	8009216 <HAL_DMA_IRQHandler+0x29e>
 80091d0:	2000000c 	.word	0x2000000c
 80091d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10f      	bne.n	8009206 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 0210 	bic.w	r2, r2, #16
 80091f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921a:	2b00      	cmp	r3, #0
 800921c:	d032      	beq.n	8009284 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d022      	beq.n	8009270 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2205      	movs	r2, #5
 800922e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 0201 	bic.w	r2, r2, #1
 8009240:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	3301      	adds	r3, #1
 8009246:	60bb      	str	r3, [r7, #8]
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	429a      	cmp	r2, r3
 800924c:	d307      	bcc.n	800925e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1f2      	bne.n	8009242 <HAL_DMA_IRQHandler+0x2ca>
 800925c:	e000      	b.n	8009260 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800925e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	4798      	blx	r3
 8009280:	e000      	b.n	8009284 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009282:	bf00      	nop
    }
  }
}
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop

0800928c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80092a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	2b40      	cmp	r3, #64	; 0x40
 80092b8:	d108      	bne.n	80092cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80092ca:	e007      	b.n	80092dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	60da      	str	r2, [r3, #12]
}
 80092dc:	bf00      	nop
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	3b10      	subs	r3, #16
 80092f8:	4a14      	ldr	r2, [pc, #80]	; (800934c <DMA_CalcBaseAndBitshift+0x64>)
 80092fa:	fba2 2303 	umull	r2, r3, r2, r3
 80092fe:	091b      	lsrs	r3, r3, #4
 8009300:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009302:	4a13      	ldr	r2, [pc, #76]	; (8009350 <DMA_CalcBaseAndBitshift+0x68>)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4413      	add	r3, r2
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b03      	cmp	r3, #3
 8009314:	d909      	bls.n	800932a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800931e:	f023 0303 	bic.w	r3, r3, #3
 8009322:	1d1a      	adds	r2, r3, #4
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	659a      	str	r2, [r3, #88]	; 0x58
 8009328:	e007      	b.n	800933a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	aaaaaaab 	.word	0xaaaaaaab
 8009350:	0800f060 	.word	0x0800f060

08009354 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009364:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d11f      	bne.n	80093ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b03      	cmp	r3, #3
 8009372:	d855      	bhi.n	8009420 <DMA_CheckFifoParam+0xcc>
 8009374:	a201      	add	r2, pc, #4	; (adr r2, 800937c <DMA_CheckFifoParam+0x28>)
 8009376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937a:	bf00      	nop
 800937c:	0800938d 	.word	0x0800938d
 8009380:	0800939f 	.word	0x0800939f
 8009384:	0800938d 	.word	0x0800938d
 8009388:	08009421 	.word	0x08009421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d045      	beq.n	8009424 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800939c:	e042      	b.n	8009424 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80093a6:	d13f      	bne.n	8009428 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093ac:	e03c      	b.n	8009428 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093b6:	d121      	bne.n	80093fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d836      	bhi.n	800942c <DMA_CheckFifoParam+0xd8>
 80093be:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <DMA_CheckFifoParam+0x70>)
 80093c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c4:	080093d5 	.word	0x080093d5
 80093c8:	080093db 	.word	0x080093db
 80093cc:	080093d5 	.word	0x080093d5
 80093d0:	080093ed 	.word	0x080093ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	73fb      	strb	r3, [r7, #15]
      break;
 80093d8:	e02f      	b.n	800943a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d024      	beq.n	8009430 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093ea:	e021      	b.n	8009430 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80093f4:	d11e      	bne.n	8009434 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80093fa:	e01b      	b.n	8009434 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d902      	bls.n	8009408 <DMA_CheckFifoParam+0xb4>
 8009402:	2b03      	cmp	r3, #3
 8009404:	d003      	beq.n	800940e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009406:	e018      	b.n	800943a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	73fb      	strb	r3, [r7, #15]
      break;
 800940c:	e015      	b.n	800943a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00e      	beq.n	8009438 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	73fb      	strb	r3, [r7, #15]
      break;
 800941e:	e00b      	b.n	8009438 <DMA_CheckFifoParam+0xe4>
      break;
 8009420:	bf00      	nop
 8009422:	e00a      	b.n	800943a <DMA_CheckFifoParam+0xe6>
      break;
 8009424:	bf00      	nop
 8009426:	e008      	b.n	800943a <DMA_CheckFifoParam+0xe6>
      break;
 8009428:	bf00      	nop
 800942a:	e006      	b.n	800943a <DMA_CheckFifoParam+0xe6>
      break;
 800942c:	bf00      	nop
 800942e:	e004      	b.n	800943a <DMA_CheckFifoParam+0xe6>
      break;
 8009430:	bf00      	nop
 8009432:	e002      	b.n	800943a <DMA_CheckFifoParam+0xe6>
      break;   
 8009434:	bf00      	nop
 8009436:	e000      	b.n	800943a <DMA_CheckFifoParam+0xe6>
      break;
 8009438:	bf00      	nop
    }
  } 
  
  return status; 
 800943a:	7bfb      	ldrb	r3, [r7, #15]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009448:	b480      	push	{r7}
 800944a:	b089      	sub	sp, #36	; 0x24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009452:	2300      	movs	r3, #0
 8009454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009456:	2300      	movs	r3, #0
 8009458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800945a:	2300      	movs	r3, #0
 800945c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800945e:	2300      	movs	r3, #0
 8009460:	61fb      	str	r3, [r7, #28]
 8009462:	e177      	b.n	8009754 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009464:	2201      	movs	r2, #1
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	fa02 f303 	lsl.w	r3, r2, r3
 800946c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	4013      	ands	r3, r2
 8009476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	429a      	cmp	r2, r3
 800947e:	f040 8166 	bne.w	800974e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d00b      	beq.n	80094a2 <HAL_GPIO_Init+0x5a>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	2b02      	cmp	r3, #2
 8009490:	d007      	beq.n	80094a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009496:	2b11      	cmp	r3, #17
 8009498:	d003      	beq.n	80094a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	2b12      	cmp	r3, #18
 80094a0:	d130      	bne.n	8009504 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	2203      	movs	r2, #3
 80094ae:	fa02 f303 	lsl.w	r3, r2, r3
 80094b2:	43db      	mvns	r3, r3
 80094b4:	69ba      	ldr	r2, [r7, #24]
 80094b6:	4013      	ands	r3, r2
 80094b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	68da      	ldr	r2, [r3, #12]
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	fa02 f303 	lsl.w	r3, r2, r3
 80094c6:	69ba      	ldr	r2, [r7, #24]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80094d8:	2201      	movs	r2, #1
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	fa02 f303 	lsl.w	r3, r2, r3
 80094e0:	43db      	mvns	r3, r3
 80094e2:	69ba      	ldr	r2, [r7, #24]
 80094e4:	4013      	ands	r3, r2
 80094e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	091b      	lsrs	r3, r3, #4
 80094ee:	f003 0201 	and.w	r2, r3, #1
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	fa02 f303 	lsl.w	r3, r2, r3
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	2203      	movs	r2, #3
 8009510:	fa02 f303 	lsl.w	r3, r2, r3
 8009514:	43db      	mvns	r3, r3
 8009516:	69ba      	ldr	r2, [r7, #24]
 8009518:	4013      	ands	r3, r2
 800951a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	005b      	lsls	r3, r3, #1
 8009524:	fa02 f303 	lsl.w	r3, r2, r3
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	4313      	orrs	r3, r2
 800952c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d003      	beq.n	8009544 <HAL_GPIO_Init+0xfc>
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	2b12      	cmp	r3, #18
 8009542:	d123      	bne.n	800958c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	08da      	lsrs	r2, r3, #3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	3208      	adds	r2, #8
 800954c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	f003 0307 	and.w	r3, r3, #7
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	220f      	movs	r2, #15
 800955c:	fa02 f303 	lsl.w	r3, r2, r3
 8009560:	43db      	mvns	r3, r3
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	4013      	ands	r3, r2
 8009566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	691a      	ldr	r2, [r3, #16]
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	fa02 f303 	lsl.w	r3, r2, r3
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	4313      	orrs	r3, r2
 800957c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	08da      	lsrs	r2, r3, #3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3208      	adds	r2, #8
 8009586:	69b9      	ldr	r1, [r7, #24]
 8009588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	2203      	movs	r2, #3
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	43db      	mvns	r3, r3
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	4013      	ands	r3, r2
 80095a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f003 0203 	and.w	r2, r3, #3
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	fa02 f303 	lsl.w	r3, r2, r3
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 80c0 	beq.w	800974e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095ce:	2300      	movs	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]
 80095d2:	4b65      	ldr	r3, [pc, #404]	; (8009768 <HAL_GPIO_Init+0x320>)
 80095d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d6:	4a64      	ldr	r2, [pc, #400]	; (8009768 <HAL_GPIO_Init+0x320>)
 80095d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095dc:	6453      	str	r3, [r2, #68]	; 0x44
 80095de:	4b62      	ldr	r3, [pc, #392]	; (8009768 <HAL_GPIO_Init+0x320>)
 80095e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80095ea:	4a60      	ldr	r2, [pc, #384]	; (800976c <HAL_GPIO_Init+0x324>)
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	089b      	lsrs	r3, r3, #2
 80095f0:	3302      	adds	r3, #2
 80095f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	f003 0303 	and.w	r3, r3, #3
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	220f      	movs	r2, #15
 8009602:	fa02 f303 	lsl.w	r3, r2, r3
 8009606:	43db      	mvns	r3, r3
 8009608:	69ba      	ldr	r2, [r7, #24]
 800960a:	4013      	ands	r3, r2
 800960c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a57      	ldr	r2, [pc, #348]	; (8009770 <HAL_GPIO_Init+0x328>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d037      	beq.n	8009686 <HAL_GPIO_Init+0x23e>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a56      	ldr	r2, [pc, #344]	; (8009774 <HAL_GPIO_Init+0x32c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d031      	beq.n	8009682 <HAL_GPIO_Init+0x23a>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a55      	ldr	r2, [pc, #340]	; (8009778 <HAL_GPIO_Init+0x330>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d02b      	beq.n	800967e <HAL_GPIO_Init+0x236>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a54      	ldr	r2, [pc, #336]	; (800977c <HAL_GPIO_Init+0x334>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d025      	beq.n	800967a <HAL_GPIO_Init+0x232>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a53      	ldr	r2, [pc, #332]	; (8009780 <HAL_GPIO_Init+0x338>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d01f      	beq.n	8009676 <HAL_GPIO_Init+0x22e>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a52      	ldr	r2, [pc, #328]	; (8009784 <HAL_GPIO_Init+0x33c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d019      	beq.n	8009672 <HAL_GPIO_Init+0x22a>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a51      	ldr	r2, [pc, #324]	; (8009788 <HAL_GPIO_Init+0x340>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d013      	beq.n	800966e <HAL_GPIO_Init+0x226>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a50      	ldr	r2, [pc, #320]	; (800978c <HAL_GPIO_Init+0x344>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00d      	beq.n	800966a <HAL_GPIO_Init+0x222>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a4f      	ldr	r2, [pc, #316]	; (8009790 <HAL_GPIO_Init+0x348>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d007      	beq.n	8009666 <HAL_GPIO_Init+0x21e>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a4e      	ldr	r2, [pc, #312]	; (8009794 <HAL_GPIO_Init+0x34c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d101      	bne.n	8009662 <HAL_GPIO_Init+0x21a>
 800965e:	2309      	movs	r3, #9
 8009660:	e012      	b.n	8009688 <HAL_GPIO_Init+0x240>
 8009662:	230a      	movs	r3, #10
 8009664:	e010      	b.n	8009688 <HAL_GPIO_Init+0x240>
 8009666:	2308      	movs	r3, #8
 8009668:	e00e      	b.n	8009688 <HAL_GPIO_Init+0x240>
 800966a:	2307      	movs	r3, #7
 800966c:	e00c      	b.n	8009688 <HAL_GPIO_Init+0x240>
 800966e:	2306      	movs	r3, #6
 8009670:	e00a      	b.n	8009688 <HAL_GPIO_Init+0x240>
 8009672:	2305      	movs	r3, #5
 8009674:	e008      	b.n	8009688 <HAL_GPIO_Init+0x240>
 8009676:	2304      	movs	r3, #4
 8009678:	e006      	b.n	8009688 <HAL_GPIO_Init+0x240>
 800967a:	2303      	movs	r3, #3
 800967c:	e004      	b.n	8009688 <HAL_GPIO_Init+0x240>
 800967e:	2302      	movs	r3, #2
 8009680:	e002      	b.n	8009688 <HAL_GPIO_Init+0x240>
 8009682:	2301      	movs	r3, #1
 8009684:	e000      	b.n	8009688 <HAL_GPIO_Init+0x240>
 8009686:	2300      	movs	r3, #0
 8009688:	69fa      	ldr	r2, [r7, #28]
 800968a:	f002 0203 	and.w	r2, r2, #3
 800968e:	0092      	lsls	r2, r2, #2
 8009690:	4093      	lsls	r3, r2
 8009692:	69ba      	ldr	r2, [r7, #24]
 8009694:	4313      	orrs	r3, r2
 8009696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009698:	4934      	ldr	r1, [pc, #208]	; (800976c <HAL_GPIO_Init+0x324>)
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	089b      	lsrs	r3, r3, #2
 800969e:	3302      	adds	r3, #2
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80096a6:	4b3c      	ldr	r3, [pc, #240]	; (8009798 <HAL_GPIO_Init+0x350>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	43db      	mvns	r3, r3
 80096b0:	69ba      	ldr	r2, [r7, #24]
 80096b2:	4013      	ands	r3, r2
 80096b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80096ca:	4a33      	ldr	r2, [pc, #204]	; (8009798 <HAL_GPIO_Init+0x350>)
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80096d0:	4b31      	ldr	r3, [pc, #196]	; (8009798 <HAL_GPIO_Init+0x350>)
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	43db      	mvns	r3, r3
 80096da:	69ba      	ldr	r2, [r7, #24]
 80096dc:	4013      	ands	r3, r2
 80096de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80096f4:	4a28      	ldr	r2, [pc, #160]	; (8009798 <HAL_GPIO_Init+0x350>)
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80096fa:	4b27      	ldr	r3, [pc, #156]	; (8009798 <HAL_GPIO_Init+0x350>)
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	43db      	mvns	r3, r3
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	4013      	ands	r3, r2
 8009708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	4313      	orrs	r3, r2
 800971c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800971e:	4a1e      	ldr	r2, [pc, #120]	; (8009798 <HAL_GPIO_Init+0x350>)
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009724:	4b1c      	ldr	r3, [pc, #112]	; (8009798 <HAL_GPIO_Init+0x350>)
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	43db      	mvns	r3, r3
 800972e:	69ba      	ldr	r2, [r7, #24]
 8009730:	4013      	ands	r3, r2
 8009732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d003      	beq.n	8009748 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	4313      	orrs	r3, r2
 8009746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009748:	4a13      	ldr	r2, [pc, #76]	; (8009798 <HAL_GPIO_Init+0x350>)
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	3301      	adds	r3, #1
 8009752:	61fb      	str	r3, [r7, #28]
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	2b0f      	cmp	r3, #15
 8009758:	f67f ae84 	bls.w	8009464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800975c:	bf00      	nop
 800975e:	3724      	adds	r7, #36	; 0x24
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	40023800 	.word	0x40023800
 800976c:	40013800 	.word	0x40013800
 8009770:	40020000 	.word	0x40020000
 8009774:	40020400 	.word	0x40020400
 8009778:	40020800 	.word	0x40020800
 800977c:	40020c00 	.word	0x40020c00
 8009780:	40021000 	.word	0x40021000
 8009784:	40021400 	.word	0x40021400
 8009788:	40021800 	.word	0x40021800
 800978c:	40021c00 	.word	0x40021c00
 8009790:	40022000 	.word	0x40022000
 8009794:	40022400 	.word	0x40022400
 8009798:	40013c00 	.word	0x40013c00

0800979c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691a      	ldr	r2, [r3, #16]
 80097ac:	887b      	ldrh	r3, [r7, #2]
 80097ae:	4013      	ands	r3, r2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
 80097b8:	e001      	b.n	80097be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80097be:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	807b      	strh	r3, [r7, #2]
 80097d8:	4613      	mov	r3, r2
 80097da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80097dc:	787b      	ldrb	r3, [r7, #1]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80097e2:	887a      	ldrh	r2, [r7, #2]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80097e8:	e003      	b.n	80097f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80097ea:	887b      	ldrh	r3, [r7, #2]
 80097ec:	041a      	lsls	r2, r3, #16
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	619a      	str	r2, [r3, #24]
}
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80097fe:	b480      	push	{r7}
 8009800:	b083      	sub	sp, #12
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	460b      	mov	r3, r1
 8009808:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	695a      	ldr	r2, [r3, #20]
 800980e:	887b      	ldrh	r3, [r7, #2]
 8009810:	401a      	ands	r2, r3
 8009812:	887b      	ldrh	r3, [r7, #2]
 8009814:	429a      	cmp	r2, r3
 8009816:	d104      	bne.n	8009822 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009818:	887b      	ldrh	r3, [r7, #2]
 800981a:	041a      	lsls	r2, r3, #16
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009820:	e002      	b.n	8009828 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8009822:	887a      	ldrh	r2, [r7, #2]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	619a      	str	r2, [r3, #24]
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800983e:	4b08      	ldr	r3, [pc, #32]	; (8009860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009840:	695a      	ldr	r2, [r3, #20]
 8009842:	88fb      	ldrh	r3, [r7, #6]
 8009844:	4013      	ands	r3, r2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d006      	beq.n	8009858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800984a:	4a05      	ldr	r2, [pc, #20]	; (8009860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800984c:	88fb      	ldrh	r3, [r7, #6]
 800984e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009850:	88fb      	ldrh	r3, [r7, #6]
 8009852:	4618      	mov	r0, r3
 8009854:	f7fd fe42 	bl	80074dc <HAL_GPIO_EXTI_Callback>
  }
}
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	40013c00 	.word	0x40013c00

08009864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d101      	bne.n	8009876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e11f      	b.n	8009ab6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d106      	bne.n	8009890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7fd ff8a 	bl	80077a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2224      	movs	r2, #36	; 0x24
 8009894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f022 0201 	bic.w	r2, r2, #1
 80098a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80098c8:	f001 fd52 	bl	800b370 <HAL_RCC_GetPCLK1Freq>
 80098cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	4a7b      	ldr	r2, [pc, #492]	; (8009ac0 <HAL_I2C_Init+0x25c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d807      	bhi.n	80098e8 <HAL_I2C_Init+0x84>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4a7a      	ldr	r2, [pc, #488]	; (8009ac4 <HAL_I2C_Init+0x260>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	bf94      	ite	ls
 80098e0:	2301      	movls	r3, #1
 80098e2:	2300      	movhi	r3, #0
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	e006      	b.n	80098f6 <HAL_I2C_Init+0x92>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a77      	ldr	r2, [pc, #476]	; (8009ac8 <HAL_I2C_Init+0x264>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	bf94      	ite	ls
 80098f0:	2301      	movls	r3, #1
 80098f2:	2300      	movhi	r3, #0
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e0db      	b.n	8009ab6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4a72      	ldr	r2, [pc, #456]	; (8009acc <HAL_I2C_Init+0x268>)
 8009902:	fba2 2303 	umull	r2, r3, r2, r3
 8009906:	0c9b      	lsrs	r3, r3, #18
 8009908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	430a      	orrs	r2, r1
 800991c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	4a64      	ldr	r2, [pc, #400]	; (8009ac0 <HAL_I2C_Init+0x25c>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d802      	bhi.n	8009938 <HAL_I2C_Init+0xd4>
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	3301      	adds	r3, #1
 8009936:	e009      	b.n	800994c <HAL_I2C_Init+0xe8>
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800993e:	fb02 f303 	mul.w	r3, r2, r3
 8009942:	4a63      	ldr	r2, [pc, #396]	; (8009ad0 <HAL_I2C_Init+0x26c>)
 8009944:	fba2 2303 	umull	r2, r3, r2, r3
 8009948:	099b      	lsrs	r3, r3, #6
 800994a:	3301      	adds	r3, #1
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	6812      	ldr	r2, [r2, #0]
 8009950:	430b      	orrs	r3, r1
 8009952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800995e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	4956      	ldr	r1, [pc, #344]	; (8009ac0 <HAL_I2C_Init+0x25c>)
 8009968:	428b      	cmp	r3, r1
 800996a:	d80d      	bhi.n	8009988 <HAL_I2C_Init+0x124>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	1e59      	subs	r1, r3, #1
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	fbb1 f3f3 	udiv	r3, r1, r3
 800997a:	3301      	adds	r3, #1
 800997c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009980:	2b04      	cmp	r3, #4
 8009982:	bf38      	it	cc
 8009984:	2304      	movcc	r3, #4
 8009986:	e04f      	b.n	8009a28 <HAL_I2C_Init+0x1c4>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d111      	bne.n	80099b4 <HAL_I2C_Init+0x150>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	1e58      	subs	r0, r3, #1
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6859      	ldr	r1, [r3, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	440b      	add	r3, r1
 800999e:	fbb0 f3f3 	udiv	r3, r0, r3
 80099a2:	3301      	adds	r3, #1
 80099a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	bf0c      	ite	eq
 80099ac:	2301      	moveq	r3, #1
 80099ae:	2300      	movne	r3, #0
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	e012      	b.n	80099da <HAL_I2C_Init+0x176>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	1e58      	subs	r0, r3, #1
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6859      	ldr	r1, [r3, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	440b      	add	r3, r1
 80099c2:	0099      	lsls	r1, r3, #2
 80099c4:	440b      	add	r3, r1
 80099c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80099ca:	3301      	adds	r3, #1
 80099cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bf0c      	ite	eq
 80099d4:	2301      	moveq	r3, #1
 80099d6:	2300      	movne	r3, #0
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <HAL_I2C_Init+0x17e>
 80099de:	2301      	movs	r3, #1
 80099e0:	e022      	b.n	8009a28 <HAL_I2C_Init+0x1c4>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10e      	bne.n	8009a08 <HAL_I2C_Init+0x1a4>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	1e58      	subs	r0, r3, #1
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6859      	ldr	r1, [r3, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	440b      	add	r3, r1
 80099f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80099fc:	3301      	adds	r3, #1
 80099fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a06:	e00f      	b.n	8009a28 <HAL_I2C_Init+0x1c4>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	1e58      	subs	r0, r3, #1
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6859      	ldr	r1, [r3, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	440b      	add	r3, r1
 8009a16:	0099      	lsls	r1, r3, #2
 8009a18:	440b      	add	r3, r1
 8009a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a1e:	3301      	adds	r3, #1
 8009a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	6809      	ldr	r1, [r1, #0]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	69da      	ldr	r2, [r3, #28]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	431a      	orrs	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	6911      	ldr	r1, [r2, #16]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	68d2      	ldr	r2, [r2, #12]
 8009a62:	4311      	orrs	r1, r2
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	6812      	ldr	r2, [r2, #0]
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	695a      	ldr	r2, [r3, #20]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f042 0201 	orr.w	r2, r2, #1
 8009a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	000186a0 	.word	0x000186a0
 8009ac4:	001e847f 	.word	0x001e847f
 8009ac8:	003d08ff 	.word	0x003d08ff
 8009acc:	431bde83 	.word	0x431bde83
 8009ad0:	10624dd3 	.word	0x10624dd3

08009ad4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af02      	add	r7, sp, #8
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	4608      	mov	r0, r1
 8009ade:	4611      	mov	r1, r2
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	817b      	strh	r3, [r7, #10]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	813b      	strh	r3, [r7, #8]
 8009aea:	4613      	mov	r3, r2
 8009aec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009aee:	f7fe fbe1 	bl	80082b4 <HAL_GetTick>
 8009af2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b20      	cmp	r3, #32
 8009afe:	f040 80d9 	bne.w	8009cb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	2319      	movs	r3, #25
 8009b08:	2201      	movs	r2, #1
 8009b0a:	496d      	ldr	r1, [pc, #436]	; (8009cc0 <HAL_I2C_Mem_Write+0x1ec>)
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 fc7f 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	e0cc      	b.n	8009cb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d101      	bne.n	8009b2a <HAL_I2C_Mem_Write+0x56>
 8009b26:	2302      	movs	r3, #2
 8009b28:	e0c5      	b.n	8009cb6 <HAL_I2C_Mem_Write+0x1e2>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d007      	beq.n	8009b50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f042 0201 	orr.w	r2, r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2221      	movs	r2, #33	; 0x21
 8009b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2240      	movs	r2, #64	; 0x40
 8009b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a3a      	ldr	r2, [r7, #32]
 8009b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4a4d      	ldr	r2, [pc, #308]	; (8009cc4 <HAL_I2C_Mem_Write+0x1f0>)
 8009b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b92:	88f8      	ldrh	r0, [r7, #6]
 8009b94:	893a      	ldrh	r2, [r7, #8]
 8009b96:	8979      	ldrh	r1, [r7, #10]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	9301      	str	r3, [sp, #4]
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 fab6 	bl	800a114 <I2C_RequestMemoryWrite>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d052      	beq.n	8009c54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e081      	b.n	8009cb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 fd00 	bl	800a5bc <I2C_WaitOnTXEFlagUntilTimeout>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00d      	beq.n	8009bde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc6:	2b04      	cmp	r3, #4
 8009bc8:	d107      	bne.n	8009bda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e06b      	b.n	8009cb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	781a      	ldrb	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	f003 0304 	and.w	r3, r3, #4
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	d11b      	bne.n	8009c54 <HAL_I2C_Mem_Write+0x180>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d017      	beq.n	8009c54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	781a      	ldrb	r2, [r3, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1aa      	bne.n	8009bb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 fcec 	bl	800a63e <I2C_WaitOnBTFFlagUntilTimeout>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00d      	beq.n	8009c88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d107      	bne.n	8009c84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e016      	b.n	8009cb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	e000      	b.n	8009cb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009cb4:	2302      	movs	r3, #2
  }
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3718      	adds	r7, #24
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	00100002 	.word	0x00100002
 8009cc4:	ffff0000 	.word	0xffff0000

08009cc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08c      	sub	sp, #48	; 0x30
 8009ccc:	af02      	add	r7, sp, #8
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	817b      	strh	r3, [r7, #10]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	813b      	strh	r3, [r7, #8]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ce2:	f7fe fae7 	bl	80082b4 <HAL_GetTick>
 8009ce6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b20      	cmp	r3, #32
 8009cf2:	f040 8208 	bne.w	800a106 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	2319      	movs	r3, #25
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	497b      	ldr	r1, [pc, #492]	; (8009eec <HAL_I2C_Mem_Read+0x224>)
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 fb85 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	e1fb      	b.n	800a108 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d101      	bne.n	8009d1e <HAL_I2C_Mem_Read+0x56>
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	e1f4      	b.n	800a108 <HAL_I2C_Mem_Read+0x440>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d007      	beq.n	8009d44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0201 	orr.w	r2, r2, #1
 8009d42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2222      	movs	r2, #34	; 0x22
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2240      	movs	r2, #64	; 0x40
 8009d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4a5b      	ldr	r2, [pc, #364]	; (8009ef0 <HAL_I2C_Mem_Read+0x228>)
 8009d84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d86:	88f8      	ldrh	r0, [r7, #6]
 8009d88:	893a      	ldrh	r2, [r7, #8]
 8009d8a:	8979      	ldrh	r1, [r7, #10]
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	9301      	str	r3, [sp, #4]
 8009d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	4603      	mov	r3, r0
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f000 fa52 	bl	800a240 <I2C_RequestMemoryRead>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e1b0      	b.n	800a108 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d113      	bne.n	8009dd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dae:	2300      	movs	r3, #0
 8009db0:	623b      	str	r3, [r7, #32]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	623b      	str	r3, [r7, #32]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	623b      	str	r3, [r7, #32]
 8009dc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	e184      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d11b      	bne.n	8009e16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dee:	2300      	movs	r3, #0
 8009df0:	61fb      	str	r3, [r7, #28]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	61fb      	str	r3, [r7, #28]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	61fb      	str	r3, [r7, #28]
 8009e02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	e164      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d11b      	bne.n	8009e56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61bb      	str	r3, [r7, #24]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	61bb      	str	r3, [r7, #24]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	61bb      	str	r3, [r7, #24]
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	e144      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e56:	2300      	movs	r3, #0
 8009e58:	617b      	str	r3, [r7, #20]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	617b      	str	r3, [r7, #20]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	617b      	str	r3, [r7, #20]
 8009e6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009e6c:	e138      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	f200 80f1 	bhi.w	800a05a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d123      	bne.n	8009ec8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 fc1b 	bl	800a6c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e139      	b.n	800a108 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	691a      	ldr	r2, [r3, #16]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	b2d2      	uxtb	r2, r2
 8009ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	1c5a      	adds	r2, r3, #1
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ec6:	e10b      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d14e      	bne.n	8009f6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	4906      	ldr	r1, [pc, #24]	; (8009ef4 <HAL_I2C_Mem_Read+0x22c>)
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 fa98 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d008      	beq.n	8009ef8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e10e      	b.n	800a108 <HAL_I2C_Mem_Read+0x440>
 8009eea:	bf00      	nop
 8009eec:	00100002 	.word	0x00100002
 8009ef0:	ffff0000 	.word	0xffff0000
 8009ef4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	691a      	ldr	r2, [r3, #16]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	1c5a      	adds	r2, r3, #1
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f24:	3b01      	subs	r3, #1
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	3b01      	subs	r3, #1
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	691a      	ldr	r2, [r3, #16]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	b2d2      	uxtb	r2, r2
 8009f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f56:	3b01      	subs	r3, #1
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	3b01      	subs	r3, #1
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f6c:	e0b8      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f74:	2200      	movs	r2, #0
 8009f76:	4966      	ldr	r1, [pc, #408]	; (800a110 <HAL_I2C_Mem_Read+0x448>)
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f000 fa49 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e0bf      	b.n	800a108 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	691a      	ldr	r2, [r3, #16]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa2:	b2d2      	uxtb	r2, r2
 8009fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	494f      	ldr	r1, [pc, #316]	; (800a110 <HAL_I2C_Mem_Read+0x448>)
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 fa1b 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e091      	b.n	800a108 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	691a      	ldr	r2, [r3, #16]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	b2d2      	uxtb	r2, r2
 800a000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	1c5a      	adds	r2, r3, #1
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a010:	3b01      	subs	r3, #1
 800a012:	b29a      	uxth	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	3b01      	subs	r3, #1
 800a020:	b29a      	uxth	r2, r3
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	691a      	ldr	r2, [r3, #16]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	b2d2      	uxtb	r2, r2
 800a032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	1c5a      	adds	r2, r3, #1
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a042:	3b01      	subs	r3, #1
 800a044:	b29a      	uxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a04e:	b29b      	uxth	r3, r3
 800a050:	3b01      	subs	r3, #1
 800a052:	b29a      	uxth	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a058:	e042      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 fb2e 	bl	800a6c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d001      	beq.n	800a06e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e04c      	b.n	800a108 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	691a      	ldr	r2, [r3, #16]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	b2d2      	uxtb	r2, r2
 800a07a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a08a:	3b01      	subs	r3, #1
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a096:	b29b      	uxth	r3, r3
 800a098:	3b01      	subs	r3, #1
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	f003 0304 	and.w	r3, r3, #4
 800a0aa:	2b04      	cmp	r3, #4
 800a0ac:	d118      	bne.n	800a0e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	691a      	ldr	r2, [r3, #16]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	b2d2      	uxtb	r2, r2
 800a0ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	1c5a      	adds	r2, r3, #1
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f47f aec2 	bne.w	8009e6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2220      	movs	r2, #32
 800a0ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	e000      	b.n	800a108 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a106:	2302      	movs	r3, #2
  }
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3728      	adds	r7, #40	; 0x28
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	00010004 	.word	0x00010004

0800a114 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af02      	add	r7, sp, #8
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	4608      	mov	r0, r1
 800a11e:	4611      	mov	r1, r2
 800a120:	461a      	mov	r2, r3
 800a122:	4603      	mov	r3, r0
 800a124:	817b      	strh	r3, [r7, #10]
 800a126:	460b      	mov	r3, r1
 800a128:	813b      	strh	r3, [r7, #8]
 800a12a:	4613      	mov	r3, r2
 800a12c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a13c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	2200      	movs	r2, #0
 800a146:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f000 f960 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00d      	beq.n	800a172 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a164:	d103      	bne.n	800a16e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a16c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e05f      	b.n	800a232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a172:	897b      	ldrh	r3, [r7, #10]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	461a      	mov	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a180:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	6a3a      	ldr	r2, [r7, #32]
 800a186:	492d      	ldr	r1, [pc, #180]	; (800a23c <I2C_RequestMemoryWrite+0x128>)
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f000 f998 	bl	800a4be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e04c      	b.n	800a232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a198:	2300      	movs	r3, #0
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b0:	6a39      	ldr	r1, [r7, #32]
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 fa02 	bl	800a5bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00d      	beq.n	800a1da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	d107      	bne.n	800a1d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e02b      	b.n	800a232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1da:	88fb      	ldrh	r3, [r7, #6]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d105      	bne.n	800a1ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1e0:	893b      	ldrh	r3, [r7, #8]
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	611a      	str	r2, [r3, #16]
 800a1ea:	e021      	b.n	800a230 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1ec:	893b      	ldrh	r3, [r7, #8]
 800a1ee:	0a1b      	lsrs	r3, r3, #8
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1fc:	6a39      	ldr	r1, [r7, #32]
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 f9dc 	bl	800a5bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00d      	beq.n	800a226 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20e:	2b04      	cmp	r3, #4
 800a210:	d107      	bne.n	800a222 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a220:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e005      	b.n	800a232 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a226:	893b      	ldrh	r3, [r7, #8]
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	00010002 	.word	0x00010002

0800a240 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b088      	sub	sp, #32
 800a244:	af02      	add	r7, sp, #8
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	4608      	mov	r0, r1
 800a24a:	4611      	mov	r1, r2
 800a24c:	461a      	mov	r2, r3
 800a24e:	4603      	mov	r3, r0
 800a250:	817b      	strh	r3, [r7, #10]
 800a252:	460b      	mov	r3, r1
 800a254:	813b      	strh	r3, [r7, #8]
 800a256:	4613      	mov	r3, r2
 800a258:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a268:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a278:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	2200      	movs	r2, #0
 800a282:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f8c2 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00d      	beq.n	800a2ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a0:	d103      	bne.n	800a2aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e0aa      	b.n	800a404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2ae:	897b      	ldrh	r3, [r7, #10]
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a2bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	6a3a      	ldr	r2, [r7, #32]
 800a2c2:	4952      	ldr	r1, [pc, #328]	; (800a40c <I2C_RequestMemoryRead+0x1cc>)
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 f8fa 	bl	800a4be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e097      	b.n	800a404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ec:	6a39      	ldr	r1, [r7, #32]
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 f964 	bl	800a5bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00d      	beq.n	800a316 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d107      	bne.n	800a312 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a310:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e076      	b.n	800a404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a316:	88fb      	ldrh	r3, [r7, #6]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d105      	bne.n	800a328 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a31c:	893b      	ldrh	r3, [r7, #8]
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	611a      	str	r2, [r3, #16]
 800a326:	e021      	b.n	800a36c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a328:	893b      	ldrh	r3, [r7, #8]
 800a32a:	0a1b      	lsrs	r3, r3, #8
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a338:	6a39      	ldr	r1, [r7, #32]
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 f93e 	bl	800a5bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00d      	beq.n	800a362 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	2b04      	cmp	r3, #4
 800a34c:	d107      	bne.n	800a35e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a35c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e050      	b.n	800a404 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a362:	893b      	ldrh	r3, [r7, #8]
 800a364:	b2da      	uxtb	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a36e:	6a39      	ldr	r1, [r7, #32]
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 f923 	bl	800a5bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00d      	beq.n	800a398 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a380:	2b04      	cmp	r3, #4
 800a382:	d107      	bne.n	800a394 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a392:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e035      	b.n	800a404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 f82b 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00d      	beq.n	800a3dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ce:	d103      	bne.n	800a3d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e013      	b.n	800a404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a3dc:	897b      	ldrh	r3, [r7, #10]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	f043 0301 	orr.w	r3, r3, #1
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	6a3a      	ldr	r2, [r7, #32]
 800a3f0:	4906      	ldr	r1, [pc, #24]	; (800a40c <I2C_RequestMemoryRead+0x1cc>)
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 f863 	bl	800a4be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e000      	b.n	800a404 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	00010002 	.word	0x00010002

0800a410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	4613      	mov	r3, r2
 800a41e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a420:	e025      	b.n	800a46e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a428:	d021      	beq.n	800a46e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a42a:	f7fd ff43 	bl	80082b4 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	429a      	cmp	r2, r3
 800a438:	d302      	bcc.n	800a440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d116      	bne.n	800a46e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2220      	movs	r2, #32
 800a44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	f043 0220 	orr.w	r2, r3, #32
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e023      	b.n	800a4b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	0c1b      	lsrs	r3, r3, #16
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b01      	cmp	r3, #1
 800a476:	d10d      	bne.n	800a494 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	43da      	mvns	r2, r3
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	4013      	ands	r3, r2
 800a484:	b29b      	uxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	bf0c      	ite	eq
 800a48a:	2301      	moveq	r3, #1
 800a48c:	2300      	movne	r3, #0
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	461a      	mov	r2, r3
 800a492:	e00c      	b.n	800a4ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	43da      	mvns	r2, r3
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	4013      	ands	r3, r2
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	bf0c      	ite	eq
 800a4a6:	2301      	moveq	r3, #1
 800a4a8:	2300      	movne	r3, #0
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d0b6      	beq.n	800a422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	60f8      	str	r0, [r7, #12]
 800a4c6:	60b9      	str	r1, [r7, #8]
 800a4c8:	607a      	str	r2, [r7, #4]
 800a4ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4cc:	e051      	b.n	800a572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4dc:	d123      	bne.n	800a526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2220      	movs	r2, #32
 800a502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a512:	f043 0204 	orr.w	r2, r3, #4
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e046      	b.n	800a5b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52c:	d021      	beq.n	800a572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a52e:	f7fd fec1 	bl	80082b4 <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d302      	bcc.n	800a544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d116      	bne.n	800a572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2220      	movs	r2, #32
 800a54e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55e:	f043 0220 	orr.w	r2, r3, #32
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e020      	b.n	800a5b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	0c1b      	lsrs	r3, r3, #16
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d10c      	bne.n	800a596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	43da      	mvns	r2, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	4013      	ands	r3, r2
 800a588:	b29b      	uxth	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	bf14      	ite	ne
 800a58e:	2301      	movne	r3, #1
 800a590:	2300      	moveq	r3, #0
 800a592:	b2db      	uxtb	r3, r3
 800a594:	e00b      	b.n	800a5ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	43da      	mvns	r2, r3
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	bf14      	ite	ne
 800a5a8:	2301      	movne	r3, #1
 800a5aa:	2300      	moveq	r3, #0
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d18d      	bne.n	800a4ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5c8:	e02d      	b.n	800a626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f000 f8ce 	bl	800a76c <I2C_IsAcknowledgeFailed>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e02d      	b.n	800a636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e0:	d021      	beq.n	800a626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e2:	f7fd fe67 	bl	80082b4 <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d302      	bcc.n	800a5f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d116      	bne.n	800a626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2220      	movs	r2, #32
 800a602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a612:	f043 0220 	orr.w	r2, r3, #32
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e007      	b.n	800a636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a630:	2b80      	cmp	r3, #128	; 0x80
 800a632:	d1ca      	bne.n	800a5ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	60f8      	str	r0, [r7, #12]
 800a646:	60b9      	str	r1, [r7, #8]
 800a648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a64a:	e02d      	b.n	800a6a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 f88d 	bl	800a76c <I2C_IsAcknowledgeFailed>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e02d      	b.n	800a6b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a662:	d021      	beq.n	800a6a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a664:	f7fd fe26 	bl	80082b4 <HAL_GetTick>
 800a668:	4602      	mov	r2, r0
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	429a      	cmp	r2, r3
 800a672:	d302      	bcc.n	800a67a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d116      	bne.n	800a6a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2220      	movs	r2, #32
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a694:	f043 0220 	orr.w	r2, r3, #32
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e007      	b.n	800a6b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d1ca      	bne.n	800a64c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6cc:	e042      	b.n	800a754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	f003 0310 	and.w	r3, r3, #16
 800a6d8:	2b10      	cmp	r3, #16
 800a6da:	d119      	bne.n	800a710 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f06f 0210 	mvn.w	r2, #16
 800a6e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2220      	movs	r2, #32
 800a6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2200      	movs	r2, #0
 800a708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e029      	b.n	800a764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a710:	f7fd fdd0 	bl	80082b4 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d302      	bcc.n	800a726 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d116      	bne.n	800a754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2220      	movs	r2, #32
 800a730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a740:	f043 0220 	orr.w	r2, r3, #32
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e007      	b.n	800a764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a75e:	2b40      	cmp	r3, #64	; 0x40
 800a760:	d1b5      	bne.n	800a6ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a77e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a782:	d11b      	bne.n	800a7bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a78c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2220      	movs	r2, #32
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a8:	f043 0204 	orr.w	r2, r3, #4
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e000      	b.n	800a7be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	b083      	sub	sp, #12
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b20      	cmp	r3, #32
 800a7de:	d129      	bne.n	800a834 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2224      	movs	r2, #36	; 0x24
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f022 0201 	bic.w	r2, r2, #1
 800a7f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f022 0210 	bic.w	r2, r2, #16
 800a806:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	430a      	orrs	r2, r1
 800a816:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f042 0201 	orr.w	r2, r2, #1
 800a826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2220      	movs	r2, #32
 800a82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	e000      	b.n	800a836 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800a834:	2302      	movs	r3, #2
  }
}
 800a836:	4618      	mov	r0, r3
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a842:	b480      	push	{r7}
 800a844:	b085      	sub	sp, #20
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b20      	cmp	r3, #32
 800a85a:	d12a      	bne.n	800a8b2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2224      	movs	r2, #36	; 0x24
 800a860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f022 0201 	bic.w	r2, r2, #1
 800a872:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800a87c:	89fb      	ldrh	r3, [r7, #14]
 800a87e:	f023 030f 	bic.w	r3, r3, #15
 800a882:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	b29a      	uxth	r2, r3
 800a888:	89fb      	ldrh	r3, [r7, #14]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	89fa      	ldrh	r2, [r7, #14]
 800a894:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f042 0201 	orr.w	r2, r2, #1
 800a8a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	e000      	b.n	800a8b4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a8b2:	2302      	movs	r3, #2
  }
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8c2:	b08f      	sub	sp, #60	; 0x3c
 800a8c4:	af0a      	add	r7, sp, #40	; 0x28
 800a8c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e10f      	b.n	800aaf2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d106      	bne.n	800a8f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7fd fb27 	bl	8007f40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2203      	movs	r2, #3
 800a8f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a902:	2b00      	cmp	r3, #0
 800a904:	d102      	bne.n	800a90c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4618      	mov	r0, r3
 800a912:	f003 f8b0 	bl	800da76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	603b      	str	r3, [r7, #0]
 800a91c:	687e      	ldr	r6, [r7, #4]
 800a91e:	466d      	mov	r5, sp
 800a920:	f106 0410 	add.w	r4, r6, #16
 800a924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a92a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a92c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a930:	e885 0003 	stmia.w	r5, {r0, r1}
 800a934:	1d33      	adds	r3, r6, #4
 800a936:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a938:	6838      	ldr	r0, [r7, #0]
 800a93a:	f003 f83b 	bl	800d9b4 <USB_CoreInit>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d005      	beq.n	800a950 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2202      	movs	r2, #2
 800a948:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e0d0      	b.n	800aaf2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2100      	movs	r1, #0
 800a956:	4618      	mov	r0, r3
 800a958:	f003 f89e 	bl	800da98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a95c:	2300      	movs	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]
 800a960:	e04a      	b.n	800a9f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a962:	7bfa      	ldrb	r2, [r7, #15]
 800a964:	6879      	ldr	r1, [r7, #4]
 800a966:	4613      	mov	r3, r2
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	1a9b      	subs	r3, r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	440b      	add	r3, r1
 800a970:	333d      	adds	r3, #61	; 0x3d
 800a972:	2201      	movs	r2, #1
 800a974:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a976:	7bfa      	ldrb	r2, [r7, #15]
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	4613      	mov	r3, r2
 800a97c:	00db      	lsls	r3, r3, #3
 800a97e:	1a9b      	subs	r3, r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	440b      	add	r3, r1
 800a984:	333c      	adds	r3, #60	; 0x3c
 800a986:	7bfa      	ldrb	r2, [r7, #15]
 800a988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a98a:	7bfa      	ldrb	r2, [r7, #15]
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	b298      	uxth	r0, r3
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	4613      	mov	r3, r2
 800a994:	00db      	lsls	r3, r3, #3
 800a996:	1a9b      	subs	r3, r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	440b      	add	r3, r1
 800a99c:	3342      	adds	r3, #66	; 0x42
 800a99e:	4602      	mov	r2, r0
 800a9a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a9a2:	7bfa      	ldrb	r2, [r7, #15]
 800a9a4:	6879      	ldr	r1, [r7, #4]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	00db      	lsls	r3, r3, #3
 800a9aa:	1a9b      	subs	r3, r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	440b      	add	r3, r1
 800a9b0:	333f      	adds	r3, #63	; 0x3f
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a9b6:	7bfa      	ldrb	r2, [r7, #15]
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	1a9b      	subs	r3, r3, r2
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	440b      	add	r3, r1
 800a9c4:	3344      	adds	r3, #68	; 0x44
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a9ca:	7bfa      	ldrb	r2, [r7, #15]
 800a9cc:	6879      	ldr	r1, [r7, #4]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	00db      	lsls	r3, r3, #3
 800a9d2:	1a9b      	subs	r3, r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	440b      	add	r3, r1
 800a9d8:	3348      	adds	r3, #72	; 0x48
 800a9da:	2200      	movs	r2, #0
 800a9dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a9de:	7bfa      	ldrb	r2, [r7, #15]
 800a9e0:	6879      	ldr	r1, [r7, #4]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	00db      	lsls	r3, r3, #3
 800a9e6:	1a9b      	subs	r3, r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	440b      	add	r3, r1
 800a9ec:	3350      	adds	r3, #80	; 0x50
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a9f2:	7bfb      	ldrb	r3, [r7, #15]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	73fb      	strb	r3, [r7, #15]
 800a9f8:	7bfa      	ldrb	r2, [r7, #15]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d3af      	bcc.n	800a962 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]
 800aa06:	e044      	b.n	800aa92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800aa08:	7bfa      	ldrb	r2, [r7, #15]
 800aa0a:	6879      	ldr	r1, [r7, #4]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	1a9b      	subs	r3, r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	440b      	add	r3, r1
 800aa16:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800aa1e:	7bfa      	ldrb	r2, [r7, #15]
 800aa20:	6879      	ldr	r1, [r7, #4]
 800aa22:	4613      	mov	r3, r2
 800aa24:	00db      	lsls	r3, r3, #3
 800aa26:	1a9b      	subs	r3, r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	440b      	add	r3, r1
 800aa2c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800aa30:	7bfa      	ldrb	r2, [r7, #15]
 800aa32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aa34:	7bfa      	ldrb	r2, [r7, #15]
 800aa36:	6879      	ldr	r1, [r7, #4]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	00db      	lsls	r3, r3, #3
 800aa3c:	1a9b      	subs	r3, r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	440b      	add	r3, r1
 800aa42:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800aa46:	2200      	movs	r2, #0
 800aa48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aa4a:	7bfa      	ldrb	r2, [r7, #15]
 800aa4c:	6879      	ldr	r1, [r7, #4]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	1a9b      	subs	r3, r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	440b      	add	r3, r1
 800aa58:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aa60:	7bfa      	ldrb	r2, [r7, #15]
 800aa62:	6879      	ldr	r1, [r7, #4]
 800aa64:	4613      	mov	r3, r2
 800aa66:	00db      	lsls	r3, r3, #3
 800aa68:	1a9b      	subs	r3, r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	440b      	add	r3, r1
 800aa6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aa76:	7bfa      	ldrb	r2, [r7, #15]
 800aa78:	6879      	ldr	r1, [r7, #4]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	00db      	lsls	r3, r3, #3
 800aa7e:	1a9b      	subs	r3, r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	440b      	add	r3, r1
 800aa84:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	73fb      	strb	r3, [r7, #15]
 800aa92:	7bfa      	ldrb	r2, [r7, #15]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d3b5      	bcc.n	800aa08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	603b      	str	r3, [r7, #0]
 800aaa2:	687e      	ldr	r6, [r7, #4]
 800aaa4:	466d      	mov	r5, sp
 800aaa6:	f106 0410 	add.w	r4, r6, #16
 800aaaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aaae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aab2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aab6:	e885 0003 	stmia.w	r5, {r0, r1}
 800aaba:	1d33      	adds	r3, r6, #4
 800aabc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aabe:	6838      	ldr	r0, [r7, #0]
 800aac0:	f003 f814 	bl	800daec <USB_DevInit>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d005      	beq.n	800aad6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2202      	movs	r2, #2
 800aace:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e00d      	b.n	800aaf2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f003 f9c3 	bl	800de76 <USB_DevDisconnect>

  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800aafc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e25b      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d075      	beq.n	800ac06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ab1a:	4ba3      	ldr	r3, [pc, #652]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	f003 030c 	and.w	r3, r3, #12
 800ab22:	2b04      	cmp	r3, #4
 800ab24:	d00c      	beq.n	800ab40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ab26:	4ba0      	ldr	r3, [pc, #640]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	d112      	bne.n	800ab58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ab32:	4b9d      	ldr	r3, [pc, #628]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab3e:	d10b      	bne.n	800ab58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab40:	4b99      	ldr	r3, [pc, #612]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d05b      	beq.n	800ac04 <HAL_RCC_OscConfig+0x108>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d157      	bne.n	800ac04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	e236      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab60:	d106      	bne.n	800ab70 <HAL_RCC_OscConfig+0x74>
 800ab62:	4b91      	ldr	r3, [pc, #580]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a90      	ldr	r2, [pc, #576]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	e01d      	b.n	800abac <HAL_RCC_OscConfig+0xb0>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab78:	d10c      	bne.n	800ab94 <HAL_RCC_OscConfig+0x98>
 800ab7a:	4b8b      	ldr	r3, [pc, #556]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a8a      	ldr	r2, [pc, #552]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab84:	6013      	str	r3, [r2, #0]
 800ab86:	4b88      	ldr	r3, [pc, #544]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a87      	ldr	r2, [pc, #540]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab90:	6013      	str	r3, [r2, #0]
 800ab92:	e00b      	b.n	800abac <HAL_RCC_OscConfig+0xb0>
 800ab94:	4b84      	ldr	r3, [pc, #528]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a83      	ldr	r2, [pc, #524]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ab9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	4b81      	ldr	r3, [pc, #516]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a80      	ldr	r2, [pc, #512]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800aba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d013      	beq.n	800abdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abb4:	f7fd fb7e 	bl	80082b4 <HAL_GetTick>
 800abb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abba:	e008      	b.n	800abce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800abbc:	f7fd fb7a 	bl	80082b4 <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	2b64      	cmp	r3, #100	; 0x64
 800abc8:	d901      	bls.n	800abce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800abca:	2303      	movs	r3, #3
 800abcc:	e1fb      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abce:	4b76      	ldr	r3, [pc, #472]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d0f0      	beq.n	800abbc <HAL_RCC_OscConfig+0xc0>
 800abda:	e014      	b.n	800ac06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abdc:	f7fd fb6a 	bl	80082b4 <HAL_GetTick>
 800abe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abe2:	e008      	b.n	800abf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800abe4:	f7fd fb66 	bl	80082b4 <HAL_GetTick>
 800abe8:	4602      	mov	r2, r0
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b64      	cmp	r3, #100	; 0x64
 800abf0:	d901      	bls.n	800abf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e1e7      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abf6:	4b6c      	ldr	r3, [pc, #432]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1f0      	bne.n	800abe4 <HAL_RCC_OscConfig+0xe8>
 800ac02:	e000      	b.n	800ac06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0302 	and.w	r3, r3, #2
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d063      	beq.n	800acda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ac12:	4b65      	ldr	r3, [pc, #404]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	f003 030c 	and.w	r3, r3, #12
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00b      	beq.n	800ac36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ac1e:	4b62      	ldr	r3, [pc, #392]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ac26:	2b08      	cmp	r3, #8
 800ac28:	d11c      	bne.n	800ac64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ac2a:	4b5f      	ldr	r3, [pc, #380]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d116      	bne.n	800ac64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac36:	4b5c      	ldr	r3, [pc, #368]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d005      	beq.n	800ac4e <HAL_RCC_OscConfig+0x152>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d001      	beq.n	800ac4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e1bb      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac4e:	4b56      	ldr	r3, [pc, #344]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	4952      	ldr	r1, [pc, #328]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac62:	e03a      	b.n	800acda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d020      	beq.n	800acae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac6c:	4b4f      	ldr	r3, [pc, #316]	; (800adac <HAL_RCC_OscConfig+0x2b0>)
 800ac6e:	2201      	movs	r2, #1
 800ac70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac72:	f7fd fb1f 	bl	80082b4 <HAL_GetTick>
 800ac76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac78:	e008      	b.n	800ac8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac7a:	f7fd fb1b 	bl	80082b4 <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d901      	bls.n	800ac8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e19c      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac8c:	4b46      	ldr	r3, [pc, #280]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 0302 	and.w	r3, r3, #2
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d0f0      	beq.n	800ac7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac98:	4b43      	ldr	r3, [pc, #268]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	00db      	lsls	r3, r3, #3
 800aca6:	4940      	ldr	r1, [pc, #256]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800aca8:	4313      	orrs	r3, r2
 800acaa:	600b      	str	r3, [r1, #0]
 800acac:	e015      	b.n	800acda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800acae:	4b3f      	ldr	r3, [pc, #252]	; (800adac <HAL_RCC_OscConfig+0x2b0>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acb4:	f7fd fafe 	bl	80082b4 <HAL_GetTick>
 800acb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acba:	e008      	b.n	800acce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800acbc:	f7fd fafa 	bl	80082b4 <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d901      	bls.n	800acce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e17b      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acce:	4b36      	ldr	r3, [pc, #216]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1f0      	bne.n	800acbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0308 	and.w	r3, r3, #8
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d030      	beq.n	800ad48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d016      	beq.n	800ad1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800acee:	4b30      	ldr	r3, [pc, #192]	; (800adb0 <HAL_RCC_OscConfig+0x2b4>)
 800acf0:	2201      	movs	r2, #1
 800acf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acf4:	f7fd fade 	bl	80082b4 <HAL_GetTick>
 800acf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acfa:	e008      	b.n	800ad0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800acfc:	f7fd fada 	bl	80082b4 <HAL_GetTick>
 800ad00:	4602      	mov	r2, r0
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d901      	bls.n	800ad0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e15b      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad0e:	4b26      	ldr	r3, [pc, #152]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ad10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad12:	f003 0302 	and.w	r3, r3, #2
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0f0      	beq.n	800acfc <HAL_RCC_OscConfig+0x200>
 800ad1a:	e015      	b.n	800ad48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad1c:	4b24      	ldr	r3, [pc, #144]	; (800adb0 <HAL_RCC_OscConfig+0x2b4>)
 800ad1e:	2200      	movs	r2, #0
 800ad20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad22:	f7fd fac7 	bl	80082b4 <HAL_GetTick>
 800ad26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad28:	e008      	b.n	800ad3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ad2a:	f7fd fac3 	bl	80082b4 <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d901      	bls.n	800ad3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e144      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad3c:	4b1a      	ldr	r3, [pc, #104]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ad3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad40:	f003 0302 	and.w	r3, r3, #2
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1f0      	bne.n	800ad2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0304 	and.w	r3, r3, #4
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 80a0 	beq.w	800ae96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad56:	2300      	movs	r3, #0
 800ad58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad5a:	4b13      	ldr	r3, [pc, #76]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10f      	bne.n	800ad86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad66:	2300      	movs	r3, #0
 800ad68:	60bb      	str	r3, [r7, #8]
 800ad6a:	4b0f      	ldr	r3, [pc, #60]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ad6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6e:	4a0e      	ldr	r2, [pc, #56]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ad70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad74:	6413      	str	r3, [r2, #64]	; 0x40
 800ad76:	4b0c      	ldr	r3, [pc, #48]	; (800ada8 <HAL_RCC_OscConfig+0x2ac>)
 800ad78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad7e:	60bb      	str	r3, [r7, #8]
 800ad80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad82:	2301      	movs	r3, #1
 800ad84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad86:	4b0b      	ldr	r3, [pc, #44]	; (800adb4 <HAL_RCC_OscConfig+0x2b8>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d121      	bne.n	800add6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ad92:	4b08      	ldr	r3, [pc, #32]	; (800adb4 <HAL_RCC_OscConfig+0x2b8>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a07      	ldr	r2, [pc, #28]	; (800adb4 <HAL_RCC_OscConfig+0x2b8>)
 800ad98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ad9e:	f7fd fa89 	bl	80082b4 <HAL_GetTick>
 800ada2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ada4:	e011      	b.n	800adca <HAL_RCC_OscConfig+0x2ce>
 800ada6:	bf00      	nop
 800ada8:	40023800 	.word	0x40023800
 800adac:	42470000 	.word	0x42470000
 800adb0:	42470e80 	.word	0x42470e80
 800adb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800adb8:	f7fd fa7c 	bl	80082b4 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d901      	bls.n	800adca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e0fd      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adca:	4b81      	ldr	r3, [pc, #516]	; (800afd0 <HAL_RCC_OscConfig+0x4d4>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add2:	2b00      	cmp	r3, #0
 800add4:	d0f0      	beq.n	800adb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	2b01      	cmp	r3, #1
 800addc:	d106      	bne.n	800adec <HAL_RCC_OscConfig+0x2f0>
 800adde:	4b7d      	ldr	r3, [pc, #500]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ade0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ade2:	4a7c      	ldr	r2, [pc, #496]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ade4:	f043 0301 	orr.w	r3, r3, #1
 800ade8:	6713      	str	r3, [r2, #112]	; 0x70
 800adea:	e01c      	b.n	800ae26 <HAL_RCC_OscConfig+0x32a>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	2b05      	cmp	r3, #5
 800adf2:	d10c      	bne.n	800ae0e <HAL_RCC_OscConfig+0x312>
 800adf4:	4b77      	ldr	r3, [pc, #476]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800adf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf8:	4a76      	ldr	r2, [pc, #472]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800adfa:	f043 0304 	orr.w	r3, r3, #4
 800adfe:	6713      	str	r3, [r2, #112]	; 0x70
 800ae00:	4b74      	ldr	r3, [pc, #464]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ae02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae04:	4a73      	ldr	r2, [pc, #460]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ae06:	f043 0301 	orr.w	r3, r3, #1
 800ae0a:	6713      	str	r3, [r2, #112]	; 0x70
 800ae0c:	e00b      	b.n	800ae26 <HAL_RCC_OscConfig+0x32a>
 800ae0e:	4b71      	ldr	r3, [pc, #452]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ae10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae12:	4a70      	ldr	r2, [pc, #448]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ae14:	f023 0301 	bic.w	r3, r3, #1
 800ae18:	6713      	str	r3, [r2, #112]	; 0x70
 800ae1a:	4b6e      	ldr	r3, [pc, #440]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ae1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae1e:	4a6d      	ldr	r2, [pc, #436]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ae20:	f023 0304 	bic.w	r3, r3, #4
 800ae24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d015      	beq.n	800ae5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae2e:	f7fd fa41 	bl	80082b4 <HAL_GetTick>
 800ae32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae34:	e00a      	b.n	800ae4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae36:	f7fd fa3d 	bl	80082b4 <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d901      	bls.n	800ae4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	e0bc      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae4c:	4b61      	ldr	r3, [pc, #388]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ae4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae50:	f003 0302 	and.w	r3, r3, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d0ee      	beq.n	800ae36 <HAL_RCC_OscConfig+0x33a>
 800ae58:	e014      	b.n	800ae84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae5a:	f7fd fa2b 	bl	80082b4 <HAL_GetTick>
 800ae5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae60:	e00a      	b.n	800ae78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae62:	f7fd fa27 	bl	80082b4 <HAL_GetTick>
 800ae66:	4602      	mov	r2, r0
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d901      	bls.n	800ae78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e0a6      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae78:	4b56      	ldr	r3, [pc, #344]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ae7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae7c:	f003 0302 	and.w	r3, r3, #2
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1ee      	bne.n	800ae62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ae84:	7dfb      	ldrb	r3, [r7, #23]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d105      	bne.n	800ae96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae8a:	4b52      	ldr	r3, [pc, #328]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8e:	4a51      	ldr	r2, [pc, #324]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800ae90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 8092 	beq.w	800afc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aea0:	4b4c      	ldr	r3, [pc, #304]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	f003 030c 	and.w	r3, r3, #12
 800aea8:	2b08      	cmp	r3, #8
 800aeaa:	d05c      	beq.n	800af66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d141      	bne.n	800af38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aeb4:	4b48      	ldr	r3, [pc, #288]	; (800afd8 <HAL_RCC_OscConfig+0x4dc>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aeba:	f7fd f9fb 	bl	80082b4 <HAL_GetTick>
 800aebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aec0:	e008      	b.n	800aed4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aec2:	f7fd f9f7 	bl	80082b4 <HAL_GetTick>
 800aec6:	4602      	mov	r2, r0
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d901      	bls.n	800aed4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e078      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aed4:	4b3f      	ldr	r3, [pc, #252]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1f0      	bne.n	800aec2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	69da      	ldr	r2, [r3, #28]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	431a      	orrs	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeee:	019b      	lsls	r3, r3, #6
 800aef0:	431a      	orrs	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef6:	085b      	lsrs	r3, r3, #1
 800aef8:	3b01      	subs	r3, #1
 800aefa:	041b      	lsls	r3, r3, #16
 800aefc:	431a      	orrs	r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af02:	061b      	lsls	r3, r3, #24
 800af04:	4933      	ldr	r1, [pc, #204]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800af06:	4313      	orrs	r3, r2
 800af08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af0a:	4b33      	ldr	r3, [pc, #204]	; (800afd8 <HAL_RCC_OscConfig+0x4dc>)
 800af0c:	2201      	movs	r2, #1
 800af0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af10:	f7fd f9d0 	bl	80082b4 <HAL_GetTick>
 800af14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af16:	e008      	b.n	800af2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af18:	f7fd f9cc 	bl	80082b4 <HAL_GetTick>
 800af1c:	4602      	mov	r2, r0
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	2b02      	cmp	r3, #2
 800af24:	d901      	bls.n	800af2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e04d      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af2a:	4b2a      	ldr	r3, [pc, #168]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0f0      	beq.n	800af18 <HAL_RCC_OscConfig+0x41c>
 800af36:	e045      	b.n	800afc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af38:	4b27      	ldr	r3, [pc, #156]	; (800afd8 <HAL_RCC_OscConfig+0x4dc>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af3e:	f7fd f9b9 	bl	80082b4 <HAL_GetTick>
 800af42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af44:	e008      	b.n	800af58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af46:	f7fd f9b5 	bl	80082b4 <HAL_GetTick>
 800af4a:	4602      	mov	r2, r0
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	2b02      	cmp	r3, #2
 800af52:	d901      	bls.n	800af58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800af54:	2303      	movs	r3, #3
 800af56:	e036      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af58:	4b1e      	ldr	r3, [pc, #120]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1f0      	bne.n	800af46 <HAL_RCC_OscConfig+0x44a>
 800af64:	e02e      	b.n	800afc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d101      	bne.n	800af72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e029      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800af72:	4b18      	ldr	r3, [pc, #96]	; (800afd4 <HAL_RCC_OscConfig+0x4d8>)
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	429a      	cmp	r2, r3
 800af84:	d11c      	bne.n	800afc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af90:	429a      	cmp	r2, r3
 800af92:	d115      	bne.n	800afc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800af9a:	4013      	ands	r3, r2
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d10d      	bne.n	800afc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800afae:	429a      	cmp	r2, r3
 800afb0:	d106      	bne.n	800afc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d001      	beq.n	800afc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	e000      	b.n	800afc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	40007000 	.word	0x40007000
 800afd4:	40023800 	.word	0x40023800
 800afd8:	42470060 	.word	0x42470060

0800afdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e0cc      	b.n	800b18a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aff0:	4b68      	ldr	r3, [pc, #416]	; (800b194 <HAL_RCC_ClockConfig+0x1b8>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 030f 	and.w	r3, r3, #15
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	429a      	cmp	r2, r3
 800affc:	d90c      	bls.n	800b018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800affe:	4b65      	ldr	r3, [pc, #404]	; (800b194 <HAL_RCC_ClockConfig+0x1b8>)
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	b2d2      	uxtb	r2, r2
 800b004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b006:	4b63      	ldr	r3, [pc, #396]	; (800b194 <HAL_RCC_ClockConfig+0x1b8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 030f 	and.w	r3, r3, #15
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	429a      	cmp	r2, r3
 800b012:	d001      	beq.n	800b018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e0b8      	b.n	800b18a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0302 	and.w	r3, r3, #2
 800b020:	2b00      	cmp	r3, #0
 800b022:	d020      	beq.n	800b066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 0304 	and.w	r3, r3, #4
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d005      	beq.n	800b03c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b030:	4b59      	ldr	r3, [pc, #356]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	4a58      	ldr	r2, [pc, #352]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b03a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0308 	and.w	r3, r3, #8
 800b044:	2b00      	cmp	r3, #0
 800b046:	d005      	beq.n	800b054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b048:	4b53      	ldr	r3, [pc, #332]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	4a52      	ldr	r2, [pc, #328]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b04e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b054:	4b50      	ldr	r3, [pc, #320]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	494d      	ldr	r1, [pc, #308]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b062:	4313      	orrs	r3, r2
 800b064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d044      	beq.n	800b0fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	2b01      	cmp	r3, #1
 800b078:	d107      	bne.n	800b08a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b07a:	4b47      	ldr	r3, [pc, #284]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b082:	2b00      	cmp	r3, #0
 800b084:	d119      	bne.n	800b0ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	e07f      	b.n	800b18a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d003      	beq.n	800b09a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b096:	2b03      	cmp	r3, #3
 800b098:	d107      	bne.n	800b0aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b09a:	4b3f      	ldr	r3, [pc, #252]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d109      	bne.n	800b0ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e06f      	b.n	800b18a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0aa:	4b3b      	ldr	r3, [pc, #236]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e067      	b.n	800b18a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b0ba:	4b37      	ldr	r3, [pc, #220]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f023 0203 	bic.w	r2, r3, #3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	4934      	ldr	r1, [pc, #208]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b0cc:	f7fd f8f2 	bl	80082b4 <HAL_GetTick>
 800b0d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0d2:	e00a      	b.n	800b0ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0d4:	f7fd f8ee 	bl	80082b4 <HAL_GetTick>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d901      	bls.n	800b0ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b0e6:	2303      	movs	r3, #3
 800b0e8:	e04f      	b.n	800b18a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0ea:	4b2b      	ldr	r3, [pc, #172]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	f003 020c 	and.w	r2, r3, #12
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d1eb      	bne.n	800b0d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b0fc:	4b25      	ldr	r3, [pc, #148]	; (800b194 <HAL_RCC_ClockConfig+0x1b8>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 030f 	and.w	r3, r3, #15
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	429a      	cmp	r2, r3
 800b108:	d20c      	bcs.n	800b124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b10a:	4b22      	ldr	r3, [pc, #136]	; (800b194 <HAL_RCC_ClockConfig+0x1b8>)
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	b2d2      	uxtb	r2, r2
 800b110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b112:	4b20      	ldr	r3, [pc, #128]	; (800b194 <HAL_RCC_ClockConfig+0x1b8>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 030f 	and.w	r3, r3, #15
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d001      	beq.n	800b124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	e032      	b.n	800b18a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 0304 	and.w	r3, r3, #4
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d008      	beq.n	800b142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b130:	4b19      	ldr	r3, [pc, #100]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	4916      	ldr	r1, [pc, #88]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b13e:	4313      	orrs	r3, r2
 800b140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0308 	and.w	r3, r3, #8
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d009      	beq.n	800b162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b14e:	4b12      	ldr	r3, [pc, #72]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	490e      	ldr	r1, [pc, #56]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b15e:	4313      	orrs	r3, r2
 800b160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b162:	f000 f821 	bl	800b1a8 <HAL_RCC_GetSysClockFreq>
 800b166:	4601      	mov	r1, r0
 800b168:	4b0b      	ldr	r3, [pc, #44]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	091b      	lsrs	r3, r3, #4
 800b16e:	f003 030f 	and.w	r3, r3, #15
 800b172:	4a0a      	ldr	r2, [pc, #40]	; (800b19c <HAL_RCC_ClockConfig+0x1c0>)
 800b174:	5cd3      	ldrb	r3, [r2, r3]
 800b176:	fa21 f303 	lsr.w	r3, r1, r3
 800b17a:	4a09      	ldr	r2, [pc, #36]	; (800b1a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b17c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b17e:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <HAL_RCC_ClockConfig+0x1c8>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4618      	mov	r0, r3
 800b184:	f7fd f852 	bl	800822c <HAL_InitTick>

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	40023c00 	.word	0x40023c00
 800b198:	40023800 	.word	0x40023800
 800b19c:	0800f048 	.word	0x0800f048
 800b1a0:	2000000c 	.word	0x2000000c
 800b1a4:	20000010 	.word	0x20000010

0800b1a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	607b      	str	r3, [r7, #4]
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60fb      	str	r3, [r7, #12]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1be:	4b63      	ldr	r3, [pc, #396]	; (800b34c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	f003 030c 	and.w	r3, r3, #12
 800b1c6:	2b04      	cmp	r3, #4
 800b1c8:	d007      	beq.n	800b1da <HAL_RCC_GetSysClockFreq+0x32>
 800b1ca:	2b08      	cmp	r3, #8
 800b1cc:	d008      	beq.n	800b1e0 <HAL_RCC_GetSysClockFreq+0x38>
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f040 80b4 	bne.w	800b33c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b1d4:	4b5e      	ldr	r3, [pc, #376]	; (800b350 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b1d6:	60bb      	str	r3, [r7, #8]
       break;
 800b1d8:	e0b3      	b.n	800b342 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b1da:	4b5e      	ldr	r3, [pc, #376]	; (800b354 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800b1dc:	60bb      	str	r3, [r7, #8]
      break;
 800b1de:	e0b0      	b.n	800b342 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b1e0:	4b5a      	ldr	r3, [pc, #360]	; (800b34c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b1ea:	4b58      	ldr	r3, [pc, #352]	; (800b34c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d04a      	beq.n	800b28c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b1f6:	4b55      	ldr	r3, [pc, #340]	; (800b34c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	099b      	lsrs	r3, r3, #6
 800b1fc:	f04f 0400 	mov.w	r4, #0
 800b200:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b204:	f04f 0200 	mov.w	r2, #0
 800b208:	ea03 0501 	and.w	r5, r3, r1
 800b20c:	ea04 0602 	and.w	r6, r4, r2
 800b210:	4629      	mov	r1, r5
 800b212:	4632      	mov	r2, r6
 800b214:	f04f 0300 	mov.w	r3, #0
 800b218:	f04f 0400 	mov.w	r4, #0
 800b21c:	0154      	lsls	r4, r2, #5
 800b21e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b222:	014b      	lsls	r3, r1, #5
 800b224:	4619      	mov	r1, r3
 800b226:	4622      	mov	r2, r4
 800b228:	1b49      	subs	r1, r1, r5
 800b22a:	eb62 0206 	sbc.w	r2, r2, r6
 800b22e:	f04f 0300 	mov.w	r3, #0
 800b232:	f04f 0400 	mov.w	r4, #0
 800b236:	0194      	lsls	r4, r2, #6
 800b238:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b23c:	018b      	lsls	r3, r1, #6
 800b23e:	1a5b      	subs	r3, r3, r1
 800b240:	eb64 0402 	sbc.w	r4, r4, r2
 800b244:	f04f 0100 	mov.w	r1, #0
 800b248:	f04f 0200 	mov.w	r2, #0
 800b24c:	00e2      	lsls	r2, r4, #3
 800b24e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b252:	00d9      	lsls	r1, r3, #3
 800b254:	460b      	mov	r3, r1
 800b256:	4614      	mov	r4, r2
 800b258:	195b      	adds	r3, r3, r5
 800b25a:	eb44 0406 	adc.w	r4, r4, r6
 800b25e:	f04f 0100 	mov.w	r1, #0
 800b262:	f04f 0200 	mov.w	r2, #0
 800b266:	0262      	lsls	r2, r4, #9
 800b268:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b26c:	0259      	lsls	r1, r3, #9
 800b26e:	460b      	mov	r3, r1
 800b270:	4614      	mov	r4, r2
 800b272:	4618      	mov	r0, r3
 800b274:	4621      	mov	r1, r4
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f04f 0400 	mov.w	r4, #0
 800b27c:	461a      	mov	r2, r3
 800b27e:	4623      	mov	r3, r4
 800b280:	f7f5 fcba 	bl	8000bf8 <__aeabi_uldivmod>
 800b284:	4603      	mov	r3, r0
 800b286:	460c      	mov	r4, r1
 800b288:	60fb      	str	r3, [r7, #12]
 800b28a:	e049      	b.n	800b320 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b28c:	4b2f      	ldr	r3, [pc, #188]	; (800b34c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	099b      	lsrs	r3, r3, #6
 800b292:	f04f 0400 	mov.w	r4, #0
 800b296:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b29a:	f04f 0200 	mov.w	r2, #0
 800b29e:	ea03 0501 	and.w	r5, r3, r1
 800b2a2:	ea04 0602 	and.w	r6, r4, r2
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	4632      	mov	r2, r6
 800b2aa:	f04f 0300 	mov.w	r3, #0
 800b2ae:	f04f 0400 	mov.w	r4, #0
 800b2b2:	0154      	lsls	r4, r2, #5
 800b2b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b2b8:	014b      	lsls	r3, r1, #5
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	4622      	mov	r2, r4
 800b2be:	1b49      	subs	r1, r1, r5
 800b2c0:	eb62 0206 	sbc.w	r2, r2, r6
 800b2c4:	f04f 0300 	mov.w	r3, #0
 800b2c8:	f04f 0400 	mov.w	r4, #0
 800b2cc:	0194      	lsls	r4, r2, #6
 800b2ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b2d2:	018b      	lsls	r3, r1, #6
 800b2d4:	1a5b      	subs	r3, r3, r1
 800b2d6:	eb64 0402 	sbc.w	r4, r4, r2
 800b2da:	f04f 0100 	mov.w	r1, #0
 800b2de:	f04f 0200 	mov.w	r2, #0
 800b2e2:	00e2      	lsls	r2, r4, #3
 800b2e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b2e8:	00d9      	lsls	r1, r3, #3
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4614      	mov	r4, r2
 800b2ee:	195b      	adds	r3, r3, r5
 800b2f0:	eb44 0406 	adc.w	r4, r4, r6
 800b2f4:	f04f 0100 	mov.w	r1, #0
 800b2f8:	f04f 0200 	mov.w	r2, #0
 800b2fc:	02a2      	lsls	r2, r4, #10
 800b2fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b302:	0299      	lsls	r1, r3, #10
 800b304:	460b      	mov	r3, r1
 800b306:	4614      	mov	r4, r2
 800b308:	4618      	mov	r0, r3
 800b30a:	4621      	mov	r1, r4
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f04f 0400 	mov.w	r4, #0
 800b312:	461a      	mov	r2, r3
 800b314:	4623      	mov	r3, r4
 800b316:	f7f5 fc6f 	bl	8000bf8 <__aeabi_uldivmod>
 800b31a:	4603      	mov	r3, r0
 800b31c:	460c      	mov	r4, r1
 800b31e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	0c1b      	lsrs	r3, r3, #16
 800b326:	f003 0303 	and.w	r3, r3, #3
 800b32a:	3301      	adds	r3, #1
 800b32c:	005b      	lsls	r3, r3, #1
 800b32e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	fbb2 f3f3 	udiv	r3, r2, r3
 800b338:	60bb      	str	r3, [r7, #8]
      break;
 800b33a:	e002      	b.n	800b342 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b33c:	4b04      	ldr	r3, [pc, #16]	; (800b350 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b33e:	60bb      	str	r3, [r7, #8]
      break;
 800b340:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b342:	68bb      	ldr	r3, [r7, #8]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34c:	40023800 	.word	0x40023800
 800b350:	00f42400 	.word	0x00f42400
 800b354:	007a1200 	.word	0x007a1200

0800b358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b358:	b480      	push	{r7}
 800b35a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b35c:	4b03      	ldr	r3, [pc, #12]	; (800b36c <HAL_RCC_GetHCLKFreq+0x14>)
 800b35e:	681b      	ldr	r3, [r3, #0]
}
 800b360:	4618      	mov	r0, r3
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	2000000c 	.word	0x2000000c

0800b370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b374:	f7ff fff0 	bl	800b358 <HAL_RCC_GetHCLKFreq>
 800b378:	4601      	mov	r1, r0
 800b37a:	4b05      	ldr	r3, [pc, #20]	; (800b390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	0a9b      	lsrs	r3, r3, #10
 800b380:	f003 0307 	and.w	r3, r3, #7
 800b384:	4a03      	ldr	r2, [pc, #12]	; (800b394 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b386:	5cd3      	ldrb	r3, [r2, r3]
 800b388:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	40023800 	.word	0x40023800
 800b394:	0800f058 	.word	0x0800f058

0800b398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b39c:	f7ff ffdc 	bl	800b358 <HAL_RCC_GetHCLKFreq>
 800b3a0:	4601      	mov	r1, r0
 800b3a2:	4b05      	ldr	r3, [pc, #20]	; (800b3b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	0b5b      	lsrs	r3, r3, #13
 800b3a8:	f003 0307 	and.w	r3, r3, #7
 800b3ac:	4a03      	ldr	r2, [pc, #12]	; (800b3bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b3ae:	5cd3      	ldrb	r3, [r2, r3]
 800b3b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	40023800 	.word	0x40023800
 800b3bc:	0800f058 	.word	0x0800f058

0800b3c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e01d      	b.n	800b40e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7fc fa24 	bl	8007834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f000 fd08 	bl	800be14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b416:	b480      	push	{r7}
 800b418:	b085      	sub	sp, #20
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2202      	movs	r2, #2
 800b422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	f003 0307 	and.w	r3, r3, #7
 800b430:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b06      	cmp	r3, #6
 800b436:	d007      	beq.n	800b448 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f042 0201 	orr.w	r2, r2, #1
 800b446:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b45e:	b480      	push	{r7}
 800b460:	b083      	sub	sp, #12
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2202      	movs	r2, #2
 800b46a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	6a1a      	ldr	r2, [r3, #32]
 800b474:	f241 1311 	movw	r3, #4369	; 0x1111
 800b478:	4013      	ands	r3, r2
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10f      	bne.n	800b49e <HAL_TIM_Base_Stop+0x40>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	6a1a      	ldr	r2, [r3, #32]
 800b484:	f240 4344 	movw	r3, #1092	; 0x444
 800b488:	4013      	ands	r3, r2
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d107      	bne.n	800b49e <HAL_TIM_Base_Stop+0x40>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f022 0201 	bic.w	r2, r2, #1
 800b49c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68da      	ldr	r2, [r3, #12]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f042 0201 	orr.w	r2, r2, #1
 800b4ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f003 0307 	and.w	r3, r3, #7
 800b4d6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2b06      	cmp	r3, #6
 800b4dc:	d007      	beq.n	800b4ee <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f042 0201 	orr.w	r2, r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3714      	adds	r7, #20
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d101      	bne.n	800b50e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e01d      	b.n	800b54a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f815 	bl	800b552 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2202      	movs	r2, #2
 800b52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3304      	adds	r3, #4
 800b538:	4619      	mov	r1, r3
 800b53a:	4610      	mov	r0, r2
 800b53c:	f000 fc6a 	bl	800be14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3708      	adds	r7, #8
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b55a:	bf00      	nop
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
	...

0800b568 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2201      	movs	r2, #1
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f001 f85e 	bl	800c63c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a15      	ldr	r2, [pc, #84]	; (800b5dc <HAL_TIM_PWM_Start+0x74>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d004      	beq.n	800b594 <HAL_TIM_PWM_Start+0x2c>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a14      	ldr	r2, [pc, #80]	; (800b5e0 <HAL_TIM_PWM_Start+0x78>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d101      	bne.n	800b598 <HAL_TIM_PWM_Start+0x30>
 800b594:	2301      	movs	r3, #1
 800b596:	e000      	b.n	800b59a <HAL_TIM_PWM_Start+0x32>
 800b598:	2300      	movs	r3, #0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d007      	beq.n	800b5ae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	f003 0307 	and.w	r3, r3, #7
 800b5b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2b06      	cmp	r3, #6
 800b5be:	d007      	beq.n	800b5d0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f042 0201 	orr.w	r2, r2, #1
 800b5ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	40010000 	.word	0x40010000
 800b5e0:	40010400 	.word	0x40010400

0800b5e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d101      	bne.n	800b5f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e01d      	b.n	800b632 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d106      	bne.n	800b610 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7fc f9f2 	bl	80079f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2202      	movs	r2, #2
 800b614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	3304      	adds	r3, #4
 800b620:	4619      	mov	r1, r3
 800b622:	4610      	mov	r0, r2
 800b624:	f000 fbf6 	bl	800be14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
	...

0800b63c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	2b0c      	cmp	r3, #12
 800b64a:	d841      	bhi.n	800b6d0 <HAL_TIM_IC_Start_IT+0x94>
 800b64c:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <HAL_TIM_IC_Start_IT+0x18>)
 800b64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b652:	bf00      	nop
 800b654:	0800b689 	.word	0x0800b689
 800b658:	0800b6d1 	.word	0x0800b6d1
 800b65c:	0800b6d1 	.word	0x0800b6d1
 800b660:	0800b6d1 	.word	0x0800b6d1
 800b664:	0800b69b 	.word	0x0800b69b
 800b668:	0800b6d1 	.word	0x0800b6d1
 800b66c:	0800b6d1 	.word	0x0800b6d1
 800b670:	0800b6d1 	.word	0x0800b6d1
 800b674:	0800b6ad 	.word	0x0800b6ad
 800b678:	0800b6d1 	.word	0x0800b6d1
 800b67c:	0800b6d1 	.word	0x0800b6d1
 800b680:	0800b6d1 	.word	0x0800b6d1
 800b684:	0800b6bf 	.word	0x0800b6bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68da      	ldr	r2, [r3, #12]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f042 0202 	orr.w	r2, r2, #2
 800b696:	60da      	str	r2, [r3, #12]
      break;
 800b698:	e01b      	b.n	800b6d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68da      	ldr	r2, [r3, #12]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f042 0204 	orr.w	r2, r2, #4
 800b6a8:	60da      	str	r2, [r3, #12]
      break;
 800b6aa:	e012      	b.n	800b6d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68da      	ldr	r2, [r3, #12]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f042 0208 	orr.w	r2, r2, #8
 800b6ba:	60da      	str	r2, [r3, #12]
      break;
 800b6bc:	e009      	b.n	800b6d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68da      	ldr	r2, [r3, #12]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f042 0210 	orr.w	r2, r2, #16
 800b6cc:	60da      	str	r2, [r3, #12]
      break;
 800b6ce:	e000      	b.n	800b6d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800b6d0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 ffae 	bl	800c63c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	f003 0307 	and.w	r3, r3, #7
 800b6ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b06      	cmp	r3, #6
 800b6f0:	d007      	beq.n	800b702 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f042 0201 	orr.w	r2, r2, #1
 800b700:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	691b      	ldr	r3, [r3, #16]
 800b71a:	f003 0302 	and.w	r3, r3, #2
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d122      	bne.n	800b768 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	f003 0302 	and.w	r3, r3, #2
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d11b      	bne.n	800b768 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f06f 0202 	mvn.w	r2, #2
 800b738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	f003 0303 	and.w	r3, r3, #3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7fb f846 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 800b754:	e005      	b.n	800b762 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fb3e 	bl	800bdd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 fb45 	bl	800bdec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	f003 0304 	and.w	r3, r3, #4
 800b772:	2b04      	cmp	r3, #4
 800b774:	d122      	bne.n	800b7bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	f003 0304 	and.w	r3, r3, #4
 800b780:	2b04      	cmp	r3, #4
 800b782:	d11b      	bne.n	800b7bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f06f 0204 	mvn.w	r2, #4
 800b78c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2202      	movs	r2, #2
 800b792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7fb f81c 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 800b7a8:	e005      	b.n	800b7b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fb14 	bl	800bdd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fb1b 	bl	800bdec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	f003 0308 	and.w	r3, r3, #8
 800b7c6:	2b08      	cmp	r3, #8
 800b7c8:	d122      	bne.n	800b810 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	f003 0308 	and.w	r3, r3, #8
 800b7d4:	2b08      	cmp	r3, #8
 800b7d6:	d11b      	bne.n	800b810 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f06f 0208 	mvn.w	r2, #8
 800b7e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2204      	movs	r2, #4
 800b7e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	f003 0303 	and.w	r3, r3, #3
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7fa fff2 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 800b7fc:	e005      	b.n	800b80a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 faea 	bl	800bdd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 faf1 	bl	800bdec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	f003 0310 	and.w	r3, r3, #16
 800b81a:	2b10      	cmp	r3, #16
 800b81c:	d122      	bne.n	800b864 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	f003 0310 	and.w	r3, r3, #16
 800b828:	2b10      	cmp	r3, #16
 800b82a:	d11b      	bne.n	800b864 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f06f 0210 	mvn.w	r2, #16
 800b834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2208      	movs	r2, #8
 800b83a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	69db      	ldr	r3, [r3, #28]
 800b842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b846:	2b00      	cmp	r3, #0
 800b848:	d003      	beq.n	800b852 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f7fa ffc8 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 800b850:	e005      	b.n	800b85e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 fac0 	bl	800bdd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fac7 	bl	800bdec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d10e      	bne.n	800b890 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	f003 0301 	and.w	r3, r3, #1
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d107      	bne.n	800b890 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f06f 0201 	mvn.w	r2, #1
 800b888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7fb fb18 	bl	8006ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b89a:	2b80      	cmp	r3, #128	; 0x80
 800b89c:	d10e      	bne.n	800b8bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8a8:	2b80      	cmp	r3, #128	; 0x80
 800b8aa:	d107      	bne.n	800b8bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b8b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 ffbe 	bl	800c838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c6:	2b40      	cmp	r3, #64	; 0x40
 800b8c8:	d10e      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d4:	2b40      	cmp	r3, #64	; 0x40
 800b8d6:	d107      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b8e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fa8c 	bl	800be00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	f003 0320 	and.w	r3, r3, #32
 800b8f2:	2b20      	cmp	r3, #32
 800b8f4:	d10e      	bne.n	800b914 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	f003 0320 	and.w	r3, r3, #32
 800b900:	2b20      	cmp	r3, #32
 800b902:	d107      	bne.n	800b914 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f06f 0220 	mvn.w	r2, #32
 800b90c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 ff88 	bl	800c824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b914:	bf00      	nop
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d101      	bne.n	800b936 <HAL_TIM_IC_ConfigChannel+0x1a>
 800b932:	2302      	movs	r3, #2
 800b934:	e08a      	b.n	800ba4c <HAL_TIM_IC_ConfigChannel+0x130>
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2202      	movs	r2, #2
 800b942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d11b      	bne.n	800b984 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6818      	ldr	r0, [r3, #0]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	6819      	ldr	r1, [r3, #0]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f000 fcaa 	bl	800c2b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	699a      	ldr	r2, [r3, #24]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f022 020c 	bic.w	r2, r2, #12
 800b96e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6999      	ldr	r1, [r3, #24]
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	689a      	ldr	r2, [r3, #8]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	430a      	orrs	r2, r1
 800b980:	619a      	str	r2, [r3, #24]
 800b982:	e05a      	b.n	800ba3a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b04      	cmp	r3, #4
 800b988:	d11c      	bne.n	800b9c4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6818      	ldr	r0, [r3, #0]
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	6819      	ldr	r1, [r3, #0]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	f000 fd2e 	bl	800c3fa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	699a      	ldr	r2, [r3, #24]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b9ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6999      	ldr	r1, [r3, #24]
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	021a      	lsls	r2, r3, #8
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	619a      	str	r2, [r3, #24]
 800b9c2:	e03a      	b.n	800ba3a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b08      	cmp	r3, #8
 800b9c8:	d11b      	bne.n	800ba02 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6818      	ldr	r0, [r3, #0]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	6819      	ldr	r1, [r3, #0]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	f000 fd7b 	bl	800c4d4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	69da      	ldr	r2, [r3, #28]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f022 020c 	bic.w	r2, r2, #12
 800b9ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	69d9      	ldr	r1, [r3, #28]
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	689a      	ldr	r2, [r3, #8]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	61da      	str	r2, [r3, #28]
 800ba00:	e01b      	b.n	800ba3a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6819      	ldr	r1, [r3, #0]
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	685a      	ldr	r2, [r3, #4]
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	f000 fd9b 	bl	800c54c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	69da      	ldr	r2, [r3, #28]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ba24:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	69d9      	ldr	r1, [r3, #28]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	021a      	lsls	r2, r3, #8
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	430a      	orrs	r2, r1
 800ba38:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d101      	bne.n	800ba6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	e0b4      	b.n	800bbd8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2201      	movs	r2, #1
 800ba72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2202      	movs	r2, #2
 800ba7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2b0c      	cmp	r3, #12
 800ba82:	f200 809f 	bhi.w	800bbc4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ba86:	a201      	add	r2, pc, #4	; (adr r2, 800ba8c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800bac1 	.word	0x0800bac1
 800ba90:	0800bbc5 	.word	0x0800bbc5
 800ba94:	0800bbc5 	.word	0x0800bbc5
 800ba98:	0800bbc5 	.word	0x0800bbc5
 800ba9c:	0800bb01 	.word	0x0800bb01
 800baa0:	0800bbc5 	.word	0x0800bbc5
 800baa4:	0800bbc5 	.word	0x0800bbc5
 800baa8:	0800bbc5 	.word	0x0800bbc5
 800baac:	0800bb43 	.word	0x0800bb43
 800bab0:	0800bbc5 	.word	0x0800bbc5
 800bab4:	0800bbc5 	.word	0x0800bbc5
 800bab8:	0800bbc5 	.word	0x0800bbc5
 800babc:	0800bb83 	.word	0x0800bb83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68b9      	ldr	r1, [r7, #8]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f000 fa44 	bl	800bf54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	699a      	ldr	r2, [r3, #24]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f042 0208 	orr.w	r2, r2, #8
 800bada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	699a      	ldr	r2, [r3, #24]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f022 0204 	bic.w	r2, r2, #4
 800baea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	6999      	ldr	r1, [r3, #24]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	691a      	ldr	r2, [r3, #16]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	430a      	orrs	r2, r1
 800bafc:	619a      	str	r2, [r3, #24]
      break;
 800bafe:	e062      	b.n	800bbc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68b9      	ldr	r1, [r7, #8]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 fa94 	bl	800c034 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	699a      	ldr	r2, [r3, #24]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	699a      	ldr	r2, [r3, #24]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6999      	ldr	r1, [r3, #24]
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	021a      	lsls	r2, r3, #8
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	430a      	orrs	r2, r1
 800bb3e:	619a      	str	r2, [r3, #24]
      break;
 800bb40:	e041      	b.n	800bbc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68b9      	ldr	r1, [r7, #8]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 fae9 	bl	800c120 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69da      	ldr	r2, [r3, #28]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f042 0208 	orr.w	r2, r2, #8
 800bb5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	69da      	ldr	r2, [r3, #28]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f022 0204 	bic.w	r2, r2, #4
 800bb6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	69d9      	ldr	r1, [r3, #28]
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	691a      	ldr	r2, [r3, #16]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	430a      	orrs	r2, r1
 800bb7e:	61da      	str	r2, [r3, #28]
      break;
 800bb80:	e021      	b.n	800bbc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 fb3d 	bl	800c208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	69da      	ldr	r2, [r3, #28]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	69da      	ldr	r2, [r3, #28]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	69d9      	ldr	r1, [r3, #28]
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	021a      	lsls	r2, r3, #8
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	430a      	orrs	r2, r1
 800bbc0:	61da      	str	r2, [r3, #28]
      break;
 800bbc2:	e000      	b.n	800bbc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800bbc4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3710      	adds	r7, #16
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d101      	bne.n	800bbf8 <HAL_TIM_ConfigClockSource+0x18>
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	e0a6      	b.n	800bd46 <HAL_TIM_ConfigClockSource+0x166>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2202      	movs	r2, #2
 800bc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bc16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b40      	cmp	r3, #64	; 0x40
 800bc2e:	d067      	beq.n	800bd00 <HAL_TIM_ConfigClockSource+0x120>
 800bc30:	2b40      	cmp	r3, #64	; 0x40
 800bc32:	d80b      	bhi.n	800bc4c <HAL_TIM_ConfigClockSource+0x6c>
 800bc34:	2b10      	cmp	r3, #16
 800bc36:	d073      	beq.n	800bd20 <HAL_TIM_ConfigClockSource+0x140>
 800bc38:	2b10      	cmp	r3, #16
 800bc3a:	d802      	bhi.n	800bc42 <HAL_TIM_ConfigClockSource+0x62>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d06f      	beq.n	800bd20 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bc40:	e078      	b.n	800bd34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bc42:	2b20      	cmp	r3, #32
 800bc44:	d06c      	beq.n	800bd20 <HAL_TIM_ConfigClockSource+0x140>
 800bc46:	2b30      	cmp	r3, #48	; 0x30
 800bc48:	d06a      	beq.n	800bd20 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800bc4a:	e073      	b.n	800bd34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bc4c:	2b70      	cmp	r3, #112	; 0x70
 800bc4e:	d00d      	beq.n	800bc6c <HAL_TIM_ConfigClockSource+0x8c>
 800bc50:	2b70      	cmp	r3, #112	; 0x70
 800bc52:	d804      	bhi.n	800bc5e <HAL_TIM_ConfigClockSource+0x7e>
 800bc54:	2b50      	cmp	r3, #80	; 0x50
 800bc56:	d033      	beq.n	800bcc0 <HAL_TIM_ConfigClockSource+0xe0>
 800bc58:	2b60      	cmp	r3, #96	; 0x60
 800bc5a:	d041      	beq.n	800bce0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800bc5c:	e06a      	b.n	800bd34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bc5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc62:	d066      	beq.n	800bd32 <HAL_TIM_ConfigClockSource+0x152>
 800bc64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc68:	d017      	beq.n	800bc9a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800bc6a:	e063      	b.n	800bd34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6818      	ldr	r0, [r3, #0]
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	6899      	ldr	r1, [r3, #8]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	685a      	ldr	r2, [r3, #4]
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	f000 fcbe 	bl	800c5fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	609a      	str	r2, [r3, #8]
      break;
 800bc98:	e04c      	b.n	800bd34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6818      	ldr	r0, [r3, #0]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	6899      	ldr	r1, [r3, #8]
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	f000 fca7 	bl	800c5fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	689a      	ldr	r2, [r3, #8]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcbc:	609a      	str	r2, [r3, #8]
      break;
 800bcbe:	e039      	b.n	800bd34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6818      	ldr	r0, [r3, #0]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	6859      	ldr	r1, [r3, #4]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	461a      	mov	r2, r3
 800bcce:	f000 fb65 	bl	800c39c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2150      	movs	r1, #80	; 0x50
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 fc74 	bl	800c5c6 <TIM_ITRx_SetConfig>
      break;
 800bcde:	e029      	b.n	800bd34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6818      	ldr	r0, [r3, #0]
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	6859      	ldr	r1, [r3, #4]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	461a      	mov	r2, r3
 800bcee:	f000 fbc1 	bl	800c474 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2160      	movs	r1, #96	; 0x60
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fc64 	bl	800c5c6 <TIM_ITRx_SetConfig>
      break;
 800bcfe:	e019      	b.n	800bd34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6818      	ldr	r0, [r3, #0]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	6859      	ldr	r1, [r3, #4]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	f000 fb45 	bl	800c39c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2140      	movs	r1, #64	; 0x40
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f000 fc54 	bl	800c5c6 <TIM_ITRx_SetConfig>
      break;
 800bd1e:	e009      	b.n	800bd34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f000 fc4b 	bl	800c5c6 <TIM_ITRx_SetConfig>
      break;
 800bd30:	e000      	b.n	800bd34 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800bd32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b0c      	cmp	r3, #12
 800bd62:	d831      	bhi.n	800bdc8 <HAL_TIM_ReadCapturedValue+0x78>
 800bd64:	a201      	add	r2, pc, #4	; (adr r2, 800bd6c <HAL_TIM_ReadCapturedValue+0x1c>)
 800bd66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6a:	bf00      	nop
 800bd6c:	0800bda1 	.word	0x0800bda1
 800bd70:	0800bdc9 	.word	0x0800bdc9
 800bd74:	0800bdc9 	.word	0x0800bdc9
 800bd78:	0800bdc9 	.word	0x0800bdc9
 800bd7c:	0800bdab 	.word	0x0800bdab
 800bd80:	0800bdc9 	.word	0x0800bdc9
 800bd84:	0800bdc9 	.word	0x0800bdc9
 800bd88:	0800bdc9 	.word	0x0800bdc9
 800bd8c:	0800bdb5 	.word	0x0800bdb5
 800bd90:	0800bdc9 	.word	0x0800bdc9
 800bd94:	0800bdc9 	.word	0x0800bdc9
 800bd98:	0800bdc9 	.word	0x0800bdc9
 800bd9c:	0800bdbf 	.word	0x0800bdbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda6:	60fb      	str	r3, [r7, #12]

      break;
 800bda8:	e00f      	b.n	800bdca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb0:	60fb      	str	r3, [r7, #12]

      break;
 800bdb2:	e00a      	b.n	800bdca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdba:	60fb      	str	r3, [r7, #12]

      break;
 800bdbc:	e005      	b.n	800bdca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc4:	60fb      	str	r3, [r7, #12]

      break;
 800bdc6:	e000      	b.n	800bdca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800bdc8:	bf00      	nop
  }

  return tmpreg;
 800bdca:	68fb      	ldr	r3, [r7, #12]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3714      	adds	r7, #20
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4a40      	ldr	r2, [pc, #256]	; (800bf28 <TIM_Base_SetConfig+0x114>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d013      	beq.n	800be54 <TIM_Base_SetConfig+0x40>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be32:	d00f      	beq.n	800be54 <TIM_Base_SetConfig+0x40>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a3d      	ldr	r2, [pc, #244]	; (800bf2c <TIM_Base_SetConfig+0x118>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d00b      	beq.n	800be54 <TIM_Base_SetConfig+0x40>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a3c      	ldr	r2, [pc, #240]	; (800bf30 <TIM_Base_SetConfig+0x11c>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d007      	beq.n	800be54 <TIM_Base_SetConfig+0x40>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a3b      	ldr	r2, [pc, #236]	; (800bf34 <TIM_Base_SetConfig+0x120>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d003      	beq.n	800be54 <TIM_Base_SetConfig+0x40>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a3a      	ldr	r2, [pc, #232]	; (800bf38 <TIM_Base_SetConfig+0x124>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d108      	bne.n	800be66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	4313      	orrs	r3, r2
 800be64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a2f      	ldr	r2, [pc, #188]	; (800bf28 <TIM_Base_SetConfig+0x114>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d02b      	beq.n	800bec6 <TIM_Base_SetConfig+0xb2>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be74:	d027      	beq.n	800bec6 <TIM_Base_SetConfig+0xb2>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a2c      	ldr	r2, [pc, #176]	; (800bf2c <TIM_Base_SetConfig+0x118>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d023      	beq.n	800bec6 <TIM_Base_SetConfig+0xb2>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a2b      	ldr	r2, [pc, #172]	; (800bf30 <TIM_Base_SetConfig+0x11c>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d01f      	beq.n	800bec6 <TIM_Base_SetConfig+0xb2>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a2a      	ldr	r2, [pc, #168]	; (800bf34 <TIM_Base_SetConfig+0x120>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d01b      	beq.n	800bec6 <TIM_Base_SetConfig+0xb2>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a29      	ldr	r2, [pc, #164]	; (800bf38 <TIM_Base_SetConfig+0x124>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d017      	beq.n	800bec6 <TIM_Base_SetConfig+0xb2>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a28      	ldr	r2, [pc, #160]	; (800bf3c <TIM_Base_SetConfig+0x128>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d013      	beq.n	800bec6 <TIM_Base_SetConfig+0xb2>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a27      	ldr	r2, [pc, #156]	; (800bf40 <TIM_Base_SetConfig+0x12c>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d00f      	beq.n	800bec6 <TIM_Base_SetConfig+0xb2>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a26      	ldr	r2, [pc, #152]	; (800bf44 <TIM_Base_SetConfig+0x130>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d00b      	beq.n	800bec6 <TIM_Base_SetConfig+0xb2>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a25      	ldr	r2, [pc, #148]	; (800bf48 <TIM_Base_SetConfig+0x134>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d007      	beq.n	800bec6 <TIM_Base_SetConfig+0xb2>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a24      	ldr	r2, [pc, #144]	; (800bf4c <TIM_Base_SetConfig+0x138>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d003      	beq.n	800bec6 <TIM_Base_SetConfig+0xb2>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a23      	ldr	r2, [pc, #140]	; (800bf50 <TIM_Base_SetConfig+0x13c>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d108      	bne.n	800bed8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800becc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	695b      	ldr	r3, [r3, #20]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	689a      	ldr	r2, [r3, #8]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a0a      	ldr	r2, [pc, #40]	; (800bf28 <TIM_Base_SetConfig+0x114>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d003      	beq.n	800bf0c <TIM_Base_SetConfig+0xf8>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a0c      	ldr	r2, [pc, #48]	; (800bf38 <TIM_Base_SetConfig+0x124>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d103      	bne.n	800bf14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	691a      	ldr	r2, [r3, #16]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	615a      	str	r2, [r3, #20]
}
 800bf1a:	bf00      	nop
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	40010000 	.word	0x40010000
 800bf2c:	40000400 	.word	0x40000400
 800bf30:	40000800 	.word	0x40000800
 800bf34:	40000c00 	.word	0x40000c00
 800bf38:	40010400 	.word	0x40010400
 800bf3c:	40014000 	.word	0x40014000
 800bf40:	40014400 	.word	0x40014400
 800bf44:	40014800 	.word	0x40014800
 800bf48:	40001800 	.word	0x40001800
 800bf4c:	40001c00 	.word	0x40001c00
 800bf50:	40002000 	.word	0x40002000

0800bf54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b087      	sub	sp, #28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a1b      	ldr	r3, [r3, #32]
 800bf62:	f023 0201 	bic.w	r2, r3, #1
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	699b      	ldr	r3, [r3, #24]
 800bf7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f023 0303 	bic.w	r3, r3, #3
 800bf8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	f023 0302 	bic.w	r3, r3, #2
 800bf9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	697a      	ldr	r2, [r7, #20]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4a20      	ldr	r2, [pc, #128]	; (800c02c <TIM_OC1_SetConfig+0xd8>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d003      	beq.n	800bfb8 <TIM_OC1_SetConfig+0x64>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4a1f      	ldr	r2, [pc, #124]	; (800c030 <TIM_OC1_SetConfig+0xdc>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d10c      	bne.n	800bfd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f023 0308 	bic.w	r3, r3, #8
 800bfbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	697a      	ldr	r2, [r7, #20]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	f023 0304 	bic.w	r3, r3, #4
 800bfd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a15      	ldr	r2, [pc, #84]	; (800c02c <TIM_OC1_SetConfig+0xd8>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d003      	beq.n	800bfe2 <TIM_OC1_SetConfig+0x8e>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a14      	ldr	r2, [pc, #80]	; (800c030 <TIM_OC1_SetConfig+0xdc>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d111      	bne.n	800c006 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	693a      	ldr	r2, [r7, #16]
 800bff8:	4313      	orrs	r3, r2
 800bffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	4313      	orrs	r3, r2
 800c004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	685a      	ldr	r2, [r3, #4]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	697a      	ldr	r2, [r7, #20]
 800c01e:	621a      	str	r2, [r3, #32]
}
 800c020:	bf00      	nop
 800c022:	371c      	adds	r7, #28
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	40010000 	.word	0x40010000
 800c030:	40010400 	.word	0x40010400

0800c034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c034:	b480      	push	{r7}
 800c036:	b087      	sub	sp, #28
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a1b      	ldr	r3, [r3, #32]
 800c042:	f023 0210 	bic.w	r2, r3, #16
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c06a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	021b      	lsls	r3, r3, #8
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	4313      	orrs	r3, r2
 800c076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	f023 0320 	bic.w	r3, r3, #32
 800c07e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	011b      	lsls	r3, r3, #4
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	4313      	orrs	r3, r2
 800c08a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	4a22      	ldr	r2, [pc, #136]	; (800c118 <TIM_OC2_SetConfig+0xe4>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d003      	beq.n	800c09c <TIM_OC2_SetConfig+0x68>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4a21      	ldr	r2, [pc, #132]	; (800c11c <TIM_OC2_SetConfig+0xe8>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d10d      	bne.n	800c0b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	011b      	lsls	r3, r3, #4
 800c0aa:	697a      	ldr	r2, [r7, #20]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4a17      	ldr	r2, [pc, #92]	; (800c118 <TIM_OC2_SetConfig+0xe4>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d003      	beq.n	800c0c8 <TIM_OC2_SetConfig+0x94>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a16      	ldr	r2, [pc, #88]	; (800c11c <TIM_OC2_SetConfig+0xe8>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d113      	bne.n	800c0f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	685a      	ldr	r2, [r3, #4]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	621a      	str	r2, [r3, #32]
}
 800c10a:	bf00      	nop
 800c10c:	371c      	adds	r7, #28
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	40010000 	.word	0x40010000
 800c11c:	40010400 	.word	0x40010400

0800c120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c120:	b480      	push	{r7}
 800c122:	b087      	sub	sp, #28
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	69db      	ldr	r3, [r3, #28]
 800c146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c14e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f023 0303 	bic.w	r3, r3, #3
 800c156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	4313      	orrs	r3, r2
 800c160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	021b      	lsls	r3, r3, #8
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	4313      	orrs	r3, r2
 800c174:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a21      	ldr	r2, [pc, #132]	; (800c200 <TIM_OC3_SetConfig+0xe0>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d003      	beq.n	800c186 <TIM_OC3_SetConfig+0x66>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a20      	ldr	r2, [pc, #128]	; (800c204 <TIM_OC3_SetConfig+0xe4>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d10d      	bne.n	800c1a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c18c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	021b      	lsls	r3, r3, #8
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	4313      	orrs	r3, r2
 800c198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a16      	ldr	r2, [pc, #88]	; (800c200 <TIM_OC3_SetConfig+0xe0>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d003      	beq.n	800c1b2 <TIM_OC3_SetConfig+0x92>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a15      	ldr	r2, [pc, #84]	; (800c204 <TIM_OC3_SetConfig+0xe4>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d113      	bne.n	800c1da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	011b      	lsls	r3, r3, #4
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	699b      	ldr	r3, [r3, #24]
 800c1d2:	011b      	lsls	r3, r3, #4
 800c1d4:	693a      	ldr	r2, [r7, #16]
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	693a      	ldr	r2, [r7, #16]
 800c1de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	685a      	ldr	r2, [r3, #4]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	697a      	ldr	r2, [r7, #20]
 800c1f2:	621a      	str	r2, [r3, #32]
}
 800c1f4:	bf00      	nop
 800c1f6:	371c      	adds	r7, #28
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr
 800c200:	40010000 	.word	0x40010000
 800c204:	40010400 	.word	0x40010400

0800c208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c208:	b480      	push	{r7}
 800c20a:	b087      	sub	sp, #28
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	69db      	ldr	r3, [r3, #28]
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c23e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	021b      	lsls	r3, r3, #8
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	4313      	orrs	r3, r2
 800c24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	031b      	lsls	r3, r3, #12
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a12      	ldr	r2, [pc, #72]	; (800c2ac <TIM_OC4_SetConfig+0xa4>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d003      	beq.n	800c270 <TIM_OC4_SetConfig+0x68>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a11      	ldr	r2, [pc, #68]	; (800c2b0 <TIM_OC4_SetConfig+0xa8>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d109      	bne.n	800c284 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	695b      	ldr	r3, [r3, #20]
 800c27c:	019b      	lsls	r3, r3, #6
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	4313      	orrs	r3, r2
 800c282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	685a      	ldr	r2, [r3, #4]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	621a      	str	r2, [r3, #32]
}
 800c29e:	bf00      	nop
 800c2a0:	371c      	adds	r7, #28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	40010000 	.word	0x40010000
 800c2b0:	40010400 	.word	0x40010400

0800c2b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b087      	sub	sp, #28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	f023 0201 	bic.w	r2, r3, #1
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6a1b      	ldr	r3, [r3, #32]
 800c2d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	4a28      	ldr	r2, [pc, #160]	; (800c380 <TIM_TI1_SetConfig+0xcc>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d01b      	beq.n	800c31a <TIM_TI1_SetConfig+0x66>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2e8:	d017      	beq.n	800c31a <TIM_TI1_SetConfig+0x66>
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	4a25      	ldr	r2, [pc, #148]	; (800c384 <TIM_TI1_SetConfig+0xd0>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d013      	beq.n	800c31a <TIM_TI1_SetConfig+0x66>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	4a24      	ldr	r2, [pc, #144]	; (800c388 <TIM_TI1_SetConfig+0xd4>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d00f      	beq.n	800c31a <TIM_TI1_SetConfig+0x66>
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	4a23      	ldr	r2, [pc, #140]	; (800c38c <TIM_TI1_SetConfig+0xd8>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d00b      	beq.n	800c31a <TIM_TI1_SetConfig+0x66>
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	4a22      	ldr	r2, [pc, #136]	; (800c390 <TIM_TI1_SetConfig+0xdc>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d007      	beq.n	800c31a <TIM_TI1_SetConfig+0x66>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	4a21      	ldr	r2, [pc, #132]	; (800c394 <TIM_TI1_SetConfig+0xe0>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d003      	beq.n	800c31a <TIM_TI1_SetConfig+0x66>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	4a20      	ldr	r2, [pc, #128]	; (800c398 <TIM_TI1_SetConfig+0xe4>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d101      	bne.n	800c31e <TIM_TI1_SetConfig+0x6a>
 800c31a:	2301      	movs	r3, #1
 800c31c:	e000      	b.n	800c320 <TIM_TI1_SetConfig+0x6c>
 800c31e:	2300      	movs	r3, #0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d008      	beq.n	800c336 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	f023 0303 	bic.w	r3, r3, #3
 800c32a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4313      	orrs	r3, r2
 800c332:	617b      	str	r3, [r7, #20]
 800c334:	e003      	b.n	800c33e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	f043 0301 	orr.w	r3, r3, #1
 800c33c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c344:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	011b      	lsls	r3, r3, #4
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	697a      	ldr	r2, [r7, #20]
 800c34e:	4313      	orrs	r3, r2
 800c350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	f023 030a 	bic.w	r3, r3, #10
 800c358:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	f003 030a 	and.w	r3, r3, #10
 800c360:	693a      	ldr	r2, [r7, #16]
 800c362:	4313      	orrs	r3, r2
 800c364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	697a      	ldr	r2, [r7, #20]
 800c36a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	693a      	ldr	r2, [r7, #16]
 800c370:	621a      	str	r2, [r3, #32]
}
 800c372:	bf00      	nop
 800c374:	371c      	adds	r7, #28
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	40010000 	.word	0x40010000
 800c384:	40000400 	.word	0x40000400
 800c388:	40000800 	.word	0x40000800
 800c38c:	40000c00 	.word	0x40000c00
 800c390:	40010400 	.word	0x40010400
 800c394:	40014000 	.word	0x40014000
 800c398:	40001800 	.word	0x40001800

0800c39c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b087      	sub	sp, #28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6a1b      	ldr	r3, [r3, #32]
 800c3ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	f023 0201 	bic.w	r2, r3, #1
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	011b      	lsls	r3, r3, #4
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f023 030a 	bic.w	r3, r3, #10
 800c3d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	621a      	str	r2, [r3, #32]
}
 800c3ee:	bf00      	nop
 800c3f0:	371c      	adds	r7, #28
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr

0800c3fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c3fa:	b480      	push	{r7}
 800c3fc:	b087      	sub	sp, #28
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	60f8      	str	r0, [r7, #12]
 800c402:	60b9      	str	r1, [r7, #8]
 800c404:	607a      	str	r2, [r7, #4]
 800c406:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6a1b      	ldr	r3, [r3, #32]
 800c40c:	f023 0210 	bic.w	r2, r3, #16
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	699b      	ldr	r3, [r3, #24]
 800c418:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	6a1b      	ldr	r3, [r3, #32]
 800c41e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c426:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	021b      	lsls	r3, r3, #8
 800c42c:	697a      	ldr	r2, [r7, #20]
 800c42e:	4313      	orrs	r3, r2
 800c430:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	031b      	lsls	r3, r3, #12
 800c43e:	b29b      	uxth	r3, r3
 800c440:	697a      	ldr	r2, [r7, #20]
 800c442:	4313      	orrs	r3, r2
 800c444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c44c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	011b      	lsls	r3, r3, #4
 800c452:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c456:	693a      	ldr	r2, [r7, #16]
 800c458:	4313      	orrs	r3, r2
 800c45a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	621a      	str	r2, [r3, #32]
}
 800c468:	bf00      	nop
 800c46a:	371c      	adds	r7, #28
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c474:	b480      	push	{r7}
 800c476:	b087      	sub	sp, #28
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6a1b      	ldr	r3, [r3, #32]
 800c484:	f023 0210 	bic.w	r2, r3, #16
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	699b      	ldr	r3, [r3, #24]
 800c490:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6a1b      	ldr	r3, [r3, #32]
 800c496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c49e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	031b      	lsls	r3, r3, #12
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c4b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	011b      	lsls	r3, r3, #4
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	693a      	ldr	r2, [r7, #16]
 800c4c6:	621a      	str	r2, [r3, #32]
}
 800c4c8:	bf00      	nop
 800c4ca:	371c      	adds	r7, #28
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b087      	sub	sp, #28
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
 800c4e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	69db      	ldr	r3, [r3, #28]
 800c4f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6a1b      	ldr	r3, [r3, #32]
 800c4f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	f023 0303 	bic.w	r3, r3, #3
 800c500:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c502:	697a      	ldr	r2, [r7, #20]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4313      	orrs	r3, r2
 800c508:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c510:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	011b      	lsls	r3, r3, #4
 800c516:	b2db      	uxtb	r3, r3
 800c518:	697a      	ldr	r2, [r7, #20]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c524:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	021b      	lsls	r3, r3, #8
 800c52a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c52e:	693a      	ldr	r2, [r7, #16]
 800c530:	4313      	orrs	r3, r2
 800c532:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	693a      	ldr	r2, [r7, #16]
 800c53e:	621a      	str	r2, [r3, #32]
}
 800c540:	bf00      	nop
 800c542:	371c      	adds	r7, #28
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b087      	sub	sp, #28
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
 800c558:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	69db      	ldr	r3, [r3, #28]
 800c56a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6a1b      	ldr	r3, [r3, #32]
 800c570:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c578:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	021b      	lsls	r3, r3, #8
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	4313      	orrs	r3, r2
 800c582:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c58a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	031b      	lsls	r3, r3, #12
 800c590:	b29b      	uxth	r3, r3
 800c592:	697a      	ldr	r2, [r7, #20]
 800c594:	4313      	orrs	r3, r2
 800c596:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c59e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	031b      	lsls	r3, r3, #12
 800c5a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	693a      	ldr	r2, [r7, #16]
 800c5b8:	621a      	str	r2, [r3, #32]
}
 800c5ba:	bf00      	nop
 800c5bc:	371c      	adds	r7, #28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b085      	sub	sp, #20
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	f043 0307 	orr.w	r3, r3, #7
 800c5e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	609a      	str	r2, [r3, #8]
}
 800c5f0:	bf00      	nop
 800c5f2:	3714      	adds	r7, #20
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b087      	sub	sp, #28
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
 800c608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	021a      	lsls	r2, r3, #8
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	431a      	orrs	r2, r3
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	4313      	orrs	r3, r2
 800c624:	697a      	ldr	r2, [r7, #20]
 800c626:	4313      	orrs	r3, r2
 800c628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	697a      	ldr	r2, [r7, #20]
 800c62e:	609a      	str	r2, [r3, #8]
}
 800c630:	bf00      	nop
 800c632:	371c      	adds	r7, #28
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b087      	sub	sp, #28
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	f003 031f 	and.w	r3, r3, #31
 800c64e:	2201      	movs	r2, #1
 800c650:	fa02 f303 	lsl.w	r3, r2, r3
 800c654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6a1a      	ldr	r2, [r3, #32]
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	43db      	mvns	r3, r3
 800c65e:	401a      	ands	r2, r3
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6a1a      	ldr	r2, [r3, #32]
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	f003 031f 	and.w	r3, r3, #31
 800c66e:	6879      	ldr	r1, [r7, #4]
 800c670:	fa01 f303 	lsl.w	r3, r1, r3
 800c674:	431a      	orrs	r2, r3
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	621a      	str	r2, [r3, #32]
}
 800c67a:	bf00      	nop
 800c67c:	371c      	adds	r7, #28
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
	...

0800c688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d101      	bne.n	800c6a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c69c:	2302      	movs	r3, #2
 800c69e:	e05a      	b.n	800c756 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a21      	ldr	r2, [pc, #132]	; (800c764 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d022      	beq.n	800c72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6ec:	d01d      	beq.n	800c72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a1d      	ldr	r2, [pc, #116]	; (800c768 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d018      	beq.n	800c72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a1b      	ldr	r2, [pc, #108]	; (800c76c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d013      	beq.n	800c72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a1a      	ldr	r2, [pc, #104]	; (800c770 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d00e      	beq.n	800c72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a18      	ldr	r2, [pc, #96]	; (800c774 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d009      	beq.n	800c72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a17      	ldr	r2, [pc, #92]	; (800c778 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d004      	beq.n	800c72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a15      	ldr	r2, [pc, #84]	; (800c77c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d10c      	bne.n	800c744 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	4313      	orrs	r3, r2
 800c73a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2201      	movs	r2, #1
 800c748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c754:	2300      	movs	r3, #0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3714      	adds	r7, #20
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	40010000 	.word	0x40010000
 800c768:	40000400 	.word	0x40000400
 800c76c:	40000800 	.word	0x40000800
 800c770:	40000c00 	.word	0x40000c00
 800c774:	40010400 	.word	0x40010400
 800c778:	40014000 	.word	0x40014000
 800c77c:	40001800 	.word	0x40001800

0800c780 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c78a:	2300      	movs	r3, #0
 800c78c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c794:	2b01      	cmp	r3, #1
 800c796:	d101      	bne.n	800c79c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c798:	2302      	movs	r3, #2
 800c79a:	e03d      	b.n	800c818 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	695b      	ldr	r3, [r3, #20]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	4313      	orrs	r3, r2
 800c804:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c816:	2300      	movs	r3, #0
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3714      	adds	r7, #20
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c82c:	bf00      	nop
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e03f      	b.n	800c8de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c864:	b2db      	uxtb	r3, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	d106      	bne.n	800c878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7fb fa1a 	bl	8007cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2224      	movs	r2, #36	; 0x24
 800c87c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68da      	ldr	r2, [r3, #12]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c88e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 fd13 	bl	800d2bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	691a      	ldr	r2, [r3, #16]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	695a      	ldr	r2, [r3, #20]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68da      	ldr	r2, [r3, #12]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2220      	movs	r2, #32
 800c8d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2220      	movs	r2, #32
 800c8d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b088      	sub	sp, #32
 800c8ea:	af02      	add	r7, sp, #8
 800c8ec:	60f8      	str	r0, [r7, #12]
 800c8ee:	60b9      	str	r1, [r7, #8]
 800c8f0:	603b      	str	r3, [r7, #0]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c900:	b2db      	uxtb	r3, r3
 800c902:	2b20      	cmp	r3, #32
 800c904:	f040 8083 	bne.w	800ca0e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d002      	beq.n	800c914 <HAL_UART_Transmit+0x2e>
 800c90e:	88fb      	ldrh	r3, [r7, #6]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d101      	bne.n	800c918 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	e07b      	b.n	800ca10 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d101      	bne.n	800c926 <HAL_UART_Transmit+0x40>
 800c922:	2302      	movs	r3, #2
 800c924:	e074      	b.n	800ca10 <HAL_UART_Transmit+0x12a>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2201      	movs	r2, #1
 800c92a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2221      	movs	r2, #33	; 0x21
 800c938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c93c:	f7fb fcba 	bl	80082b4 <HAL_GetTick>
 800c940:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	88fa      	ldrh	r2, [r7, #6]
 800c946:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	88fa      	ldrh	r2, [r7, #6]
 800c94c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800c956:	e042      	b.n	800c9de <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	3b01      	subs	r3, #1
 800c960:	b29a      	uxth	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c96e:	d122      	bne.n	800c9b6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	2200      	movs	r2, #0
 800c978:	2180      	movs	r1, #128	; 0x80
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f000 fb1c 	bl	800cfb8 <UART_WaitOnFlagUntilTimeout>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d001      	beq.n	800c98a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800c986:	2303      	movs	r3, #3
 800c988:	e042      	b.n	800ca10 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	461a      	mov	r2, r3
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c99c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d103      	bne.n	800c9ae <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	3302      	adds	r3, #2
 800c9aa:	60bb      	str	r3, [r7, #8]
 800c9ac:	e017      	b.n	800c9de <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	60bb      	str	r3, [r7, #8]
 800c9b4:	e013      	b.n	800c9de <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	2180      	movs	r1, #128	; 0x80
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f000 faf9 	bl	800cfb8 <UART_WaitOnFlagUntilTimeout>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e01f      	b.n	800ca10 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	1c5a      	adds	r2, r3, #1
 800c9d4:	60ba      	str	r2, [r7, #8]
 800c9d6:	781a      	ldrb	r2, [r3, #0]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1b7      	bne.n	800c958 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	2140      	movs	r1, #64	; 0x40
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f000 fae0 	bl	800cfb8 <UART_WaitOnFlagUntilTimeout>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	e006      	b.n	800ca10 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2220      	movs	r2, #32
 800ca06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e000      	b.n	800ca10 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800ca0e:	2302      	movs	r3, #2
  }
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3718      	adds	r7, #24
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b088      	sub	sp, #32
 800ca1c:	af02      	add	r7, sp, #8
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	603b      	str	r3, [r7, #0]
 800ca24:	4613      	mov	r3, r2
 800ca26:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b20      	cmp	r3, #32
 800ca36:	f040 8090 	bne.w	800cb5a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d002      	beq.n	800ca46 <HAL_UART_Receive+0x2e>
 800ca40:	88fb      	ldrh	r3, [r7, #6]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	e088      	b.n	800cb5c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d101      	bne.n	800ca58 <HAL_UART_Receive+0x40>
 800ca54:	2302      	movs	r3, #2
 800ca56:	e081      	b.n	800cb5c <HAL_UART_Receive+0x144>
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2200      	movs	r2, #0
 800ca64:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2222      	movs	r2, #34	; 0x22
 800ca6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800ca6e:	f7fb fc21 	bl	80082b4 <HAL_GetTick>
 800ca72:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	88fa      	ldrh	r2, [r7, #6]
 800ca78:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	88fa      	ldrh	r2, [r7, #6]
 800ca7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800ca88:	e05c      	b.n	800cb44 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	3b01      	subs	r3, #1
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caa0:	d12b      	bne.n	800cafa <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	9300      	str	r3, [sp, #0]
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	2200      	movs	r2, #0
 800caaa:	2120      	movs	r1, #32
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f000 fa83 	bl	800cfb8 <UART_WaitOnFlagUntilTimeout>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d001      	beq.n	800cabc <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800cab8:	2303      	movs	r3, #3
 800caba:	e04f      	b.n	800cb5c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	691b      	ldr	r3, [r3, #16]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10c      	bne.n	800cae2 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	b29b      	uxth	r3, r3
 800cad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad4:	b29a      	uxth	r2, r3
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	3302      	adds	r3, #2
 800cade:	60bb      	str	r3, [r7, #8]
 800cae0:	e030      	b.n	800cb44 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	b29b      	uxth	r3, r3
 800caea:	b2db      	uxtb	r3, r3
 800caec:	b29a      	uxth	r2, r3
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	3301      	adds	r3, #1
 800caf6:	60bb      	str	r3, [r7, #8]
 800caf8:	e024      	b.n	800cb44 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	2200      	movs	r2, #0
 800cb02:	2120      	movs	r1, #32
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f000 fa57 	bl	800cfb8 <UART_WaitOnFlagUntilTimeout>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d001      	beq.n	800cb14 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800cb10:	2303      	movs	r3, #3
 800cb12:	e023      	b.n	800cb5c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	691b      	ldr	r3, [r3, #16]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d108      	bne.n	800cb2e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6859      	ldr	r1, [r3, #4]
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	1c5a      	adds	r2, r3, #1
 800cb26:	60ba      	str	r2, [r7, #8]
 800cb28:	b2ca      	uxtb	r2, r1
 800cb2a:	701a      	strb	r2, [r3, #0]
 800cb2c:	e00a      	b.n	800cb44 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	b2da      	uxtb	r2, r3
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	1c59      	adds	r1, r3, #1
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cb40:	b2d2      	uxtb	r2, r2
 800cb42:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d19d      	bne.n	800ca8a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2220      	movs	r2, #32
 800cb52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800cb56:	2300      	movs	r3, #0
 800cb58:	e000      	b.n	800cb5c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cb5a:	2302      	movs	r3, #2
  }
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3718      	adds	r7, #24
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b20      	cmp	r3, #32
 800cb7c:	d166      	bne.n	800cc4c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <HAL_UART_Receive_DMA+0x26>
 800cb84:	88fb      	ldrh	r3, [r7, #6]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e05f      	b.n	800cc4e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d101      	bne.n	800cb9c <HAL_UART_Receive_DMA+0x38>
 800cb98:	2302      	movs	r3, #2
 800cb9a:	e058      	b.n	800cc4e <HAL_UART_Receive_DMA+0xea>
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800cba4:	68ba      	ldr	r2, [r7, #8]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	88fa      	ldrh	r2, [r7, #6]
 800cbae:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2222      	movs	r2, #34	; 0x22
 800cbba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc2:	4a25      	ldr	r2, [pc, #148]	; (800cc58 <HAL_UART_Receive_DMA+0xf4>)
 800cbc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbca:	4a24      	ldr	r2, [pc, #144]	; (800cc5c <HAL_UART_Receive_DMA+0xf8>)
 800cbcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd2:	4a23      	ldr	r2, [pc, #140]	; (800cc60 <HAL_UART_Receive_DMA+0xfc>)
 800cbd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbda:	2200      	movs	r2, #0
 800cbdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800cbde:	f107 0308 	add.w	r3, r7, #8
 800cbe2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3304      	adds	r3, #4
 800cbee:	4619      	mov	r1, r3
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	88fb      	ldrh	r3, [r7, #6]
 800cbf6:	f7fc f945 	bl	8008e84 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	613b      	str	r3, [r7, #16]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	613b      	str	r3, [r7, #16]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	613b      	str	r3, [r7, #16]
 800cc0e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2200      	movs	r2, #0
 800cc14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	68da      	ldr	r2, [r3, #12]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc26:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	695a      	ldr	r2, [r3, #20]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f042 0201 	orr.w	r2, r2, #1
 800cc36:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	695a      	ldr	r2, [r3, #20]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc46:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	e000      	b.n	800cc4e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800cc4c:	2302      	movs	r3, #2
  }
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3718      	adds	r7, #24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	0800cea1 	.word	0x0800cea1
 800cc5c:	0800cf09 	.word	0x0800cf09
 800cc60:	0800cf25 	.word	0x0800cf25

0800cc64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b088      	sub	sp, #32
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	695b      	ldr	r3, [r3, #20]
 800cc82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800cc84:	2300      	movs	r3, #0
 800cc86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	f003 030f 	and.w	r3, r3, #15
 800cc92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10d      	bne.n	800ccb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	f003 0320 	and.w	r3, r3, #32
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d008      	beq.n	800ccb6 <HAL_UART_IRQHandler+0x52>
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	f003 0320 	and.w	r3, r3, #32
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d003      	beq.n	800ccb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 fa82 	bl	800d1b8 <UART_Receive_IT>
      return;
 800ccb4:	e0d1      	b.n	800ce5a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f000 80b0 	beq.w	800ce1e <HAL_UART_IRQHandler+0x1ba>
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f003 0301 	and.w	r3, r3, #1
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d105      	bne.n	800ccd4 <HAL_UART_IRQHandler+0x70>
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f000 80a5 	beq.w	800ce1e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	f003 0301 	and.w	r3, r3, #1
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00a      	beq.n	800ccf4 <HAL_UART_IRQHandler+0x90>
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d005      	beq.n	800ccf4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccec:	f043 0201 	orr.w	r2, r3, #1
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	f003 0304 	and.w	r3, r3, #4
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00a      	beq.n	800cd14 <HAL_UART_IRQHandler+0xb0>
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f003 0301 	and.w	r3, r3, #1
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d005      	beq.n	800cd14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd0c:	f043 0202 	orr.w	r2, r3, #2
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	f003 0302 	and.w	r3, r3, #2
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00a      	beq.n	800cd34 <HAL_UART_IRQHandler+0xd0>
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	f003 0301 	and.w	r3, r3, #1
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d005      	beq.n	800cd34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2c:	f043 0204 	orr.w	r2, r3, #4
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	f003 0308 	and.w	r3, r3, #8
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00f      	beq.n	800cd5e <HAL_UART_IRQHandler+0xfa>
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	f003 0320 	and.w	r3, r3, #32
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d104      	bne.n	800cd52 <HAL_UART_IRQHandler+0xee>
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	f003 0301 	and.w	r3, r3, #1
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d005      	beq.n	800cd5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd56:	f043 0208 	orr.w	r2, r3, #8
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d078      	beq.n	800ce58 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	f003 0320 	and.w	r3, r3, #32
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d007      	beq.n	800cd80 <HAL_UART_IRQHandler+0x11c>
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	f003 0320 	and.w	r3, r3, #32
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d002      	beq.n	800cd80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 fa1c 	bl	800d1b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	695b      	ldr	r3, [r3, #20]
 800cd86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd8a:	2b40      	cmp	r3, #64	; 0x40
 800cd8c:	bf0c      	ite	eq
 800cd8e:	2301      	moveq	r3, #1
 800cd90:	2300      	movne	r3, #0
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd9a:	f003 0308 	and.w	r3, r3, #8
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d102      	bne.n	800cda8 <HAL_UART_IRQHandler+0x144>
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d031      	beq.n	800ce0c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 f965 	bl	800d078 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	695b      	ldr	r3, [r3, #20]
 800cdb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb8:	2b40      	cmp	r3, #64	; 0x40
 800cdba:	d123      	bne.n	800ce04 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	695a      	ldr	r2, [r3, #20]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d013      	beq.n	800cdfc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd8:	4a21      	ldr	r2, [pc, #132]	; (800ce60 <HAL_UART_IRQHandler+0x1fc>)
 800cdda:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fc f8a7 	bl	8008f34 <HAL_DMA_Abort_IT>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d016      	beq.n	800ce1a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cdf6:	4610      	mov	r0, r2
 800cdf8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdfa:	e00e      	b.n	800ce1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 f845 	bl	800ce8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce02:	e00a      	b.n	800ce1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 f841 	bl	800ce8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce0a:	e006      	b.n	800ce1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f83d 	bl	800ce8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ce18:	e01e      	b.n	800ce58 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce1a:	bf00      	nop
    return;
 800ce1c:	e01c      	b.n	800ce58 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d008      	beq.n	800ce3a <HAL_UART_IRQHandler+0x1d6>
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d003      	beq.n	800ce3a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 f952 	bl	800d0dc <UART_Transmit_IT>
    return;
 800ce38:	e00f      	b.n	800ce5a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00a      	beq.n	800ce5a <HAL_UART_IRQHandler+0x1f6>
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d005      	beq.n	800ce5a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f99a 	bl	800d188 <UART_EndTransmit_IT>
    return;
 800ce54:	bf00      	nop
 800ce56:	e000      	b.n	800ce5a <HAL_UART_IRQHandler+0x1f6>
    return;
 800ce58:	bf00      	nop
  }
}
 800ce5a:	3720      	adds	r7, #32
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	0800d0b5 	.word	0x0800d0b5

0800ce64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ce6c:	bf00      	nop
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ce80:	bf00      	nop
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ce94:	bf00      	nop
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d11e      	bne.n	800cefa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2200      	movs	r2, #0
 800cec0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68da      	ldr	r2, [r3, #12]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ced0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	695a      	ldr	r2, [r3, #20]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f022 0201 	bic.w	r2, r2, #1
 800cee0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	695a      	ldr	r2, [r3, #20]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cef0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2220      	movs	r2, #32
 800cef6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f7fa fb06 	bl	800750c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf00:	bf00      	nop
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf14:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f7ff ffae 	bl	800ce78 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf1c:	bf00      	nop
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf34:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	695b      	ldr	r3, [r3, #20]
 800cf3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf40:	2b80      	cmp	r3, #128	; 0x80
 800cf42:	bf0c      	ite	eq
 800cf44:	2301      	moveq	r3, #1
 800cf46:	2300      	movne	r3, #0
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b21      	cmp	r3, #33	; 0x21
 800cf56:	d108      	bne.n	800cf6a <UART_DMAError+0x46>
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d005      	beq.n	800cf6a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	2200      	movs	r2, #0
 800cf62:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800cf64:	68b8      	ldr	r0, [r7, #8]
 800cf66:	f000 f871 	bl	800d04c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	695b      	ldr	r3, [r3, #20]
 800cf70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf74:	2b40      	cmp	r3, #64	; 0x40
 800cf76:	bf0c      	ite	eq
 800cf78:	2301      	moveq	r3, #1
 800cf7a:	2300      	movne	r3, #0
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	2b22      	cmp	r3, #34	; 0x22
 800cf8a:	d108      	bne.n	800cf9e <UART_DMAError+0x7a>
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d005      	beq.n	800cf9e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	2200      	movs	r2, #0
 800cf96:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800cf98:	68b8      	ldr	r0, [r7, #8]
 800cf9a:	f000 f86d 	bl	800d078 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfa2:	f043 0210 	orr.w	r2, r3, #16
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfaa:	68b8      	ldr	r0, [r7, #8]
 800cfac:	f7ff ff6e 	bl	800ce8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfb0:	bf00      	nop
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	603b      	str	r3, [r7, #0]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfc8:	e02c      	b.n	800d024 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd0:	d028      	beq.n	800d024 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d007      	beq.n	800cfe8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cfd8:	f7fb f96c 	bl	80082b4 <HAL_GetTick>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	69ba      	ldr	r2, [r7, #24]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d21d      	bcs.n	800d024 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	68da      	ldr	r2, [r3, #12]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cff6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	695a      	ldr	r2, [r3, #20]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f022 0201 	bic.w	r2, r2, #1
 800d006:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2220      	movs	r2, #32
 800d00c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2220      	movs	r2, #32
 800d014:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800d020:	2303      	movs	r3, #3
 800d022:	e00f      	b.n	800d044 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	4013      	ands	r3, r2
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	429a      	cmp	r2, r3
 800d032:	bf0c      	ite	eq
 800d034:	2301      	moveq	r3, #1
 800d036:	2300      	movne	r3, #0
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	461a      	mov	r2, r3
 800d03c:	79fb      	ldrb	r3, [r7, #7]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d0c3      	beq.n	800cfca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d042:	2300      	movs	r3, #0
}
 800d044:	4618      	mov	r0, r3
 800d046:	3710      	adds	r7, #16
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68da      	ldr	r2, [r3, #12]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d062:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2220      	movs	r2, #32
 800d068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800d06c:	bf00      	nop
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	68da      	ldr	r2, [r3, #12]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d08e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	695a      	ldr	r2, [r3, #20]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f022 0201 	bic.w	r2, r2, #1
 800d09e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2220      	movs	r2, #32
 800d0a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800d0a8:	bf00      	nop
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0ce:	68f8      	ldr	r0, [r7, #12]
 800d0d0:	f7ff fedc 	bl	800ce8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0d4:	bf00      	nop
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b21      	cmp	r3, #33	; 0x21
 800d0ee:	d144      	bne.n	800d17a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0f8:	d11a      	bne.n	800d130 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6a1b      	ldr	r3, [r3, #32]
 800d0fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	881b      	ldrh	r3, [r3, #0]
 800d104:	461a      	mov	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d10e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	691b      	ldr	r3, [r3, #16]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d105      	bne.n	800d124 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6a1b      	ldr	r3, [r3, #32]
 800d11c:	1c9a      	adds	r2, r3, #2
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	621a      	str	r2, [r3, #32]
 800d122:	e00e      	b.n	800d142 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a1b      	ldr	r3, [r3, #32]
 800d128:	1c5a      	adds	r2, r3, #1
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	621a      	str	r2, [r3, #32]
 800d12e:	e008      	b.n	800d142 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a1b      	ldr	r3, [r3, #32]
 800d134:	1c59      	adds	r1, r3, #1
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	6211      	str	r1, [r2, #32]
 800d13a:	781a      	ldrb	r2, [r3, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d146:	b29b      	uxth	r3, r3
 800d148:	3b01      	subs	r3, #1
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	4619      	mov	r1, r3
 800d150:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10f      	bne.n	800d176 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	68da      	ldr	r2, [r3, #12]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d164:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	68da      	ldr	r2, [r3, #12]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d174:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d176:	2300      	movs	r3, #0
 800d178:	e000      	b.n	800d17c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d17a:	2302      	movs	r3, #2
  }
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3714      	adds	r7, #20
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68da      	ldr	r2, [r3, #12]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d19e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2220      	movs	r2, #32
 800d1a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7ff fe5b 	bl	800ce64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	2b22      	cmp	r3, #34	; 0x22
 800d1ca:	d171      	bne.n	800d2b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1d4:	d123      	bne.n	800d21e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1da:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d10e      	bne.n	800d202 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f0:	b29a      	uxth	r2, r3
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1fa:	1c9a      	adds	r2, r3, #2
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	629a      	str	r2, [r3, #40]	; 0x28
 800d200:	e029      	b.n	800d256 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	b29b      	uxth	r3, r3
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d216:	1c5a      	adds	r2, r3, #1
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	629a      	str	r2, [r3, #40]	; 0x28
 800d21c:	e01b      	b.n	800d256 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10a      	bne.n	800d23c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	6858      	ldr	r0, [r3, #4]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d230:	1c59      	adds	r1, r3, #1
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	6291      	str	r1, [r2, #40]	; 0x28
 800d236:	b2c2      	uxtb	r2, r0
 800d238:	701a      	strb	r2, [r3, #0]
 800d23a:	e00c      	b.n	800d256 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	b2da      	uxtb	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d248:	1c58      	adds	r0, r3, #1
 800d24a:	6879      	ldr	r1, [r7, #4]
 800d24c:	6288      	str	r0, [r1, #40]	; 0x28
 800d24e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d252:	b2d2      	uxtb	r2, r2
 800d254:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	3b01      	subs	r3, #1
 800d25e:	b29b      	uxth	r3, r3
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	4619      	mov	r1, r3
 800d264:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d266:	2b00      	cmp	r3, #0
 800d268:	d120      	bne.n	800d2ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	68da      	ldr	r2, [r3, #12]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f022 0220 	bic.w	r2, r2, #32
 800d278:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68da      	ldr	r2, [r3, #12]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d288:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	695a      	ldr	r2, [r3, #20]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f022 0201 	bic.w	r2, r2, #1
 800d298:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2220      	movs	r2, #32
 800d29e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7fa f932 	bl	800750c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	e002      	b.n	800d2b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	e000      	b.n	800d2b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d2b0:	2302      	movs	r3, #2
  }
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
	...

0800d2bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c0:	b085      	sub	sp, #20
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	68da      	ldr	r2, [r3, #12]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	430a      	orrs	r2, r1
 800d2da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	689a      	ldr	r2, [r3, #8]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	431a      	orrs	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	695b      	ldr	r3, [r3, #20]
 800d2ea:	431a      	orrs	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	69db      	ldr	r3, [r3, #28]
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d2fe:	f023 030c 	bic.w	r3, r3, #12
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	6812      	ldr	r2, [r2, #0]
 800d306:	68f9      	ldr	r1, [r7, #12]
 800d308:	430b      	orrs	r3, r1
 800d30a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	695b      	ldr	r3, [r3, #20]
 800d312:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	699a      	ldr	r2, [r3, #24]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	430a      	orrs	r2, r1
 800d320:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	69db      	ldr	r3, [r3, #28]
 800d326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d32a:	f040 818b 	bne.w	800d644 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4ac1      	ldr	r2, [pc, #772]	; (800d638 <UART_SetConfig+0x37c>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d005      	beq.n	800d344 <UART_SetConfig+0x88>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4abf      	ldr	r2, [pc, #764]	; (800d63c <UART_SetConfig+0x380>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	f040 80bd 	bne.w	800d4be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d344:	f7fe f828 	bl	800b398 <HAL_RCC_GetPCLK2Freq>
 800d348:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	461d      	mov	r5, r3
 800d34e:	f04f 0600 	mov.w	r6, #0
 800d352:	46a8      	mov	r8, r5
 800d354:	46b1      	mov	r9, r6
 800d356:	eb18 0308 	adds.w	r3, r8, r8
 800d35a:	eb49 0409 	adc.w	r4, r9, r9
 800d35e:	4698      	mov	r8, r3
 800d360:	46a1      	mov	r9, r4
 800d362:	eb18 0805 	adds.w	r8, r8, r5
 800d366:	eb49 0906 	adc.w	r9, r9, r6
 800d36a:	f04f 0100 	mov.w	r1, #0
 800d36e:	f04f 0200 	mov.w	r2, #0
 800d372:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d376:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d37a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d37e:	4688      	mov	r8, r1
 800d380:	4691      	mov	r9, r2
 800d382:	eb18 0005 	adds.w	r0, r8, r5
 800d386:	eb49 0106 	adc.w	r1, r9, r6
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	461d      	mov	r5, r3
 800d390:	f04f 0600 	mov.w	r6, #0
 800d394:	196b      	adds	r3, r5, r5
 800d396:	eb46 0406 	adc.w	r4, r6, r6
 800d39a:	461a      	mov	r2, r3
 800d39c:	4623      	mov	r3, r4
 800d39e:	f7f3 fc2b 	bl	8000bf8 <__aeabi_uldivmod>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	4ba5      	ldr	r3, [pc, #660]	; (800d640 <UART_SetConfig+0x384>)
 800d3aa:	fba3 2302 	umull	r2, r3, r3, r2
 800d3ae:	095b      	lsrs	r3, r3, #5
 800d3b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	461d      	mov	r5, r3
 800d3b8:	f04f 0600 	mov.w	r6, #0
 800d3bc:	46a9      	mov	r9, r5
 800d3be:	46b2      	mov	sl, r6
 800d3c0:	eb19 0309 	adds.w	r3, r9, r9
 800d3c4:	eb4a 040a 	adc.w	r4, sl, sl
 800d3c8:	4699      	mov	r9, r3
 800d3ca:	46a2      	mov	sl, r4
 800d3cc:	eb19 0905 	adds.w	r9, r9, r5
 800d3d0:	eb4a 0a06 	adc.w	sl, sl, r6
 800d3d4:	f04f 0100 	mov.w	r1, #0
 800d3d8:	f04f 0200 	mov.w	r2, #0
 800d3dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d3e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d3e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d3e8:	4689      	mov	r9, r1
 800d3ea:	4692      	mov	sl, r2
 800d3ec:	eb19 0005 	adds.w	r0, r9, r5
 800d3f0:	eb4a 0106 	adc.w	r1, sl, r6
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	461d      	mov	r5, r3
 800d3fa:	f04f 0600 	mov.w	r6, #0
 800d3fe:	196b      	adds	r3, r5, r5
 800d400:	eb46 0406 	adc.w	r4, r6, r6
 800d404:	461a      	mov	r2, r3
 800d406:	4623      	mov	r3, r4
 800d408:	f7f3 fbf6 	bl	8000bf8 <__aeabi_uldivmod>
 800d40c:	4603      	mov	r3, r0
 800d40e:	460c      	mov	r4, r1
 800d410:	461a      	mov	r2, r3
 800d412:	4b8b      	ldr	r3, [pc, #556]	; (800d640 <UART_SetConfig+0x384>)
 800d414:	fba3 1302 	umull	r1, r3, r3, r2
 800d418:	095b      	lsrs	r3, r3, #5
 800d41a:	2164      	movs	r1, #100	; 0x64
 800d41c:	fb01 f303 	mul.w	r3, r1, r3
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	00db      	lsls	r3, r3, #3
 800d424:	3332      	adds	r3, #50	; 0x32
 800d426:	4a86      	ldr	r2, [pc, #536]	; (800d640 <UART_SetConfig+0x384>)
 800d428:	fba2 2303 	umull	r2, r3, r2, r3
 800d42c:	095b      	lsrs	r3, r3, #5
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d434:	4498      	add	r8, r3
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	461d      	mov	r5, r3
 800d43a:	f04f 0600 	mov.w	r6, #0
 800d43e:	46a9      	mov	r9, r5
 800d440:	46b2      	mov	sl, r6
 800d442:	eb19 0309 	adds.w	r3, r9, r9
 800d446:	eb4a 040a 	adc.w	r4, sl, sl
 800d44a:	4699      	mov	r9, r3
 800d44c:	46a2      	mov	sl, r4
 800d44e:	eb19 0905 	adds.w	r9, r9, r5
 800d452:	eb4a 0a06 	adc.w	sl, sl, r6
 800d456:	f04f 0100 	mov.w	r1, #0
 800d45a:	f04f 0200 	mov.w	r2, #0
 800d45e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d462:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d466:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d46a:	4689      	mov	r9, r1
 800d46c:	4692      	mov	sl, r2
 800d46e:	eb19 0005 	adds.w	r0, r9, r5
 800d472:	eb4a 0106 	adc.w	r1, sl, r6
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	461d      	mov	r5, r3
 800d47c:	f04f 0600 	mov.w	r6, #0
 800d480:	196b      	adds	r3, r5, r5
 800d482:	eb46 0406 	adc.w	r4, r6, r6
 800d486:	461a      	mov	r2, r3
 800d488:	4623      	mov	r3, r4
 800d48a:	f7f3 fbb5 	bl	8000bf8 <__aeabi_uldivmod>
 800d48e:	4603      	mov	r3, r0
 800d490:	460c      	mov	r4, r1
 800d492:	461a      	mov	r2, r3
 800d494:	4b6a      	ldr	r3, [pc, #424]	; (800d640 <UART_SetConfig+0x384>)
 800d496:	fba3 1302 	umull	r1, r3, r3, r2
 800d49a:	095b      	lsrs	r3, r3, #5
 800d49c:	2164      	movs	r1, #100	; 0x64
 800d49e:	fb01 f303 	mul.w	r3, r1, r3
 800d4a2:	1ad3      	subs	r3, r2, r3
 800d4a4:	00db      	lsls	r3, r3, #3
 800d4a6:	3332      	adds	r3, #50	; 0x32
 800d4a8:	4a65      	ldr	r2, [pc, #404]	; (800d640 <UART_SetConfig+0x384>)
 800d4aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ae:	095b      	lsrs	r3, r3, #5
 800d4b0:	f003 0207 	and.w	r2, r3, #7
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4442      	add	r2, r8
 800d4ba:	609a      	str	r2, [r3, #8]
 800d4bc:	e26f      	b.n	800d99e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d4be:	f7fd ff57 	bl	800b370 <HAL_RCC_GetPCLK1Freq>
 800d4c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	461d      	mov	r5, r3
 800d4c8:	f04f 0600 	mov.w	r6, #0
 800d4cc:	46a8      	mov	r8, r5
 800d4ce:	46b1      	mov	r9, r6
 800d4d0:	eb18 0308 	adds.w	r3, r8, r8
 800d4d4:	eb49 0409 	adc.w	r4, r9, r9
 800d4d8:	4698      	mov	r8, r3
 800d4da:	46a1      	mov	r9, r4
 800d4dc:	eb18 0805 	adds.w	r8, r8, r5
 800d4e0:	eb49 0906 	adc.w	r9, r9, r6
 800d4e4:	f04f 0100 	mov.w	r1, #0
 800d4e8:	f04f 0200 	mov.w	r2, #0
 800d4ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d4f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d4f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d4f8:	4688      	mov	r8, r1
 800d4fa:	4691      	mov	r9, r2
 800d4fc:	eb18 0005 	adds.w	r0, r8, r5
 800d500:	eb49 0106 	adc.w	r1, r9, r6
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	461d      	mov	r5, r3
 800d50a:	f04f 0600 	mov.w	r6, #0
 800d50e:	196b      	adds	r3, r5, r5
 800d510:	eb46 0406 	adc.w	r4, r6, r6
 800d514:	461a      	mov	r2, r3
 800d516:	4623      	mov	r3, r4
 800d518:	f7f3 fb6e 	bl	8000bf8 <__aeabi_uldivmod>
 800d51c:	4603      	mov	r3, r0
 800d51e:	460c      	mov	r4, r1
 800d520:	461a      	mov	r2, r3
 800d522:	4b47      	ldr	r3, [pc, #284]	; (800d640 <UART_SetConfig+0x384>)
 800d524:	fba3 2302 	umull	r2, r3, r3, r2
 800d528:	095b      	lsrs	r3, r3, #5
 800d52a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	461d      	mov	r5, r3
 800d532:	f04f 0600 	mov.w	r6, #0
 800d536:	46a9      	mov	r9, r5
 800d538:	46b2      	mov	sl, r6
 800d53a:	eb19 0309 	adds.w	r3, r9, r9
 800d53e:	eb4a 040a 	adc.w	r4, sl, sl
 800d542:	4699      	mov	r9, r3
 800d544:	46a2      	mov	sl, r4
 800d546:	eb19 0905 	adds.w	r9, r9, r5
 800d54a:	eb4a 0a06 	adc.w	sl, sl, r6
 800d54e:	f04f 0100 	mov.w	r1, #0
 800d552:	f04f 0200 	mov.w	r2, #0
 800d556:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d55a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d55e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d562:	4689      	mov	r9, r1
 800d564:	4692      	mov	sl, r2
 800d566:	eb19 0005 	adds.w	r0, r9, r5
 800d56a:	eb4a 0106 	adc.w	r1, sl, r6
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	461d      	mov	r5, r3
 800d574:	f04f 0600 	mov.w	r6, #0
 800d578:	196b      	adds	r3, r5, r5
 800d57a:	eb46 0406 	adc.w	r4, r6, r6
 800d57e:	461a      	mov	r2, r3
 800d580:	4623      	mov	r3, r4
 800d582:	f7f3 fb39 	bl	8000bf8 <__aeabi_uldivmod>
 800d586:	4603      	mov	r3, r0
 800d588:	460c      	mov	r4, r1
 800d58a:	461a      	mov	r2, r3
 800d58c:	4b2c      	ldr	r3, [pc, #176]	; (800d640 <UART_SetConfig+0x384>)
 800d58e:	fba3 1302 	umull	r1, r3, r3, r2
 800d592:	095b      	lsrs	r3, r3, #5
 800d594:	2164      	movs	r1, #100	; 0x64
 800d596:	fb01 f303 	mul.w	r3, r1, r3
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	00db      	lsls	r3, r3, #3
 800d59e:	3332      	adds	r3, #50	; 0x32
 800d5a0:	4a27      	ldr	r2, [pc, #156]	; (800d640 <UART_SetConfig+0x384>)
 800d5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a6:	095b      	lsrs	r3, r3, #5
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d5ae:	4498      	add	r8, r3
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	461d      	mov	r5, r3
 800d5b4:	f04f 0600 	mov.w	r6, #0
 800d5b8:	46a9      	mov	r9, r5
 800d5ba:	46b2      	mov	sl, r6
 800d5bc:	eb19 0309 	adds.w	r3, r9, r9
 800d5c0:	eb4a 040a 	adc.w	r4, sl, sl
 800d5c4:	4699      	mov	r9, r3
 800d5c6:	46a2      	mov	sl, r4
 800d5c8:	eb19 0905 	adds.w	r9, r9, r5
 800d5cc:	eb4a 0a06 	adc.w	sl, sl, r6
 800d5d0:	f04f 0100 	mov.w	r1, #0
 800d5d4:	f04f 0200 	mov.w	r2, #0
 800d5d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d5dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d5e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d5e4:	4689      	mov	r9, r1
 800d5e6:	4692      	mov	sl, r2
 800d5e8:	eb19 0005 	adds.w	r0, r9, r5
 800d5ec:	eb4a 0106 	adc.w	r1, sl, r6
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	461d      	mov	r5, r3
 800d5f6:	f04f 0600 	mov.w	r6, #0
 800d5fa:	196b      	adds	r3, r5, r5
 800d5fc:	eb46 0406 	adc.w	r4, r6, r6
 800d600:	461a      	mov	r2, r3
 800d602:	4623      	mov	r3, r4
 800d604:	f7f3 faf8 	bl	8000bf8 <__aeabi_uldivmod>
 800d608:	4603      	mov	r3, r0
 800d60a:	460c      	mov	r4, r1
 800d60c:	461a      	mov	r2, r3
 800d60e:	4b0c      	ldr	r3, [pc, #48]	; (800d640 <UART_SetConfig+0x384>)
 800d610:	fba3 1302 	umull	r1, r3, r3, r2
 800d614:	095b      	lsrs	r3, r3, #5
 800d616:	2164      	movs	r1, #100	; 0x64
 800d618:	fb01 f303 	mul.w	r3, r1, r3
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	00db      	lsls	r3, r3, #3
 800d620:	3332      	adds	r3, #50	; 0x32
 800d622:	4a07      	ldr	r2, [pc, #28]	; (800d640 <UART_SetConfig+0x384>)
 800d624:	fba2 2303 	umull	r2, r3, r2, r3
 800d628:	095b      	lsrs	r3, r3, #5
 800d62a:	f003 0207 	and.w	r2, r3, #7
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4442      	add	r2, r8
 800d634:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d636:	e1b2      	b.n	800d99e <UART_SetConfig+0x6e2>
 800d638:	40011000 	.word	0x40011000
 800d63c:	40011400 	.word	0x40011400
 800d640:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4ad7      	ldr	r2, [pc, #860]	; (800d9a8 <UART_SetConfig+0x6ec>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d005      	beq.n	800d65a <UART_SetConfig+0x39e>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4ad6      	ldr	r2, [pc, #856]	; (800d9ac <UART_SetConfig+0x6f0>)
 800d654:	4293      	cmp	r3, r2
 800d656:	f040 80d1 	bne.w	800d7fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d65a:	f7fd fe9d 	bl	800b398 <HAL_RCC_GetPCLK2Freq>
 800d65e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	469a      	mov	sl, r3
 800d664:	f04f 0b00 	mov.w	fp, #0
 800d668:	46d0      	mov	r8, sl
 800d66a:	46d9      	mov	r9, fp
 800d66c:	eb18 0308 	adds.w	r3, r8, r8
 800d670:	eb49 0409 	adc.w	r4, r9, r9
 800d674:	4698      	mov	r8, r3
 800d676:	46a1      	mov	r9, r4
 800d678:	eb18 080a 	adds.w	r8, r8, sl
 800d67c:	eb49 090b 	adc.w	r9, r9, fp
 800d680:	f04f 0100 	mov.w	r1, #0
 800d684:	f04f 0200 	mov.w	r2, #0
 800d688:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d68c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d690:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d694:	4688      	mov	r8, r1
 800d696:	4691      	mov	r9, r2
 800d698:	eb1a 0508 	adds.w	r5, sl, r8
 800d69c:	eb4b 0609 	adc.w	r6, fp, r9
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	f04f 0200 	mov.w	r2, #0
 800d6aa:	f04f 0300 	mov.w	r3, #0
 800d6ae:	f04f 0400 	mov.w	r4, #0
 800d6b2:	0094      	lsls	r4, r2, #2
 800d6b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d6b8:	008b      	lsls	r3, r1, #2
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	4623      	mov	r3, r4
 800d6be:	4628      	mov	r0, r5
 800d6c0:	4631      	mov	r1, r6
 800d6c2:	f7f3 fa99 	bl	8000bf8 <__aeabi_uldivmod>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	460c      	mov	r4, r1
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	4bb8      	ldr	r3, [pc, #736]	; (800d9b0 <UART_SetConfig+0x6f4>)
 800d6ce:	fba3 2302 	umull	r2, r3, r3, r2
 800d6d2:	095b      	lsrs	r3, r3, #5
 800d6d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	469b      	mov	fp, r3
 800d6dc:	f04f 0c00 	mov.w	ip, #0
 800d6e0:	46d9      	mov	r9, fp
 800d6e2:	46e2      	mov	sl, ip
 800d6e4:	eb19 0309 	adds.w	r3, r9, r9
 800d6e8:	eb4a 040a 	adc.w	r4, sl, sl
 800d6ec:	4699      	mov	r9, r3
 800d6ee:	46a2      	mov	sl, r4
 800d6f0:	eb19 090b 	adds.w	r9, r9, fp
 800d6f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d6f8:	f04f 0100 	mov.w	r1, #0
 800d6fc:	f04f 0200 	mov.w	r2, #0
 800d700:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d704:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d708:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d70c:	4689      	mov	r9, r1
 800d70e:	4692      	mov	sl, r2
 800d710:	eb1b 0509 	adds.w	r5, fp, r9
 800d714:	eb4c 060a 	adc.w	r6, ip, sl
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	4619      	mov	r1, r3
 800d71e:	f04f 0200 	mov.w	r2, #0
 800d722:	f04f 0300 	mov.w	r3, #0
 800d726:	f04f 0400 	mov.w	r4, #0
 800d72a:	0094      	lsls	r4, r2, #2
 800d72c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d730:	008b      	lsls	r3, r1, #2
 800d732:	461a      	mov	r2, r3
 800d734:	4623      	mov	r3, r4
 800d736:	4628      	mov	r0, r5
 800d738:	4631      	mov	r1, r6
 800d73a:	f7f3 fa5d 	bl	8000bf8 <__aeabi_uldivmod>
 800d73e:	4603      	mov	r3, r0
 800d740:	460c      	mov	r4, r1
 800d742:	461a      	mov	r2, r3
 800d744:	4b9a      	ldr	r3, [pc, #616]	; (800d9b0 <UART_SetConfig+0x6f4>)
 800d746:	fba3 1302 	umull	r1, r3, r3, r2
 800d74a:	095b      	lsrs	r3, r3, #5
 800d74c:	2164      	movs	r1, #100	; 0x64
 800d74e:	fb01 f303 	mul.w	r3, r1, r3
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	011b      	lsls	r3, r3, #4
 800d756:	3332      	adds	r3, #50	; 0x32
 800d758:	4a95      	ldr	r2, [pc, #596]	; (800d9b0 <UART_SetConfig+0x6f4>)
 800d75a:	fba2 2303 	umull	r2, r3, r2, r3
 800d75e:	095b      	lsrs	r3, r3, #5
 800d760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d764:	4498      	add	r8, r3
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	469b      	mov	fp, r3
 800d76a:	f04f 0c00 	mov.w	ip, #0
 800d76e:	46d9      	mov	r9, fp
 800d770:	46e2      	mov	sl, ip
 800d772:	eb19 0309 	adds.w	r3, r9, r9
 800d776:	eb4a 040a 	adc.w	r4, sl, sl
 800d77a:	4699      	mov	r9, r3
 800d77c:	46a2      	mov	sl, r4
 800d77e:	eb19 090b 	adds.w	r9, r9, fp
 800d782:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d786:	f04f 0100 	mov.w	r1, #0
 800d78a:	f04f 0200 	mov.w	r2, #0
 800d78e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d792:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d796:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d79a:	4689      	mov	r9, r1
 800d79c:	4692      	mov	sl, r2
 800d79e:	eb1b 0509 	adds.w	r5, fp, r9
 800d7a2:	eb4c 060a 	adc.w	r6, ip, sl
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	f04f 0200 	mov.w	r2, #0
 800d7b0:	f04f 0300 	mov.w	r3, #0
 800d7b4:	f04f 0400 	mov.w	r4, #0
 800d7b8:	0094      	lsls	r4, r2, #2
 800d7ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d7be:	008b      	lsls	r3, r1, #2
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	4623      	mov	r3, r4
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	4631      	mov	r1, r6
 800d7c8:	f7f3 fa16 	bl	8000bf8 <__aeabi_uldivmod>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	460c      	mov	r4, r1
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	4b77      	ldr	r3, [pc, #476]	; (800d9b0 <UART_SetConfig+0x6f4>)
 800d7d4:	fba3 1302 	umull	r1, r3, r3, r2
 800d7d8:	095b      	lsrs	r3, r3, #5
 800d7da:	2164      	movs	r1, #100	; 0x64
 800d7dc:	fb01 f303 	mul.w	r3, r1, r3
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	011b      	lsls	r3, r3, #4
 800d7e4:	3332      	adds	r3, #50	; 0x32
 800d7e6:	4a72      	ldr	r2, [pc, #456]	; (800d9b0 <UART_SetConfig+0x6f4>)
 800d7e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d7ec:	095b      	lsrs	r3, r3, #5
 800d7ee:	f003 020f 	and.w	r2, r3, #15
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4442      	add	r2, r8
 800d7f8:	609a      	str	r2, [r3, #8]
 800d7fa:	e0d0      	b.n	800d99e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d7fc:	f7fd fdb8 	bl	800b370 <HAL_RCC_GetPCLK1Freq>
 800d800:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	469a      	mov	sl, r3
 800d806:	f04f 0b00 	mov.w	fp, #0
 800d80a:	46d0      	mov	r8, sl
 800d80c:	46d9      	mov	r9, fp
 800d80e:	eb18 0308 	adds.w	r3, r8, r8
 800d812:	eb49 0409 	adc.w	r4, r9, r9
 800d816:	4698      	mov	r8, r3
 800d818:	46a1      	mov	r9, r4
 800d81a:	eb18 080a 	adds.w	r8, r8, sl
 800d81e:	eb49 090b 	adc.w	r9, r9, fp
 800d822:	f04f 0100 	mov.w	r1, #0
 800d826:	f04f 0200 	mov.w	r2, #0
 800d82a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d82e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d832:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d836:	4688      	mov	r8, r1
 800d838:	4691      	mov	r9, r2
 800d83a:	eb1a 0508 	adds.w	r5, sl, r8
 800d83e:	eb4b 0609 	adc.w	r6, fp, r9
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	4619      	mov	r1, r3
 800d848:	f04f 0200 	mov.w	r2, #0
 800d84c:	f04f 0300 	mov.w	r3, #0
 800d850:	f04f 0400 	mov.w	r4, #0
 800d854:	0094      	lsls	r4, r2, #2
 800d856:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d85a:	008b      	lsls	r3, r1, #2
 800d85c:	461a      	mov	r2, r3
 800d85e:	4623      	mov	r3, r4
 800d860:	4628      	mov	r0, r5
 800d862:	4631      	mov	r1, r6
 800d864:	f7f3 f9c8 	bl	8000bf8 <__aeabi_uldivmod>
 800d868:	4603      	mov	r3, r0
 800d86a:	460c      	mov	r4, r1
 800d86c:	461a      	mov	r2, r3
 800d86e:	4b50      	ldr	r3, [pc, #320]	; (800d9b0 <UART_SetConfig+0x6f4>)
 800d870:	fba3 2302 	umull	r2, r3, r3, r2
 800d874:	095b      	lsrs	r3, r3, #5
 800d876:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	469b      	mov	fp, r3
 800d87e:	f04f 0c00 	mov.w	ip, #0
 800d882:	46d9      	mov	r9, fp
 800d884:	46e2      	mov	sl, ip
 800d886:	eb19 0309 	adds.w	r3, r9, r9
 800d88a:	eb4a 040a 	adc.w	r4, sl, sl
 800d88e:	4699      	mov	r9, r3
 800d890:	46a2      	mov	sl, r4
 800d892:	eb19 090b 	adds.w	r9, r9, fp
 800d896:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d89a:	f04f 0100 	mov.w	r1, #0
 800d89e:	f04f 0200 	mov.w	r2, #0
 800d8a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d8a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d8aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d8ae:	4689      	mov	r9, r1
 800d8b0:	4692      	mov	sl, r2
 800d8b2:	eb1b 0509 	adds.w	r5, fp, r9
 800d8b6:	eb4c 060a 	adc.w	r6, ip, sl
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	4619      	mov	r1, r3
 800d8c0:	f04f 0200 	mov.w	r2, #0
 800d8c4:	f04f 0300 	mov.w	r3, #0
 800d8c8:	f04f 0400 	mov.w	r4, #0
 800d8cc:	0094      	lsls	r4, r2, #2
 800d8ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d8d2:	008b      	lsls	r3, r1, #2
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	4623      	mov	r3, r4
 800d8d8:	4628      	mov	r0, r5
 800d8da:	4631      	mov	r1, r6
 800d8dc:	f7f3 f98c 	bl	8000bf8 <__aeabi_uldivmod>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	460c      	mov	r4, r1
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	4b32      	ldr	r3, [pc, #200]	; (800d9b0 <UART_SetConfig+0x6f4>)
 800d8e8:	fba3 1302 	umull	r1, r3, r3, r2
 800d8ec:	095b      	lsrs	r3, r3, #5
 800d8ee:	2164      	movs	r1, #100	; 0x64
 800d8f0:	fb01 f303 	mul.w	r3, r1, r3
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	011b      	lsls	r3, r3, #4
 800d8f8:	3332      	adds	r3, #50	; 0x32
 800d8fa:	4a2d      	ldr	r2, [pc, #180]	; (800d9b0 <UART_SetConfig+0x6f4>)
 800d8fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d900:	095b      	lsrs	r3, r3, #5
 800d902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d906:	4498      	add	r8, r3
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	469b      	mov	fp, r3
 800d90c:	f04f 0c00 	mov.w	ip, #0
 800d910:	46d9      	mov	r9, fp
 800d912:	46e2      	mov	sl, ip
 800d914:	eb19 0309 	adds.w	r3, r9, r9
 800d918:	eb4a 040a 	adc.w	r4, sl, sl
 800d91c:	4699      	mov	r9, r3
 800d91e:	46a2      	mov	sl, r4
 800d920:	eb19 090b 	adds.w	r9, r9, fp
 800d924:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d928:	f04f 0100 	mov.w	r1, #0
 800d92c:	f04f 0200 	mov.w	r2, #0
 800d930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d934:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d938:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d93c:	4689      	mov	r9, r1
 800d93e:	4692      	mov	sl, r2
 800d940:	eb1b 0509 	adds.w	r5, fp, r9
 800d944:	eb4c 060a 	adc.w	r6, ip, sl
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	4619      	mov	r1, r3
 800d94e:	f04f 0200 	mov.w	r2, #0
 800d952:	f04f 0300 	mov.w	r3, #0
 800d956:	f04f 0400 	mov.w	r4, #0
 800d95a:	0094      	lsls	r4, r2, #2
 800d95c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d960:	008b      	lsls	r3, r1, #2
 800d962:	461a      	mov	r2, r3
 800d964:	4623      	mov	r3, r4
 800d966:	4628      	mov	r0, r5
 800d968:	4631      	mov	r1, r6
 800d96a:	f7f3 f945 	bl	8000bf8 <__aeabi_uldivmod>
 800d96e:	4603      	mov	r3, r0
 800d970:	460c      	mov	r4, r1
 800d972:	461a      	mov	r2, r3
 800d974:	4b0e      	ldr	r3, [pc, #56]	; (800d9b0 <UART_SetConfig+0x6f4>)
 800d976:	fba3 1302 	umull	r1, r3, r3, r2
 800d97a:	095b      	lsrs	r3, r3, #5
 800d97c:	2164      	movs	r1, #100	; 0x64
 800d97e:	fb01 f303 	mul.w	r3, r1, r3
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	011b      	lsls	r3, r3, #4
 800d986:	3332      	adds	r3, #50	; 0x32
 800d988:	4a09      	ldr	r2, [pc, #36]	; (800d9b0 <UART_SetConfig+0x6f4>)
 800d98a:	fba2 2303 	umull	r2, r3, r2, r3
 800d98e:	095b      	lsrs	r3, r3, #5
 800d990:	f003 020f 	and.w	r2, r3, #15
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4442      	add	r2, r8
 800d99a:	609a      	str	r2, [r3, #8]
}
 800d99c:	e7ff      	b.n	800d99e <UART_SetConfig+0x6e2>
 800d99e:	bf00      	nop
 800d9a0:	3714      	adds	r7, #20
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a8:	40011000 	.word	0x40011000
 800d9ac:	40011400 	.word	0x40011400
 800d9b0:	51eb851f 	.word	0x51eb851f

0800d9b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9b4:	b084      	sub	sp, #16
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b084      	sub	sp, #16
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
 800d9be:	f107 001c 	add.w	r0, r7, #28
 800d9c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d122      	bne.n	800da12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d9f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d105      	bne.n	800da06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 fa56 	bl	800deb8 <USB_CoreReset>
 800da0c:	4603      	mov	r3, r0
 800da0e:	73fb      	strb	r3, [r7, #15]
 800da10:	e01a      	b.n	800da48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 fa4a 	bl	800deb8 <USB_CoreReset>
 800da24:	4603      	mov	r3, r0
 800da26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800da28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d106      	bne.n	800da3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	639a      	str	r2, [r3, #56]	; 0x38
 800da3a:	e005      	b.n	800da48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800da48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d10b      	bne.n	800da66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	f043 0206 	orr.w	r2, r3, #6
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	f043 0220 	orr.w	r2, r3, #32
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800da66:	7bfb      	ldrb	r3, [r7, #15]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da72:	b004      	add	sp, #16
 800da74:	4770      	bx	lr

0800da76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da76:	b480      	push	{r7}
 800da78:	b083      	sub	sp, #12
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	f023 0201 	bic.w	r2, r3, #1
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	460b      	mov	r3, r1
 800daa2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d106      	bne.n	800dac4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	60da      	str	r2, [r3, #12]
 800dac2:	e00b      	b.n	800dadc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800dac4:	78fb      	ldrb	r3, [r7, #3]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d106      	bne.n	800dad8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	60da      	str	r2, [r3, #12]
 800dad6:	e001      	b.n	800dadc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800dad8:	2301      	movs	r3, #1
 800dada:	e003      	b.n	800dae4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800dadc:	2032      	movs	r0, #50	; 0x32
 800dade:	f7fa fbf5 	bl	80082cc <HAL_Delay>

  return HAL_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800daec:	b084      	sub	sp, #16
 800daee:	b580      	push	{r7, lr}
 800daf0:	b086      	sub	sp, #24
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dafa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db06:	2300      	movs	r3, #0
 800db08:	613b      	str	r3, [r7, #16]
 800db0a:	e009      	b.n	800db20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	3340      	adds	r3, #64	; 0x40
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	4413      	add	r3, r2
 800db16:	2200      	movs	r2, #0
 800db18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	3301      	adds	r3, #1
 800db1e:	613b      	str	r3, [r7, #16]
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	2b0e      	cmp	r3, #14
 800db24:	d9f2      	bls.n	800db0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800db26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d11c      	bne.n	800db66 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db3a:	f043 0302 	orr.w	r3, r3, #2
 800db3e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	639a      	str	r2, [r3, #56]	; 0x38
 800db64:	e00b      	b.n	800db7e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db84:	461a      	mov	r2, r3
 800db86:	2300      	movs	r3, #0
 800db88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db90:	4619      	mov	r1, r3
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db98:	461a      	mov	r2, r3
 800db9a:	680b      	ldr	r3, [r1, #0]
 800db9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d10c      	bne.n	800dbbe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d104      	bne.n	800dbb4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dbaa:	2100      	movs	r1, #0
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 f949 	bl	800de44 <USB_SetDevSpeed>
 800dbb2:	e008      	b.n	800dbc6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dbb4:	2101      	movs	r1, #1
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 f944 	bl	800de44 <USB_SetDevSpeed>
 800dbbc:	e003      	b.n	800dbc6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dbbe:	2103      	movs	r1, #3
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f93f 	bl	800de44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dbc6:	2110      	movs	r1, #16
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f8f3 	bl	800ddb4 <USB_FlushTxFifo>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 f911 	bl	800de00 <USB_FlushRxFifo>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d001      	beq.n	800dbe8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbee:	461a      	mov	r2, r3
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc06:	461a      	mov	r2, r3
 800dc08:	2300      	movs	r3, #0
 800dc0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	613b      	str	r3, [r7, #16]
 800dc10:	e043      	b.n	800dc9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	015a      	lsls	r2, r3, #5
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	4413      	add	r3, r2
 800dc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc28:	d118      	bne.n	800dc5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10a      	bne.n	800dc46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	015a      	lsls	r2, r3, #5
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	4413      	add	r3, r2
 800dc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dc42:	6013      	str	r3, [r2, #0]
 800dc44:	e013      	b.n	800dc6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	015a      	lsls	r2, r3, #5
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc52:	461a      	mov	r2, r3
 800dc54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dc58:	6013      	str	r3, [r2, #0]
 800dc5a:	e008      	b.n	800dc6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	015a      	lsls	r2, r3, #5
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	4413      	add	r3, r2
 800dc64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc68:	461a      	mov	r2, r3
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	015a      	lsls	r2, r3, #5
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	4413      	add	r3, r2
 800dc76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	015a      	lsls	r2, r3, #5
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	4413      	add	r3, r2
 800dc88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dc92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	3301      	adds	r3, #1
 800dc98:	613b      	str	r3, [r7, #16]
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	693a      	ldr	r2, [r7, #16]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d3b7      	bcc.n	800dc12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dca2:	2300      	movs	r3, #0
 800dca4:	613b      	str	r3, [r7, #16]
 800dca6:	e043      	b.n	800dd30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	015a      	lsls	r2, r3, #5
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	4413      	add	r3, r2
 800dcb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dcba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dcbe:	d118      	bne.n	800dcf2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10a      	bne.n	800dcdc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	015a      	lsls	r2, r3, #5
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	4413      	add	r3, r2
 800dcce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dcd8:	6013      	str	r3, [r2, #0]
 800dcda:	e013      	b.n	800dd04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	015a      	lsls	r2, r3, #5
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	4413      	add	r3, r2
 800dce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dce8:	461a      	mov	r2, r3
 800dcea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dcee:	6013      	str	r3, [r2, #0]
 800dcf0:	e008      	b.n	800dd04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	015a      	lsls	r2, r3, #5
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcfe:	461a      	mov	r2, r3
 800dd00:	2300      	movs	r3, #0
 800dd02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	015a      	lsls	r2, r3, #5
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd10:	461a      	mov	r2, r3
 800dd12:	2300      	movs	r3, #0
 800dd14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	015a      	lsls	r2, r3, #5
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd22:	461a      	mov	r2, r3
 800dd24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dd28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	613b      	str	r3, [r7, #16]
 800dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd32:	693a      	ldr	r2, [r7, #16]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d3b7      	bcc.n	800dca8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dd58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d105      	bne.n	800dd6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	699b      	ldr	r3, [r3, #24]
 800dd64:	f043 0210 	orr.w	r2, r3, #16
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	699a      	ldr	r2, [r3, #24]
 800dd70:	4b0f      	ldr	r3, [pc, #60]	; (800ddb0 <USB_DevInit+0x2c4>)
 800dd72:	4313      	orrs	r3, r2
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d005      	beq.n	800dd8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	699b      	ldr	r3, [r3, #24]
 800dd82:	f043 0208 	orr.w	r2, r3, #8
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dd8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d107      	bne.n	800dda0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	699b      	ldr	r3, [r3, #24]
 800dd94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd98:	f043 0304 	orr.w	r3, r3, #4
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3718      	adds	r7, #24
 800dda6:	46bd      	mov	sp, r7
 800dda8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddac:	b004      	add	sp, #16
 800ddae:	4770      	bx	lr
 800ddb0:	803c3800 	.word	0x803c3800

0800ddb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	019b      	lsls	r3, r3, #6
 800ddc6:	f043 0220 	orr.w	r2, r3, #32
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	60fb      	str	r3, [r7, #12]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	4a09      	ldr	r2, [pc, #36]	; (800ddfc <USB_FlushTxFifo+0x48>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d901      	bls.n	800dde0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800dddc:	2303      	movs	r3, #3
 800ddde:	e006      	b.n	800ddee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	f003 0320 	and.w	r3, r3, #32
 800dde8:	2b20      	cmp	r3, #32
 800ddea:	d0f0      	beq.n	800ddce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ddec:	2300      	movs	r3, #0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3714      	adds	r7, #20
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	00030d40 	.word	0x00030d40

0800de00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de00:	b480      	push	{r7}
 800de02:	b085      	sub	sp, #20
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800de08:	2300      	movs	r3, #0
 800de0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2210      	movs	r2, #16
 800de10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	3301      	adds	r3, #1
 800de16:	60fb      	str	r3, [r7, #12]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	4a09      	ldr	r2, [pc, #36]	; (800de40 <USB_FlushRxFifo+0x40>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d901      	bls.n	800de24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800de20:	2303      	movs	r3, #3
 800de22:	e006      	b.n	800de32 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	691b      	ldr	r3, [r3, #16]
 800de28:	f003 0310 	and.w	r3, r3, #16
 800de2c:	2b10      	cmp	r3, #16
 800de2e:	d0f0      	beq.n	800de12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3714      	adds	r7, #20
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	00030d40 	.word	0x00030d40

0800de44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	460b      	mov	r3, r1
 800de4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	78fb      	ldrb	r3, [r7, #3]
 800de5e:	68f9      	ldr	r1, [r7, #12]
 800de60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de64:	4313      	orrs	r3, r2
 800de66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3714      	adds	r7, #20
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800de76:	b480      	push	{r7}
 800de78:	b085      	sub	sp, #20
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800de90:	f023 0303 	bic.w	r3, r3, #3
 800de94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dea4:	f043 0302 	orr.w	r3, r3, #2
 800dea8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3714      	adds	r7, #20
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr

0800deb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800dec0:	2300      	movs	r3, #0
 800dec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3301      	adds	r3, #1
 800dec8:	60fb      	str	r3, [r7, #12]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	4a13      	ldr	r2, [pc, #76]	; (800df1c <USB_CoreReset+0x64>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d901      	bls.n	800ded6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ded2:	2303      	movs	r3, #3
 800ded4:	e01b      	b.n	800df0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	daf2      	bge.n	800dec4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dede:	2300      	movs	r3, #0
 800dee0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	f043 0201 	orr.w	r2, r3, #1
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	3301      	adds	r3, #1
 800def2:	60fb      	str	r3, [r7, #12]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	4a09      	ldr	r2, [pc, #36]	; (800df1c <USB_CoreReset+0x64>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d901      	bls.n	800df00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800defc:	2303      	movs	r3, #3
 800defe:	e006      	b.n	800df0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	f003 0301 	and.w	r3, r3, #1
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d0f0      	beq.n	800deee <USB_CoreReset+0x36>

  return HAL_OK;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3714      	adds	r7, #20
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	00030d40 	.word	0x00030d40

0800df20 <pow>:
 800df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df24:	ed2d 8b04 	vpush	{d8-d9}
 800df28:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800e1fc <pow+0x2dc>
 800df2c:	b08d      	sub	sp, #52	; 0x34
 800df2e:	ec57 6b10 	vmov	r6, r7, d0
 800df32:	ec55 4b11 	vmov	r4, r5, d1
 800df36:	f000 f963 	bl	800e200 <__ieee754_pow>
 800df3a:	f999 3000 	ldrsb.w	r3, [r9]
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	3301      	adds	r3, #1
 800df42:	eeb0 8a40 	vmov.f32	s16, s0
 800df46:	eef0 8a60 	vmov.f32	s17, s1
 800df4a:	46c8      	mov	r8, r9
 800df4c:	d05f      	beq.n	800e00e <pow+0xee>
 800df4e:	4622      	mov	r2, r4
 800df50:	462b      	mov	r3, r5
 800df52:	4620      	mov	r0, r4
 800df54:	4629      	mov	r1, r5
 800df56:	f7f2 fda1 	bl	8000a9c <__aeabi_dcmpun>
 800df5a:	4683      	mov	fp, r0
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d156      	bne.n	800e00e <pow+0xee>
 800df60:	4632      	mov	r2, r6
 800df62:	463b      	mov	r3, r7
 800df64:	4630      	mov	r0, r6
 800df66:	4639      	mov	r1, r7
 800df68:	f7f2 fd98 	bl	8000a9c <__aeabi_dcmpun>
 800df6c:	9001      	str	r0, [sp, #4]
 800df6e:	b1e8      	cbz	r0, 800dfac <pow+0x8c>
 800df70:	2200      	movs	r2, #0
 800df72:	2300      	movs	r3, #0
 800df74:	4620      	mov	r0, r4
 800df76:	4629      	mov	r1, r5
 800df78:	f7f2 fd5e 	bl	8000a38 <__aeabi_dcmpeq>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d046      	beq.n	800e00e <pow+0xee>
 800df80:	2301      	movs	r3, #1
 800df82:	9302      	str	r3, [sp, #8]
 800df84:	4b96      	ldr	r3, [pc, #600]	; (800e1e0 <pow+0x2c0>)
 800df86:	9303      	str	r3, [sp, #12]
 800df88:	4b96      	ldr	r3, [pc, #600]	; (800e1e4 <pow+0x2c4>)
 800df8a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800df8e:	2200      	movs	r2, #0
 800df90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df94:	9b00      	ldr	r3, [sp, #0]
 800df96:	2b02      	cmp	r3, #2
 800df98:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800df9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dfa0:	d033      	beq.n	800e00a <pow+0xea>
 800dfa2:	a802      	add	r0, sp, #8
 800dfa4:	f000 fefb 	bl	800ed9e <matherr>
 800dfa8:	bb48      	cbnz	r0, 800dffe <pow+0xde>
 800dfaa:	e05d      	b.n	800e068 <pow+0x148>
 800dfac:	f04f 0a00 	mov.w	sl, #0
 800dfb0:	f04f 0b00 	mov.w	fp, #0
 800dfb4:	4652      	mov	r2, sl
 800dfb6:	465b      	mov	r3, fp
 800dfb8:	4630      	mov	r0, r6
 800dfba:	4639      	mov	r1, r7
 800dfbc:	f7f2 fd3c 	bl	8000a38 <__aeabi_dcmpeq>
 800dfc0:	ec4b ab19 	vmov	d9, sl, fp
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d054      	beq.n	800e072 <pow+0x152>
 800dfc8:	4652      	mov	r2, sl
 800dfca:	465b      	mov	r3, fp
 800dfcc:	4620      	mov	r0, r4
 800dfce:	4629      	mov	r1, r5
 800dfd0:	f7f2 fd32 	bl	8000a38 <__aeabi_dcmpeq>
 800dfd4:	4680      	mov	r8, r0
 800dfd6:	b318      	cbz	r0, 800e020 <pow+0x100>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	4b80      	ldr	r3, [pc, #512]	; (800e1e0 <pow+0x2c0>)
 800dfde:	9303      	str	r3, [sp, #12]
 800dfe0:	9b01      	ldr	r3, [sp, #4]
 800dfe2:	930a      	str	r3, [sp, #40]	; 0x28
 800dfe4:	9b00      	ldr	r3, [sp, #0]
 800dfe6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800dfea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dfee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d0d5      	beq.n	800dfa2 <pow+0x82>
 800dff6:	4b7b      	ldr	r3, [pc, #492]	; (800e1e4 <pow+0x2c4>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e000:	b11b      	cbz	r3, 800e00a <pow+0xea>
 800e002:	f000 ffe3 	bl	800efcc <__errno>
 800e006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e008:	6003      	str	r3, [r0, #0]
 800e00a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800e00e:	eeb0 0a48 	vmov.f32	s0, s16
 800e012:	eef0 0a68 	vmov.f32	s1, s17
 800e016:	b00d      	add	sp, #52	; 0x34
 800e018:	ecbd 8b04 	vpop	{d8-d9}
 800e01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e020:	ec45 4b10 	vmov	d0, r4, r5
 800e024:	f000 feb3 	bl	800ed8e <finite>
 800e028:	2800      	cmp	r0, #0
 800e02a:	d0f0      	beq.n	800e00e <pow+0xee>
 800e02c:	4652      	mov	r2, sl
 800e02e:	465b      	mov	r3, fp
 800e030:	4620      	mov	r0, r4
 800e032:	4629      	mov	r1, r5
 800e034:	f7f2 fd0a 	bl	8000a4c <__aeabi_dcmplt>
 800e038:	2800      	cmp	r0, #0
 800e03a:	d0e8      	beq.n	800e00e <pow+0xee>
 800e03c:	2301      	movs	r3, #1
 800e03e:	9302      	str	r3, [sp, #8]
 800e040:	4b67      	ldr	r3, [pc, #412]	; (800e1e0 <pow+0x2c0>)
 800e042:	9303      	str	r3, [sp, #12]
 800e044:	f999 3000 	ldrsb.w	r3, [r9]
 800e048:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800e04c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e050:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e054:	b913      	cbnz	r3, 800e05c <pow+0x13c>
 800e056:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800e05a:	e7a2      	b.n	800dfa2 <pow+0x82>
 800e05c:	4962      	ldr	r1, [pc, #392]	; (800e1e8 <pow+0x2c8>)
 800e05e:	2000      	movs	r0, #0
 800e060:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e064:	2b02      	cmp	r3, #2
 800e066:	d19c      	bne.n	800dfa2 <pow+0x82>
 800e068:	f000 ffb0 	bl	800efcc <__errno>
 800e06c:	2321      	movs	r3, #33	; 0x21
 800e06e:	6003      	str	r3, [r0, #0]
 800e070:	e7c5      	b.n	800dffe <pow+0xde>
 800e072:	eeb0 0a48 	vmov.f32	s0, s16
 800e076:	eef0 0a68 	vmov.f32	s1, s17
 800e07a:	f000 fe88 	bl	800ed8e <finite>
 800e07e:	9000      	str	r0, [sp, #0]
 800e080:	2800      	cmp	r0, #0
 800e082:	f040 8081 	bne.w	800e188 <pow+0x268>
 800e086:	ec47 6b10 	vmov	d0, r6, r7
 800e08a:	f000 fe80 	bl	800ed8e <finite>
 800e08e:	2800      	cmp	r0, #0
 800e090:	d07a      	beq.n	800e188 <pow+0x268>
 800e092:	ec45 4b10 	vmov	d0, r4, r5
 800e096:	f000 fe7a 	bl	800ed8e <finite>
 800e09a:	2800      	cmp	r0, #0
 800e09c:	d074      	beq.n	800e188 <pow+0x268>
 800e09e:	ec53 2b18 	vmov	r2, r3, d8
 800e0a2:	ee18 0a10 	vmov	r0, s16
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	f7f2 fcf8 	bl	8000a9c <__aeabi_dcmpun>
 800e0ac:	f999 9000 	ldrsb.w	r9, [r9]
 800e0b0:	4b4b      	ldr	r3, [pc, #300]	; (800e1e0 <pow+0x2c0>)
 800e0b2:	b1b0      	cbz	r0, 800e0e2 <pow+0x1c2>
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e0ba:	9b00      	ldr	r3, [sp, #0]
 800e0bc:	930a      	str	r3, [sp, #40]	; 0x28
 800e0be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e0c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e0c6:	f1b9 0f00 	cmp.w	r9, #0
 800e0ca:	d0c4      	beq.n	800e056 <pow+0x136>
 800e0cc:	4652      	mov	r2, sl
 800e0ce:	465b      	mov	r3, fp
 800e0d0:	4650      	mov	r0, sl
 800e0d2:	4659      	mov	r1, fp
 800e0d4:	f7f2 fb72 	bl	80007bc <__aeabi_ddiv>
 800e0d8:	f1b9 0f02 	cmp.w	r9, #2
 800e0dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e0e0:	e7c1      	b.n	800e066 <pow+0x146>
 800e0e2:	2203      	movs	r2, #3
 800e0e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e0e8:	900a      	str	r0, [sp, #40]	; 0x28
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	4b3e      	ldr	r3, [pc, #248]	; (800e1ec <pow+0x2cc>)
 800e0f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e0f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e0fa:	f7f2 fa35 	bl	8000568 <__aeabi_dmul>
 800e0fe:	4604      	mov	r4, r0
 800e100:	460d      	mov	r5, r1
 800e102:	f1b9 0f00 	cmp.w	r9, #0
 800e106:	d124      	bne.n	800e152 <pow+0x232>
 800e108:	4b39      	ldr	r3, [pc, #228]	; (800e1f0 <pow+0x2d0>)
 800e10a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e10e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e112:	4630      	mov	r0, r6
 800e114:	4652      	mov	r2, sl
 800e116:	465b      	mov	r3, fp
 800e118:	4639      	mov	r1, r7
 800e11a:	f7f2 fc97 	bl	8000a4c <__aeabi_dcmplt>
 800e11e:	2800      	cmp	r0, #0
 800e120:	d056      	beq.n	800e1d0 <pow+0x2b0>
 800e122:	ec45 4b10 	vmov	d0, r4, r5
 800e126:	f000 fe47 	bl	800edb8 <rint>
 800e12a:	4622      	mov	r2, r4
 800e12c:	462b      	mov	r3, r5
 800e12e:	ec51 0b10 	vmov	r0, r1, d0
 800e132:	f7f2 fc81 	bl	8000a38 <__aeabi_dcmpeq>
 800e136:	b920      	cbnz	r0, 800e142 <pow+0x222>
 800e138:	4b2e      	ldr	r3, [pc, #184]	; (800e1f4 <pow+0x2d4>)
 800e13a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e13e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e142:	f998 3000 	ldrsb.w	r3, [r8]
 800e146:	2b02      	cmp	r3, #2
 800e148:	d142      	bne.n	800e1d0 <pow+0x2b0>
 800e14a:	f000 ff3f 	bl	800efcc <__errno>
 800e14e:	2322      	movs	r3, #34	; 0x22
 800e150:	e78d      	b.n	800e06e <pow+0x14e>
 800e152:	4b29      	ldr	r3, [pc, #164]	; (800e1f8 <pow+0x2d8>)
 800e154:	2200      	movs	r2, #0
 800e156:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e15a:	4630      	mov	r0, r6
 800e15c:	4652      	mov	r2, sl
 800e15e:	465b      	mov	r3, fp
 800e160:	4639      	mov	r1, r7
 800e162:	f7f2 fc73 	bl	8000a4c <__aeabi_dcmplt>
 800e166:	2800      	cmp	r0, #0
 800e168:	d0eb      	beq.n	800e142 <pow+0x222>
 800e16a:	ec45 4b10 	vmov	d0, r4, r5
 800e16e:	f000 fe23 	bl	800edb8 <rint>
 800e172:	4622      	mov	r2, r4
 800e174:	462b      	mov	r3, r5
 800e176:	ec51 0b10 	vmov	r0, r1, d0
 800e17a:	f7f2 fc5d 	bl	8000a38 <__aeabi_dcmpeq>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d1df      	bne.n	800e142 <pow+0x222>
 800e182:	2200      	movs	r2, #0
 800e184:	4b18      	ldr	r3, [pc, #96]	; (800e1e8 <pow+0x2c8>)
 800e186:	e7da      	b.n	800e13e <pow+0x21e>
 800e188:	2200      	movs	r2, #0
 800e18a:	2300      	movs	r3, #0
 800e18c:	ec51 0b18 	vmov	r0, r1, d8
 800e190:	f7f2 fc52 	bl	8000a38 <__aeabi_dcmpeq>
 800e194:	2800      	cmp	r0, #0
 800e196:	f43f af3a 	beq.w	800e00e <pow+0xee>
 800e19a:	ec47 6b10 	vmov	d0, r6, r7
 800e19e:	f000 fdf6 	bl	800ed8e <finite>
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	f43f af33 	beq.w	800e00e <pow+0xee>
 800e1a8:	ec45 4b10 	vmov	d0, r4, r5
 800e1ac:	f000 fdef 	bl	800ed8e <finite>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	f43f af2c 	beq.w	800e00e <pow+0xee>
 800e1b6:	2304      	movs	r3, #4
 800e1b8:	9302      	str	r3, [sp, #8]
 800e1ba:	4b09      	ldr	r3, [pc, #36]	; (800e1e0 <pow+0x2c0>)
 800e1bc:	9303      	str	r3, [sp, #12]
 800e1be:	2300      	movs	r3, #0
 800e1c0:	930a      	str	r3, [sp, #40]	; 0x28
 800e1c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e1c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e1ca:	ed8d 9b08 	vstr	d9, [sp, #32]
 800e1ce:	e7b8      	b.n	800e142 <pow+0x222>
 800e1d0:	a802      	add	r0, sp, #8
 800e1d2:	f000 fde4 	bl	800ed9e <matherr>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	f47f af11 	bne.w	800dffe <pow+0xde>
 800e1dc:	e7b5      	b.n	800e14a <pow+0x22a>
 800e1de:	bf00      	nop
 800e1e0:	0800f068 	.word	0x0800f068
 800e1e4:	3ff00000 	.word	0x3ff00000
 800e1e8:	fff00000 	.word	0xfff00000
 800e1ec:	3fe00000 	.word	0x3fe00000
 800e1f0:	47efffff 	.word	0x47efffff
 800e1f4:	c7efffff 	.word	0xc7efffff
 800e1f8:	7ff00000 	.word	0x7ff00000
 800e1fc:	20000015 	.word	0x20000015

0800e200 <__ieee754_pow>:
 800e200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	b091      	sub	sp, #68	; 0x44
 800e206:	ed8d 1b00 	vstr	d1, [sp]
 800e20a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e20e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e212:	ea58 0302 	orrs.w	r3, r8, r2
 800e216:	ec57 6b10 	vmov	r6, r7, d0
 800e21a:	f000 84be 	beq.w	800eb9a <__ieee754_pow+0x99a>
 800e21e:	4b7a      	ldr	r3, [pc, #488]	; (800e408 <__ieee754_pow+0x208>)
 800e220:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e224:	429c      	cmp	r4, r3
 800e226:	463d      	mov	r5, r7
 800e228:	ee10 aa10 	vmov	sl, s0
 800e22c:	dc09      	bgt.n	800e242 <__ieee754_pow+0x42>
 800e22e:	d103      	bne.n	800e238 <__ieee754_pow+0x38>
 800e230:	b93e      	cbnz	r6, 800e242 <__ieee754_pow+0x42>
 800e232:	45a0      	cmp	r8, r4
 800e234:	dc0d      	bgt.n	800e252 <__ieee754_pow+0x52>
 800e236:	e001      	b.n	800e23c <__ieee754_pow+0x3c>
 800e238:	4598      	cmp	r8, r3
 800e23a:	dc02      	bgt.n	800e242 <__ieee754_pow+0x42>
 800e23c:	4598      	cmp	r8, r3
 800e23e:	d10e      	bne.n	800e25e <__ieee754_pow+0x5e>
 800e240:	b16a      	cbz	r2, 800e25e <__ieee754_pow+0x5e>
 800e242:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e246:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e24a:	ea54 030a 	orrs.w	r3, r4, sl
 800e24e:	f000 84a4 	beq.w	800eb9a <__ieee754_pow+0x99a>
 800e252:	486e      	ldr	r0, [pc, #440]	; (800e40c <__ieee754_pow+0x20c>)
 800e254:	b011      	add	sp, #68	; 0x44
 800e256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e25a:	f000 bda5 	b.w	800eda8 <nan>
 800e25e:	2d00      	cmp	r5, #0
 800e260:	da53      	bge.n	800e30a <__ieee754_pow+0x10a>
 800e262:	4b6b      	ldr	r3, [pc, #428]	; (800e410 <__ieee754_pow+0x210>)
 800e264:	4598      	cmp	r8, r3
 800e266:	dc4d      	bgt.n	800e304 <__ieee754_pow+0x104>
 800e268:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e26c:	4598      	cmp	r8, r3
 800e26e:	dd4c      	ble.n	800e30a <__ieee754_pow+0x10a>
 800e270:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e274:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e278:	2b14      	cmp	r3, #20
 800e27a:	dd26      	ble.n	800e2ca <__ieee754_pow+0xca>
 800e27c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e280:	fa22 f103 	lsr.w	r1, r2, r3
 800e284:	fa01 f303 	lsl.w	r3, r1, r3
 800e288:	4293      	cmp	r3, r2
 800e28a:	d13e      	bne.n	800e30a <__ieee754_pow+0x10a>
 800e28c:	f001 0101 	and.w	r1, r1, #1
 800e290:	f1c1 0b02 	rsb	fp, r1, #2
 800e294:	2a00      	cmp	r2, #0
 800e296:	d15b      	bne.n	800e350 <__ieee754_pow+0x150>
 800e298:	4b5b      	ldr	r3, [pc, #364]	; (800e408 <__ieee754_pow+0x208>)
 800e29a:	4598      	cmp	r8, r3
 800e29c:	d124      	bne.n	800e2e8 <__ieee754_pow+0xe8>
 800e29e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e2a2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e2a6:	ea53 030a 	orrs.w	r3, r3, sl
 800e2aa:	f000 8476 	beq.w	800eb9a <__ieee754_pow+0x99a>
 800e2ae:	4b59      	ldr	r3, [pc, #356]	; (800e414 <__ieee754_pow+0x214>)
 800e2b0:	429c      	cmp	r4, r3
 800e2b2:	dd2d      	ble.n	800e310 <__ieee754_pow+0x110>
 800e2b4:	f1b9 0f00 	cmp.w	r9, #0
 800e2b8:	f280 8473 	bge.w	800eba2 <__ieee754_pow+0x9a2>
 800e2bc:	2000      	movs	r0, #0
 800e2be:	2100      	movs	r1, #0
 800e2c0:	ec41 0b10 	vmov	d0, r0, r1
 800e2c4:	b011      	add	sp, #68	; 0x44
 800e2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ca:	2a00      	cmp	r2, #0
 800e2cc:	d13e      	bne.n	800e34c <__ieee754_pow+0x14c>
 800e2ce:	f1c3 0314 	rsb	r3, r3, #20
 800e2d2:	fa48 f103 	asr.w	r1, r8, r3
 800e2d6:	fa01 f303 	lsl.w	r3, r1, r3
 800e2da:	4543      	cmp	r3, r8
 800e2dc:	f040 8469 	bne.w	800ebb2 <__ieee754_pow+0x9b2>
 800e2e0:	f001 0101 	and.w	r1, r1, #1
 800e2e4:	f1c1 0b02 	rsb	fp, r1, #2
 800e2e8:	4b4b      	ldr	r3, [pc, #300]	; (800e418 <__ieee754_pow+0x218>)
 800e2ea:	4598      	cmp	r8, r3
 800e2ec:	d118      	bne.n	800e320 <__ieee754_pow+0x120>
 800e2ee:	f1b9 0f00 	cmp.w	r9, #0
 800e2f2:	f280 845a 	bge.w	800ebaa <__ieee754_pow+0x9aa>
 800e2f6:	4948      	ldr	r1, [pc, #288]	; (800e418 <__ieee754_pow+0x218>)
 800e2f8:	4632      	mov	r2, r6
 800e2fa:	463b      	mov	r3, r7
 800e2fc:	2000      	movs	r0, #0
 800e2fe:	f7f2 fa5d 	bl	80007bc <__aeabi_ddiv>
 800e302:	e7dd      	b.n	800e2c0 <__ieee754_pow+0xc0>
 800e304:	f04f 0b02 	mov.w	fp, #2
 800e308:	e7c4      	b.n	800e294 <__ieee754_pow+0x94>
 800e30a:	f04f 0b00 	mov.w	fp, #0
 800e30e:	e7c1      	b.n	800e294 <__ieee754_pow+0x94>
 800e310:	f1b9 0f00 	cmp.w	r9, #0
 800e314:	dad2      	bge.n	800e2bc <__ieee754_pow+0xbc>
 800e316:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e31a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e31e:	e7cf      	b.n	800e2c0 <__ieee754_pow+0xc0>
 800e320:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e324:	d106      	bne.n	800e334 <__ieee754_pow+0x134>
 800e326:	4632      	mov	r2, r6
 800e328:	463b      	mov	r3, r7
 800e32a:	4610      	mov	r0, r2
 800e32c:	4619      	mov	r1, r3
 800e32e:	f7f2 f91b 	bl	8000568 <__aeabi_dmul>
 800e332:	e7c5      	b.n	800e2c0 <__ieee754_pow+0xc0>
 800e334:	4b39      	ldr	r3, [pc, #228]	; (800e41c <__ieee754_pow+0x21c>)
 800e336:	4599      	cmp	r9, r3
 800e338:	d10a      	bne.n	800e350 <__ieee754_pow+0x150>
 800e33a:	2d00      	cmp	r5, #0
 800e33c:	db08      	blt.n	800e350 <__ieee754_pow+0x150>
 800e33e:	ec47 6b10 	vmov	d0, r6, r7
 800e342:	b011      	add	sp, #68	; 0x44
 800e344:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e348:	f000 bc68 	b.w	800ec1c <__ieee754_sqrt>
 800e34c:	f04f 0b00 	mov.w	fp, #0
 800e350:	ec47 6b10 	vmov	d0, r6, r7
 800e354:	f000 fd12 	bl	800ed7c <fabs>
 800e358:	ec51 0b10 	vmov	r0, r1, d0
 800e35c:	f1ba 0f00 	cmp.w	sl, #0
 800e360:	d127      	bne.n	800e3b2 <__ieee754_pow+0x1b2>
 800e362:	b124      	cbz	r4, 800e36e <__ieee754_pow+0x16e>
 800e364:	4b2c      	ldr	r3, [pc, #176]	; (800e418 <__ieee754_pow+0x218>)
 800e366:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d121      	bne.n	800e3b2 <__ieee754_pow+0x1b2>
 800e36e:	f1b9 0f00 	cmp.w	r9, #0
 800e372:	da05      	bge.n	800e380 <__ieee754_pow+0x180>
 800e374:	4602      	mov	r2, r0
 800e376:	460b      	mov	r3, r1
 800e378:	2000      	movs	r0, #0
 800e37a:	4927      	ldr	r1, [pc, #156]	; (800e418 <__ieee754_pow+0x218>)
 800e37c:	f7f2 fa1e 	bl	80007bc <__aeabi_ddiv>
 800e380:	2d00      	cmp	r5, #0
 800e382:	da9d      	bge.n	800e2c0 <__ieee754_pow+0xc0>
 800e384:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e388:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e38c:	ea54 030b 	orrs.w	r3, r4, fp
 800e390:	d108      	bne.n	800e3a4 <__ieee754_pow+0x1a4>
 800e392:	4602      	mov	r2, r0
 800e394:	460b      	mov	r3, r1
 800e396:	4610      	mov	r0, r2
 800e398:	4619      	mov	r1, r3
 800e39a:	f7f1 ff2d 	bl	80001f8 <__aeabi_dsub>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	e7ac      	b.n	800e2fe <__ieee754_pow+0xfe>
 800e3a4:	f1bb 0f01 	cmp.w	fp, #1
 800e3a8:	d18a      	bne.n	800e2c0 <__ieee754_pow+0xc0>
 800e3aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	e786      	b.n	800e2c0 <__ieee754_pow+0xc0>
 800e3b2:	0fed      	lsrs	r5, r5, #31
 800e3b4:	1e6b      	subs	r3, r5, #1
 800e3b6:	930d      	str	r3, [sp, #52]	; 0x34
 800e3b8:	ea5b 0303 	orrs.w	r3, fp, r3
 800e3bc:	d102      	bne.n	800e3c4 <__ieee754_pow+0x1c4>
 800e3be:	4632      	mov	r2, r6
 800e3c0:	463b      	mov	r3, r7
 800e3c2:	e7e8      	b.n	800e396 <__ieee754_pow+0x196>
 800e3c4:	4b16      	ldr	r3, [pc, #88]	; (800e420 <__ieee754_pow+0x220>)
 800e3c6:	4598      	cmp	r8, r3
 800e3c8:	f340 80fe 	ble.w	800e5c8 <__ieee754_pow+0x3c8>
 800e3cc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e3d0:	4598      	cmp	r8, r3
 800e3d2:	dd0a      	ble.n	800e3ea <__ieee754_pow+0x1ea>
 800e3d4:	4b0f      	ldr	r3, [pc, #60]	; (800e414 <__ieee754_pow+0x214>)
 800e3d6:	429c      	cmp	r4, r3
 800e3d8:	dc0d      	bgt.n	800e3f6 <__ieee754_pow+0x1f6>
 800e3da:	f1b9 0f00 	cmp.w	r9, #0
 800e3de:	f6bf af6d 	bge.w	800e2bc <__ieee754_pow+0xbc>
 800e3e2:	a307      	add	r3, pc, #28	; (adr r3, 800e400 <__ieee754_pow+0x200>)
 800e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e8:	e79f      	b.n	800e32a <__ieee754_pow+0x12a>
 800e3ea:	4b0e      	ldr	r3, [pc, #56]	; (800e424 <__ieee754_pow+0x224>)
 800e3ec:	429c      	cmp	r4, r3
 800e3ee:	ddf4      	ble.n	800e3da <__ieee754_pow+0x1da>
 800e3f0:	4b09      	ldr	r3, [pc, #36]	; (800e418 <__ieee754_pow+0x218>)
 800e3f2:	429c      	cmp	r4, r3
 800e3f4:	dd18      	ble.n	800e428 <__ieee754_pow+0x228>
 800e3f6:	f1b9 0f00 	cmp.w	r9, #0
 800e3fa:	dcf2      	bgt.n	800e3e2 <__ieee754_pow+0x1e2>
 800e3fc:	e75e      	b.n	800e2bc <__ieee754_pow+0xbc>
 800e3fe:	bf00      	nop
 800e400:	8800759c 	.word	0x8800759c
 800e404:	7e37e43c 	.word	0x7e37e43c
 800e408:	7ff00000 	.word	0x7ff00000
 800e40c:	0800f06b 	.word	0x0800f06b
 800e410:	433fffff 	.word	0x433fffff
 800e414:	3fefffff 	.word	0x3fefffff
 800e418:	3ff00000 	.word	0x3ff00000
 800e41c:	3fe00000 	.word	0x3fe00000
 800e420:	41e00000 	.word	0x41e00000
 800e424:	3feffffe 	.word	0x3feffffe
 800e428:	2200      	movs	r2, #0
 800e42a:	4b63      	ldr	r3, [pc, #396]	; (800e5b8 <__ieee754_pow+0x3b8>)
 800e42c:	f7f1 fee4 	bl	80001f8 <__aeabi_dsub>
 800e430:	a355      	add	r3, pc, #340	; (adr r3, 800e588 <__ieee754_pow+0x388>)
 800e432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e436:	4604      	mov	r4, r0
 800e438:	460d      	mov	r5, r1
 800e43a:	f7f2 f895 	bl	8000568 <__aeabi_dmul>
 800e43e:	a354      	add	r3, pc, #336	; (adr r3, 800e590 <__ieee754_pow+0x390>)
 800e440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e444:	4606      	mov	r6, r0
 800e446:	460f      	mov	r7, r1
 800e448:	4620      	mov	r0, r4
 800e44a:	4629      	mov	r1, r5
 800e44c:	f7f2 f88c 	bl	8000568 <__aeabi_dmul>
 800e450:	2200      	movs	r2, #0
 800e452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e456:	4b59      	ldr	r3, [pc, #356]	; (800e5bc <__ieee754_pow+0x3bc>)
 800e458:	4620      	mov	r0, r4
 800e45a:	4629      	mov	r1, r5
 800e45c:	f7f2 f884 	bl	8000568 <__aeabi_dmul>
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	a14c      	add	r1, pc, #304	; (adr r1, 800e598 <__ieee754_pow+0x398>)
 800e466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e46a:	f7f1 fec5 	bl	80001f8 <__aeabi_dsub>
 800e46e:	4622      	mov	r2, r4
 800e470:	462b      	mov	r3, r5
 800e472:	f7f2 f879 	bl	8000568 <__aeabi_dmul>
 800e476:	4602      	mov	r2, r0
 800e478:	460b      	mov	r3, r1
 800e47a:	2000      	movs	r0, #0
 800e47c:	4950      	ldr	r1, [pc, #320]	; (800e5c0 <__ieee754_pow+0x3c0>)
 800e47e:	f7f1 febb 	bl	80001f8 <__aeabi_dsub>
 800e482:	4622      	mov	r2, r4
 800e484:	462b      	mov	r3, r5
 800e486:	4680      	mov	r8, r0
 800e488:	4689      	mov	r9, r1
 800e48a:	4620      	mov	r0, r4
 800e48c:	4629      	mov	r1, r5
 800e48e:	f7f2 f86b 	bl	8000568 <__aeabi_dmul>
 800e492:	4602      	mov	r2, r0
 800e494:	460b      	mov	r3, r1
 800e496:	4640      	mov	r0, r8
 800e498:	4649      	mov	r1, r9
 800e49a:	f7f2 f865 	bl	8000568 <__aeabi_dmul>
 800e49e:	a340      	add	r3, pc, #256	; (adr r3, 800e5a0 <__ieee754_pow+0x3a0>)
 800e4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a4:	f7f2 f860 	bl	8000568 <__aeabi_dmul>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	460b      	mov	r3, r1
 800e4ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4b0:	f7f1 fea2 	bl	80001f8 <__aeabi_dsub>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	460d      	mov	r5, r1
 800e4bc:	4630      	mov	r0, r6
 800e4be:	4639      	mov	r1, r7
 800e4c0:	f7f1 fe9c 	bl	80001fc <__adddf3>
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4ca:	4632      	mov	r2, r6
 800e4cc:	463b      	mov	r3, r7
 800e4ce:	f7f1 fe93 	bl	80001f8 <__aeabi_dsub>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	4629      	mov	r1, r5
 800e4da:	f7f1 fe8d 	bl	80001f8 <__aeabi_dsub>
 800e4de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4e0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	4606      	mov	r6, r0
 800e4e8:	460f      	mov	r7, r1
 800e4ea:	f040 81eb 	bne.w	800e8c4 <__ieee754_pow+0x6c4>
 800e4ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e5a8 <__ieee754_pow+0x3a8>
 800e4f2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800e4f6:	2400      	movs	r4, #0
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	462b      	mov	r3, r5
 800e4fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e500:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e504:	f7f1 fe78 	bl	80001f8 <__aeabi_dsub>
 800e508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e50c:	f7f2 f82c 	bl	8000568 <__aeabi_dmul>
 800e510:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e514:	4680      	mov	r8, r0
 800e516:	4689      	mov	r9, r1
 800e518:	4630      	mov	r0, r6
 800e51a:	4639      	mov	r1, r7
 800e51c:	f7f2 f824 	bl	8000568 <__aeabi_dmul>
 800e520:	4602      	mov	r2, r0
 800e522:	460b      	mov	r3, r1
 800e524:	4640      	mov	r0, r8
 800e526:	4649      	mov	r1, r9
 800e528:	f7f1 fe68 	bl	80001fc <__adddf3>
 800e52c:	4622      	mov	r2, r4
 800e52e:	462b      	mov	r3, r5
 800e530:	4680      	mov	r8, r0
 800e532:	4689      	mov	r9, r1
 800e534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e538:	f7f2 f816 	bl	8000568 <__aeabi_dmul>
 800e53c:	460b      	mov	r3, r1
 800e53e:	4604      	mov	r4, r0
 800e540:	460d      	mov	r5, r1
 800e542:	4602      	mov	r2, r0
 800e544:	4649      	mov	r1, r9
 800e546:	4640      	mov	r0, r8
 800e548:	e9cd 4500 	strd	r4, r5, [sp]
 800e54c:	f7f1 fe56 	bl	80001fc <__adddf3>
 800e550:	4b1c      	ldr	r3, [pc, #112]	; (800e5c4 <__ieee754_pow+0x3c4>)
 800e552:	4299      	cmp	r1, r3
 800e554:	4606      	mov	r6, r0
 800e556:	460f      	mov	r7, r1
 800e558:	468b      	mov	fp, r1
 800e55a:	f340 82f7 	ble.w	800eb4c <__ieee754_pow+0x94c>
 800e55e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e562:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e566:	4303      	orrs	r3, r0
 800e568:	f000 81ea 	beq.w	800e940 <__ieee754_pow+0x740>
 800e56c:	a310      	add	r3, pc, #64	; (adr r3, 800e5b0 <__ieee754_pow+0x3b0>)
 800e56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e576:	f7f1 fff7 	bl	8000568 <__aeabi_dmul>
 800e57a:	a30d      	add	r3, pc, #52	; (adr r3, 800e5b0 <__ieee754_pow+0x3b0>)
 800e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e580:	e6d5      	b.n	800e32e <__ieee754_pow+0x12e>
 800e582:	bf00      	nop
 800e584:	f3af 8000 	nop.w
 800e588:	60000000 	.word	0x60000000
 800e58c:	3ff71547 	.word	0x3ff71547
 800e590:	f85ddf44 	.word	0xf85ddf44
 800e594:	3e54ae0b 	.word	0x3e54ae0b
 800e598:	55555555 	.word	0x55555555
 800e59c:	3fd55555 	.word	0x3fd55555
 800e5a0:	652b82fe 	.word	0x652b82fe
 800e5a4:	3ff71547 	.word	0x3ff71547
 800e5a8:	00000000 	.word	0x00000000
 800e5ac:	bff00000 	.word	0xbff00000
 800e5b0:	8800759c 	.word	0x8800759c
 800e5b4:	7e37e43c 	.word	0x7e37e43c
 800e5b8:	3ff00000 	.word	0x3ff00000
 800e5bc:	3fd00000 	.word	0x3fd00000
 800e5c0:	3fe00000 	.word	0x3fe00000
 800e5c4:	408fffff 	.word	0x408fffff
 800e5c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e5cc:	f04f 0200 	mov.w	r2, #0
 800e5d0:	da05      	bge.n	800e5de <__ieee754_pow+0x3de>
 800e5d2:	4bd3      	ldr	r3, [pc, #844]	; (800e920 <__ieee754_pow+0x720>)
 800e5d4:	f7f1 ffc8 	bl	8000568 <__aeabi_dmul>
 800e5d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e5dc:	460c      	mov	r4, r1
 800e5de:	1523      	asrs	r3, r4, #20
 800e5e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e5e4:	4413      	add	r3, r2
 800e5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5e8:	4bce      	ldr	r3, [pc, #824]	; (800e924 <__ieee754_pow+0x724>)
 800e5ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e5ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e5f2:	429c      	cmp	r4, r3
 800e5f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e5f8:	dd08      	ble.n	800e60c <__ieee754_pow+0x40c>
 800e5fa:	4bcb      	ldr	r3, [pc, #812]	; (800e928 <__ieee754_pow+0x728>)
 800e5fc:	429c      	cmp	r4, r3
 800e5fe:	f340 815e 	ble.w	800e8be <__ieee754_pow+0x6be>
 800e602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e604:	3301      	adds	r3, #1
 800e606:	9309      	str	r3, [sp, #36]	; 0x24
 800e608:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e60c:	f04f 0a00 	mov.w	sl, #0
 800e610:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e614:	930c      	str	r3, [sp, #48]	; 0x30
 800e616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e618:	4bc4      	ldr	r3, [pc, #784]	; (800e92c <__ieee754_pow+0x72c>)
 800e61a:	4413      	add	r3, r2
 800e61c:	ed93 7b00 	vldr	d7, [r3]
 800e620:	4629      	mov	r1, r5
 800e622:	ec53 2b17 	vmov	r2, r3, d7
 800e626:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e62a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e62e:	f7f1 fde3 	bl	80001f8 <__aeabi_dsub>
 800e632:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e636:	4606      	mov	r6, r0
 800e638:	460f      	mov	r7, r1
 800e63a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e63e:	f7f1 fddd 	bl	80001fc <__adddf3>
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	2000      	movs	r0, #0
 800e648:	49b9      	ldr	r1, [pc, #740]	; (800e930 <__ieee754_pow+0x730>)
 800e64a:	f7f2 f8b7 	bl	80007bc <__aeabi_ddiv>
 800e64e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e652:	4602      	mov	r2, r0
 800e654:	460b      	mov	r3, r1
 800e656:	4630      	mov	r0, r6
 800e658:	4639      	mov	r1, r7
 800e65a:	f7f1 ff85 	bl	8000568 <__aeabi_dmul>
 800e65e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e662:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e666:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e66a:	2300      	movs	r3, #0
 800e66c:	9302      	str	r3, [sp, #8]
 800e66e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e672:	106d      	asrs	r5, r5, #1
 800e674:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e678:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e67c:	2200      	movs	r2, #0
 800e67e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e682:	4640      	mov	r0, r8
 800e684:	4649      	mov	r1, r9
 800e686:	4614      	mov	r4, r2
 800e688:	461d      	mov	r5, r3
 800e68a:	f7f1 ff6d 	bl	8000568 <__aeabi_dmul>
 800e68e:	4602      	mov	r2, r0
 800e690:	460b      	mov	r3, r1
 800e692:	4630      	mov	r0, r6
 800e694:	4639      	mov	r1, r7
 800e696:	f7f1 fdaf 	bl	80001f8 <__aeabi_dsub>
 800e69a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e69e:	4606      	mov	r6, r0
 800e6a0:	460f      	mov	r7, r1
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	f7f1 fda7 	bl	80001f8 <__aeabi_dsub>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e6b2:	f7f1 fda1 	bl	80001f8 <__aeabi_dsub>
 800e6b6:	4642      	mov	r2, r8
 800e6b8:	464b      	mov	r3, r9
 800e6ba:	f7f1 ff55 	bl	8000568 <__aeabi_dmul>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	4639      	mov	r1, r7
 800e6c6:	f7f1 fd97 	bl	80001f8 <__aeabi_dsub>
 800e6ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e6ce:	f7f1 ff4b 	bl	8000568 <__aeabi_dmul>
 800e6d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e6da:	4610      	mov	r0, r2
 800e6dc:	4619      	mov	r1, r3
 800e6de:	f7f1 ff43 	bl	8000568 <__aeabi_dmul>
 800e6e2:	a37b      	add	r3, pc, #492	; (adr r3, 800e8d0 <__ieee754_pow+0x6d0>)
 800e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	460d      	mov	r5, r1
 800e6ec:	f7f1 ff3c 	bl	8000568 <__aeabi_dmul>
 800e6f0:	a379      	add	r3, pc, #484	; (adr r3, 800e8d8 <__ieee754_pow+0x6d8>)
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	f7f1 fd81 	bl	80001fc <__adddf3>
 800e6fa:	4622      	mov	r2, r4
 800e6fc:	462b      	mov	r3, r5
 800e6fe:	f7f1 ff33 	bl	8000568 <__aeabi_dmul>
 800e702:	a377      	add	r3, pc, #476	; (adr r3, 800e8e0 <__ieee754_pow+0x6e0>)
 800e704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e708:	f7f1 fd78 	bl	80001fc <__adddf3>
 800e70c:	4622      	mov	r2, r4
 800e70e:	462b      	mov	r3, r5
 800e710:	f7f1 ff2a 	bl	8000568 <__aeabi_dmul>
 800e714:	a374      	add	r3, pc, #464	; (adr r3, 800e8e8 <__ieee754_pow+0x6e8>)
 800e716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71a:	f7f1 fd6f 	bl	80001fc <__adddf3>
 800e71e:	4622      	mov	r2, r4
 800e720:	462b      	mov	r3, r5
 800e722:	f7f1 ff21 	bl	8000568 <__aeabi_dmul>
 800e726:	a372      	add	r3, pc, #456	; (adr r3, 800e8f0 <__ieee754_pow+0x6f0>)
 800e728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72c:	f7f1 fd66 	bl	80001fc <__adddf3>
 800e730:	4622      	mov	r2, r4
 800e732:	462b      	mov	r3, r5
 800e734:	f7f1 ff18 	bl	8000568 <__aeabi_dmul>
 800e738:	a36f      	add	r3, pc, #444	; (adr r3, 800e8f8 <__ieee754_pow+0x6f8>)
 800e73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73e:	f7f1 fd5d 	bl	80001fc <__adddf3>
 800e742:	4622      	mov	r2, r4
 800e744:	4606      	mov	r6, r0
 800e746:	460f      	mov	r7, r1
 800e748:	462b      	mov	r3, r5
 800e74a:	4620      	mov	r0, r4
 800e74c:	4629      	mov	r1, r5
 800e74e:	f7f1 ff0b 	bl	8000568 <__aeabi_dmul>
 800e752:	4602      	mov	r2, r0
 800e754:	460b      	mov	r3, r1
 800e756:	4630      	mov	r0, r6
 800e758:	4639      	mov	r1, r7
 800e75a:	f7f1 ff05 	bl	8000568 <__aeabi_dmul>
 800e75e:	4642      	mov	r2, r8
 800e760:	4604      	mov	r4, r0
 800e762:	460d      	mov	r5, r1
 800e764:	464b      	mov	r3, r9
 800e766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e76a:	f7f1 fd47 	bl	80001fc <__adddf3>
 800e76e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e772:	f7f1 fef9 	bl	8000568 <__aeabi_dmul>
 800e776:	4622      	mov	r2, r4
 800e778:	462b      	mov	r3, r5
 800e77a:	f7f1 fd3f 	bl	80001fc <__adddf3>
 800e77e:	4642      	mov	r2, r8
 800e780:	4606      	mov	r6, r0
 800e782:	460f      	mov	r7, r1
 800e784:	464b      	mov	r3, r9
 800e786:	4640      	mov	r0, r8
 800e788:	4649      	mov	r1, r9
 800e78a:	f7f1 feed 	bl	8000568 <__aeabi_dmul>
 800e78e:	2200      	movs	r2, #0
 800e790:	4b68      	ldr	r3, [pc, #416]	; (800e934 <__ieee754_pow+0x734>)
 800e792:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e796:	f7f1 fd31 	bl	80001fc <__adddf3>
 800e79a:	4632      	mov	r2, r6
 800e79c:	463b      	mov	r3, r7
 800e79e:	f7f1 fd2d 	bl	80001fc <__adddf3>
 800e7a2:	9802      	ldr	r0, [sp, #8]
 800e7a4:	460d      	mov	r5, r1
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	4640      	mov	r0, r8
 800e7ae:	4649      	mov	r1, r9
 800e7b0:	f7f1 feda 	bl	8000568 <__aeabi_dmul>
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	4680      	mov	r8, r0
 800e7b8:	4689      	mov	r9, r1
 800e7ba:	4b5e      	ldr	r3, [pc, #376]	; (800e934 <__ieee754_pow+0x734>)
 800e7bc:	4620      	mov	r0, r4
 800e7be:	4629      	mov	r1, r5
 800e7c0:	f7f1 fd1a 	bl	80001f8 <__aeabi_dsub>
 800e7c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e7c8:	f7f1 fd16 	bl	80001f8 <__aeabi_dsub>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f1 fd10 	bl	80001f8 <__aeabi_dsub>
 800e7d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7dc:	f7f1 fec4 	bl	8000568 <__aeabi_dmul>
 800e7e0:	4622      	mov	r2, r4
 800e7e2:	4606      	mov	r6, r0
 800e7e4:	460f      	mov	r7, r1
 800e7e6:	462b      	mov	r3, r5
 800e7e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7ec:	f7f1 febc 	bl	8000568 <__aeabi_dmul>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	4639      	mov	r1, r7
 800e7f8:	f7f1 fd00 	bl	80001fc <__adddf3>
 800e7fc:	4606      	mov	r6, r0
 800e7fe:	460f      	mov	r7, r1
 800e800:	4602      	mov	r2, r0
 800e802:	460b      	mov	r3, r1
 800e804:	4640      	mov	r0, r8
 800e806:	4649      	mov	r1, r9
 800e808:	f7f1 fcf8 	bl	80001fc <__adddf3>
 800e80c:	9802      	ldr	r0, [sp, #8]
 800e80e:	a33c      	add	r3, pc, #240	; (adr r3, 800e900 <__ieee754_pow+0x700>)
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	4604      	mov	r4, r0
 800e816:	460d      	mov	r5, r1
 800e818:	f7f1 fea6 	bl	8000568 <__aeabi_dmul>
 800e81c:	4642      	mov	r2, r8
 800e81e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e822:	464b      	mov	r3, r9
 800e824:	4620      	mov	r0, r4
 800e826:	4629      	mov	r1, r5
 800e828:	f7f1 fce6 	bl	80001f8 <__aeabi_dsub>
 800e82c:	4602      	mov	r2, r0
 800e82e:	460b      	mov	r3, r1
 800e830:	4630      	mov	r0, r6
 800e832:	4639      	mov	r1, r7
 800e834:	f7f1 fce0 	bl	80001f8 <__aeabi_dsub>
 800e838:	a333      	add	r3, pc, #204	; (adr r3, 800e908 <__ieee754_pow+0x708>)
 800e83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83e:	f7f1 fe93 	bl	8000568 <__aeabi_dmul>
 800e842:	a333      	add	r3, pc, #204	; (adr r3, 800e910 <__ieee754_pow+0x710>)
 800e844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e848:	4606      	mov	r6, r0
 800e84a:	460f      	mov	r7, r1
 800e84c:	4620      	mov	r0, r4
 800e84e:	4629      	mov	r1, r5
 800e850:	f7f1 fe8a 	bl	8000568 <__aeabi_dmul>
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	4630      	mov	r0, r6
 800e85a:	4639      	mov	r1, r7
 800e85c:	f7f1 fcce 	bl	80001fc <__adddf3>
 800e860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e862:	4b35      	ldr	r3, [pc, #212]	; (800e938 <__ieee754_pow+0x738>)
 800e864:	4413      	add	r3, r2
 800e866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86a:	f7f1 fcc7 	bl	80001fc <__adddf3>
 800e86e:	4604      	mov	r4, r0
 800e870:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e872:	460d      	mov	r5, r1
 800e874:	f7f1 fe0e 	bl	8000494 <__aeabi_i2d>
 800e878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e87a:	4b30      	ldr	r3, [pc, #192]	; (800e93c <__ieee754_pow+0x73c>)
 800e87c:	4413      	add	r3, r2
 800e87e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e882:	4606      	mov	r6, r0
 800e884:	460f      	mov	r7, r1
 800e886:	4622      	mov	r2, r4
 800e888:	462b      	mov	r3, r5
 800e88a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e88e:	f7f1 fcb5 	bl	80001fc <__adddf3>
 800e892:	4642      	mov	r2, r8
 800e894:	464b      	mov	r3, r9
 800e896:	f7f1 fcb1 	bl	80001fc <__adddf3>
 800e89a:	4632      	mov	r2, r6
 800e89c:	463b      	mov	r3, r7
 800e89e:	f7f1 fcad 	bl	80001fc <__adddf3>
 800e8a2:	9802      	ldr	r0, [sp, #8]
 800e8a4:	4632      	mov	r2, r6
 800e8a6:	463b      	mov	r3, r7
 800e8a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8ac:	f7f1 fca4 	bl	80001f8 <__aeabi_dsub>
 800e8b0:	4642      	mov	r2, r8
 800e8b2:	464b      	mov	r3, r9
 800e8b4:	f7f1 fca0 	bl	80001f8 <__aeabi_dsub>
 800e8b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e8bc:	e607      	b.n	800e4ce <__ieee754_pow+0x2ce>
 800e8be:	f04f 0a01 	mov.w	sl, #1
 800e8c2:	e6a5      	b.n	800e610 <__ieee754_pow+0x410>
 800e8c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e918 <__ieee754_pow+0x718>
 800e8c8:	e613      	b.n	800e4f2 <__ieee754_pow+0x2f2>
 800e8ca:	bf00      	nop
 800e8cc:	f3af 8000 	nop.w
 800e8d0:	4a454eef 	.word	0x4a454eef
 800e8d4:	3fca7e28 	.word	0x3fca7e28
 800e8d8:	93c9db65 	.word	0x93c9db65
 800e8dc:	3fcd864a 	.word	0x3fcd864a
 800e8e0:	a91d4101 	.word	0xa91d4101
 800e8e4:	3fd17460 	.word	0x3fd17460
 800e8e8:	518f264d 	.word	0x518f264d
 800e8ec:	3fd55555 	.word	0x3fd55555
 800e8f0:	db6fabff 	.word	0xdb6fabff
 800e8f4:	3fdb6db6 	.word	0x3fdb6db6
 800e8f8:	33333303 	.word	0x33333303
 800e8fc:	3fe33333 	.word	0x3fe33333
 800e900:	e0000000 	.word	0xe0000000
 800e904:	3feec709 	.word	0x3feec709
 800e908:	dc3a03fd 	.word	0xdc3a03fd
 800e90c:	3feec709 	.word	0x3feec709
 800e910:	145b01f5 	.word	0x145b01f5
 800e914:	be3e2fe0 	.word	0xbe3e2fe0
 800e918:	00000000 	.word	0x00000000
 800e91c:	3ff00000 	.word	0x3ff00000
 800e920:	43400000 	.word	0x43400000
 800e924:	0003988e 	.word	0x0003988e
 800e928:	000bb679 	.word	0x000bb679
 800e92c:	0800f070 	.word	0x0800f070
 800e930:	3ff00000 	.word	0x3ff00000
 800e934:	40080000 	.word	0x40080000
 800e938:	0800f090 	.word	0x0800f090
 800e93c:	0800f080 	.word	0x0800f080
 800e940:	a3b4      	add	r3, pc, #720	; (adr r3, 800ec14 <__ieee754_pow+0xa14>)
 800e942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e946:	4640      	mov	r0, r8
 800e948:	4649      	mov	r1, r9
 800e94a:	f7f1 fc57 	bl	80001fc <__adddf3>
 800e94e:	4622      	mov	r2, r4
 800e950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e954:	462b      	mov	r3, r5
 800e956:	4630      	mov	r0, r6
 800e958:	4639      	mov	r1, r7
 800e95a:	f7f1 fc4d 	bl	80001f8 <__aeabi_dsub>
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e966:	f7f2 f88f 	bl	8000a88 <__aeabi_dcmpgt>
 800e96a:	2800      	cmp	r0, #0
 800e96c:	f47f adfe 	bne.w	800e56c <__ieee754_pow+0x36c>
 800e970:	4aa3      	ldr	r2, [pc, #652]	; (800ec00 <__ieee754_pow+0xa00>)
 800e972:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e976:	4293      	cmp	r3, r2
 800e978:	f340 810a 	ble.w	800eb90 <__ieee754_pow+0x990>
 800e97c:	151b      	asrs	r3, r3, #20
 800e97e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e982:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e986:	fa4a f303 	asr.w	r3, sl, r3
 800e98a:	445b      	add	r3, fp
 800e98c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e990:	4e9c      	ldr	r6, [pc, #624]	; (800ec04 <__ieee754_pow+0xa04>)
 800e992:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e996:	4116      	asrs	r6, r2
 800e998:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e99c:	2000      	movs	r0, #0
 800e99e:	ea23 0106 	bic.w	r1, r3, r6
 800e9a2:	f1c2 0214 	rsb	r2, r2, #20
 800e9a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e9aa:	fa4a fa02 	asr.w	sl, sl, r2
 800e9ae:	f1bb 0f00 	cmp.w	fp, #0
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	bfb8      	it	lt
 800e9bc:	f1ca 0a00 	rsblt	sl, sl, #0
 800e9c0:	f7f1 fc1a 	bl	80001f8 <__aeabi_dsub>
 800e9c4:	e9cd 0100 	strd	r0, r1, [sp]
 800e9c8:	4642      	mov	r2, r8
 800e9ca:	464b      	mov	r3, r9
 800e9cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9d0:	f7f1 fc14 	bl	80001fc <__adddf3>
 800e9d4:	2000      	movs	r0, #0
 800e9d6:	a378      	add	r3, pc, #480	; (adr r3, 800ebb8 <__ieee754_pow+0x9b8>)
 800e9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9dc:	4604      	mov	r4, r0
 800e9de:	460d      	mov	r5, r1
 800e9e0:	f7f1 fdc2 	bl	8000568 <__aeabi_dmul>
 800e9e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9e8:	4606      	mov	r6, r0
 800e9ea:	460f      	mov	r7, r1
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	f7f1 fc02 	bl	80001f8 <__aeabi_dsub>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	4640      	mov	r0, r8
 800e9fa:	4649      	mov	r1, r9
 800e9fc:	f7f1 fbfc 	bl	80001f8 <__aeabi_dsub>
 800ea00:	a36f      	add	r3, pc, #444	; (adr r3, 800ebc0 <__ieee754_pow+0x9c0>)
 800ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea06:	f7f1 fdaf 	bl	8000568 <__aeabi_dmul>
 800ea0a:	a36f      	add	r3, pc, #444	; (adr r3, 800ebc8 <__ieee754_pow+0x9c8>)
 800ea0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea10:	4680      	mov	r8, r0
 800ea12:	4689      	mov	r9, r1
 800ea14:	4620      	mov	r0, r4
 800ea16:	4629      	mov	r1, r5
 800ea18:	f7f1 fda6 	bl	8000568 <__aeabi_dmul>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	460b      	mov	r3, r1
 800ea20:	4640      	mov	r0, r8
 800ea22:	4649      	mov	r1, r9
 800ea24:	f7f1 fbea 	bl	80001fc <__adddf3>
 800ea28:	4604      	mov	r4, r0
 800ea2a:	460d      	mov	r5, r1
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	4630      	mov	r0, r6
 800ea32:	4639      	mov	r1, r7
 800ea34:	f7f1 fbe2 	bl	80001fc <__adddf3>
 800ea38:	4632      	mov	r2, r6
 800ea3a:	463b      	mov	r3, r7
 800ea3c:	4680      	mov	r8, r0
 800ea3e:	4689      	mov	r9, r1
 800ea40:	f7f1 fbda 	bl	80001f8 <__aeabi_dsub>
 800ea44:	4602      	mov	r2, r0
 800ea46:	460b      	mov	r3, r1
 800ea48:	4620      	mov	r0, r4
 800ea4a:	4629      	mov	r1, r5
 800ea4c:	f7f1 fbd4 	bl	80001f8 <__aeabi_dsub>
 800ea50:	4642      	mov	r2, r8
 800ea52:	4606      	mov	r6, r0
 800ea54:	460f      	mov	r7, r1
 800ea56:	464b      	mov	r3, r9
 800ea58:	4640      	mov	r0, r8
 800ea5a:	4649      	mov	r1, r9
 800ea5c:	f7f1 fd84 	bl	8000568 <__aeabi_dmul>
 800ea60:	a35b      	add	r3, pc, #364	; (adr r3, 800ebd0 <__ieee754_pow+0x9d0>)
 800ea62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea66:	4604      	mov	r4, r0
 800ea68:	460d      	mov	r5, r1
 800ea6a:	f7f1 fd7d 	bl	8000568 <__aeabi_dmul>
 800ea6e:	a35a      	add	r3, pc, #360	; (adr r3, 800ebd8 <__ieee754_pow+0x9d8>)
 800ea70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea74:	f7f1 fbc0 	bl	80001f8 <__aeabi_dsub>
 800ea78:	4622      	mov	r2, r4
 800ea7a:	462b      	mov	r3, r5
 800ea7c:	f7f1 fd74 	bl	8000568 <__aeabi_dmul>
 800ea80:	a357      	add	r3, pc, #348	; (adr r3, 800ebe0 <__ieee754_pow+0x9e0>)
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	f7f1 fbb9 	bl	80001fc <__adddf3>
 800ea8a:	4622      	mov	r2, r4
 800ea8c:	462b      	mov	r3, r5
 800ea8e:	f7f1 fd6b 	bl	8000568 <__aeabi_dmul>
 800ea92:	a355      	add	r3, pc, #340	; (adr r3, 800ebe8 <__ieee754_pow+0x9e8>)
 800ea94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea98:	f7f1 fbae 	bl	80001f8 <__aeabi_dsub>
 800ea9c:	4622      	mov	r2, r4
 800ea9e:	462b      	mov	r3, r5
 800eaa0:	f7f1 fd62 	bl	8000568 <__aeabi_dmul>
 800eaa4:	a352      	add	r3, pc, #328	; (adr r3, 800ebf0 <__ieee754_pow+0x9f0>)
 800eaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaaa:	f7f1 fba7 	bl	80001fc <__adddf3>
 800eaae:	4622      	mov	r2, r4
 800eab0:	462b      	mov	r3, r5
 800eab2:	f7f1 fd59 	bl	8000568 <__aeabi_dmul>
 800eab6:	4602      	mov	r2, r0
 800eab8:	460b      	mov	r3, r1
 800eaba:	4640      	mov	r0, r8
 800eabc:	4649      	mov	r1, r9
 800eabe:	f7f1 fb9b 	bl	80001f8 <__aeabi_dsub>
 800eac2:	4604      	mov	r4, r0
 800eac4:	460d      	mov	r5, r1
 800eac6:	4602      	mov	r2, r0
 800eac8:	460b      	mov	r3, r1
 800eaca:	4640      	mov	r0, r8
 800eacc:	4649      	mov	r1, r9
 800eace:	f7f1 fd4b 	bl	8000568 <__aeabi_dmul>
 800ead2:	2200      	movs	r2, #0
 800ead4:	e9cd 0100 	strd	r0, r1, [sp]
 800ead8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eadc:	4620      	mov	r0, r4
 800eade:	4629      	mov	r1, r5
 800eae0:	f7f1 fb8a 	bl	80001f8 <__aeabi_dsub>
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eaec:	f7f1 fe66 	bl	80007bc <__aeabi_ddiv>
 800eaf0:	4632      	mov	r2, r6
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	460d      	mov	r5, r1
 800eaf6:	463b      	mov	r3, r7
 800eaf8:	4640      	mov	r0, r8
 800eafa:	4649      	mov	r1, r9
 800eafc:	f7f1 fd34 	bl	8000568 <__aeabi_dmul>
 800eb00:	4632      	mov	r2, r6
 800eb02:	463b      	mov	r3, r7
 800eb04:	f7f1 fb7a 	bl	80001fc <__adddf3>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	4629      	mov	r1, r5
 800eb10:	f7f1 fb72 	bl	80001f8 <__aeabi_dsub>
 800eb14:	4642      	mov	r2, r8
 800eb16:	464b      	mov	r3, r9
 800eb18:	f7f1 fb6e 	bl	80001f8 <__aeabi_dsub>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	460b      	mov	r3, r1
 800eb20:	2000      	movs	r0, #0
 800eb22:	4939      	ldr	r1, [pc, #228]	; (800ec08 <__ieee754_pow+0xa08>)
 800eb24:	f7f1 fb68 	bl	80001f8 <__aeabi_dsub>
 800eb28:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800eb2c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800eb30:	4602      	mov	r2, r0
 800eb32:	460b      	mov	r3, r1
 800eb34:	da2f      	bge.n	800eb96 <__ieee754_pow+0x996>
 800eb36:	4650      	mov	r0, sl
 800eb38:	ec43 2b10 	vmov	d0, r2, r3
 800eb3c:	f000 f9c0 	bl	800eec0 <scalbn>
 800eb40:	ec51 0b10 	vmov	r0, r1, d0
 800eb44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb48:	f7ff bbf1 	b.w	800e32e <__ieee754_pow+0x12e>
 800eb4c:	4b2f      	ldr	r3, [pc, #188]	; (800ec0c <__ieee754_pow+0xa0c>)
 800eb4e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eb52:	429e      	cmp	r6, r3
 800eb54:	f77f af0c 	ble.w	800e970 <__ieee754_pow+0x770>
 800eb58:	4b2d      	ldr	r3, [pc, #180]	; (800ec10 <__ieee754_pow+0xa10>)
 800eb5a:	440b      	add	r3, r1
 800eb5c:	4303      	orrs	r3, r0
 800eb5e:	d00b      	beq.n	800eb78 <__ieee754_pow+0x978>
 800eb60:	a325      	add	r3, pc, #148	; (adr r3, 800ebf8 <__ieee754_pow+0x9f8>)
 800eb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb6a:	f7f1 fcfd 	bl	8000568 <__aeabi_dmul>
 800eb6e:	a322      	add	r3, pc, #136	; (adr r3, 800ebf8 <__ieee754_pow+0x9f8>)
 800eb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb74:	f7ff bbdb 	b.w	800e32e <__ieee754_pow+0x12e>
 800eb78:	4622      	mov	r2, r4
 800eb7a:	462b      	mov	r3, r5
 800eb7c:	f7f1 fb3c 	bl	80001f8 <__aeabi_dsub>
 800eb80:	4642      	mov	r2, r8
 800eb82:	464b      	mov	r3, r9
 800eb84:	f7f1 ff76 	bl	8000a74 <__aeabi_dcmpge>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	f43f aef1 	beq.w	800e970 <__ieee754_pow+0x770>
 800eb8e:	e7e7      	b.n	800eb60 <__ieee754_pow+0x960>
 800eb90:	f04f 0a00 	mov.w	sl, #0
 800eb94:	e718      	b.n	800e9c8 <__ieee754_pow+0x7c8>
 800eb96:	4621      	mov	r1, r4
 800eb98:	e7d4      	b.n	800eb44 <__ieee754_pow+0x944>
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	491a      	ldr	r1, [pc, #104]	; (800ec08 <__ieee754_pow+0xa08>)
 800eb9e:	f7ff bb8f 	b.w	800e2c0 <__ieee754_pow+0xc0>
 800eba2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eba6:	f7ff bb8b 	b.w	800e2c0 <__ieee754_pow+0xc0>
 800ebaa:	4630      	mov	r0, r6
 800ebac:	4639      	mov	r1, r7
 800ebae:	f7ff bb87 	b.w	800e2c0 <__ieee754_pow+0xc0>
 800ebb2:	4693      	mov	fp, r2
 800ebb4:	f7ff bb98 	b.w	800e2e8 <__ieee754_pow+0xe8>
 800ebb8:	00000000 	.word	0x00000000
 800ebbc:	3fe62e43 	.word	0x3fe62e43
 800ebc0:	fefa39ef 	.word	0xfefa39ef
 800ebc4:	3fe62e42 	.word	0x3fe62e42
 800ebc8:	0ca86c39 	.word	0x0ca86c39
 800ebcc:	be205c61 	.word	0xbe205c61
 800ebd0:	72bea4d0 	.word	0x72bea4d0
 800ebd4:	3e663769 	.word	0x3e663769
 800ebd8:	c5d26bf1 	.word	0xc5d26bf1
 800ebdc:	3ebbbd41 	.word	0x3ebbbd41
 800ebe0:	af25de2c 	.word	0xaf25de2c
 800ebe4:	3f11566a 	.word	0x3f11566a
 800ebe8:	16bebd93 	.word	0x16bebd93
 800ebec:	3f66c16c 	.word	0x3f66c16c
 800ebf0:	5555553e 	.word	0x5555553e
 800ebf4:	3fc55555 	.word	0x3fc55555
 800ebf8:	c2f8f359 	.word	0xc2f8f359
 800ebfc:	01a56e1f 	.word	0x01a56e1f
 800ec00:	3fe00000 	.word	0x3fe00000
 800ec04:	000fffff 	.word	0x000fffff
 800ec08:	3ff00000 	.word	0x3ff00000
 800ec0c:	4090cbff 	.word	0x4090cbff
 800ec10:	3f6f3400 	.word	0x3f6f3400
 800ec14:	652b82fe 	.word	0x652b82fe
 800ec18:	3c971547 	.word	0x3c971547

0800ec1c <__ieee754_sqrt>:
 800ec1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec20:	4955      	ldr	r1, [pc, #340]	; (800ed78 <__ieee754_sqrt+0x15c>)
 800ec22:	ec55 4b10 	vmov	r4, r5, d0
 800ec26:	43a9      	bics	r1, r5
 800ec28:	462b      	mov	r3, r5
 800ec2a:	462a      	mov	r2, r5
 800ec2c:	d112      	bne.n	800ec54 <__ieee754_sqrt+0x38>
 800ec2e:	ee10 2a10 	vmov	r2, s0
 800ec32:	ee10 0a10 	vmov	r0, s0
 800ec36:	4629      	mov	r1, r5
 800ec38:	f7f1 fc96 	bl	8000568 <__aeabi_dmul>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	460b      	mov	r3, r1
 800ec40:	4620      	mov	r0, r4
 800ec42:	4629      	mov	r1, r5
 800ec44:	f7f1 fada 	bl	80001fc <__adddf3>
 800ec48:	4604      	mov	r4, r0
 800ec4a:	460d      	mov	r5, r1
 800ec4c:	ec45 4b10 	vmov	d0, r4, r5
 800ec50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec54:	2d00      	cmp	r5, #0
 800ec56:	ee10 0a10 	vmov	r0, s0
 800ec5a:	4621      	mov	r1, r4
 800ec5c:	dc0f      	bgt.n	800ec7e <__ieee754_sqrt+0x62>
 800ec5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ec62:	4330      	orrs	r0, r6
 800ec64:	d0f2      	beq.n	800ec4c <__ieee754_sqrt+0x30>
 800ec66:	b155      	cbz	r5, 800ec7e <__ieee754_sqrt+0x62>
 800ec68:	ee10 2a10 	vmov	r2, s0
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	4629      	mov	r1, r5
 800ec70:	f7f1 fac2 	bl	80001f8 <__aeabi_dsub>
 800ec74:	4602      	mov	r2, r0
 800ec76:	460b      	mov	r3, r1
 800ec78:	f7f1 fda0 	bl	80007bc <__aeabi_ddiv>
 800ec7c:	e7e4      	b.n	800ec48 <__ieee754_sqrt+0x2c>
 800ec7e:	151b      	asrs	r3, r3, #20
 800ec80:	d073      	beq.n	800ed6a <__ieee754_sqrt+0x14e>
 800ec82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ec86:	07dd      	lsls	r5, r3, #31
 800ec88:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ec8c:	bf48      	it	mi
 800ec8e:	0fc8      	lsrmi	r0, r1, #31
 800ec90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ec94:	bf44      	itt	mi
 800ec96:	0049      	lslmi	r1, r1, #1
 800ec98:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800ec9c:	2500      	movs	r5, #0
 800ec9e:	1058      	asrs	r0, r3, #1
 800eca0:	0fcb      	lsrs	r3, r1, #31
 800eca2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800eca6:	0049      	lsls	r1, r1, #1
 800eca8:	2316      	movs	r3, #22
 800ecaa:	462c      	mov	r4, r5
 800ecac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ecb0:	19a7      	adds	r7, r4, r6
 800ecb2:	4297      	cmp	r7, r2
 800ecb4:	bfde      	ittt	le
 800ecb6:	19bc      	addle	r4, r7, r6
 800ecb8:	1bd2      	suble	r2, r2, r7
 800ecba:	19ad      	addle	r5, r5, r6
 800ecbc:	0fcf      	lsrs	r7, r1, #31
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800ecc4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ecc8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800eccc:	d1f0      	bne.n	800ecb0 <__ieee754_sqrt+0x94>
 800ecce:	f04f 0c20 	mov.w	ip, #32
 800ecd2:	469e      	mov	lr, r3
 800ecd4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ecd8:	42a2      	cmp	r2, r4
 800ecda:	eb06 070e 	add.w	r7, r6, lr
 800ecde:	dc02      	bgt.n	800ece6 <__ieee754_sqrt+0xca>
 800ece0:	d112      	bne.n	800ed08 <__ieee754_sqrt+0xec>
 800ece2:	428f      	cmp	r7, r1
 800ece4:	d810      	bhi.n	800ed08 <__ieee754_sqrt+0xec>
 800ece6:	2f00      	cmp	r7, #0
 800ece8:	eb07 0e06 	add.w	lr, r7, r6
 800ecec:	da42      	bge.n	800ed74 <__ieee754_sqrt+0x158>
 800ecee:	f1be 0f00 	cmp.w	lr, #0
 800ecf2:	db3f      	blt.n	800ed74 <__ieee754_sqrt+0x158>
 800ecf4:	f104 0801 	add.w	r8, r4, #1
 800ecf8:	1b12      	subs	r2, r2, r4
 800ecfa:	428f      	cmp	r7, r1
 800ecfc:	bf88      	it	hi
 800ecfe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ed02:	1bc9      	subs	r1, r1, r7
 800ed04:	4433      	add	r3, r6
 800ed06:	4644      	mov	r4, r8
 800ed08:	0052      	lsls	r2, r2, #1
 800ed0a:	f1bc 0c01 	subs.w	ip, ip, #1
 800ed0e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800ed12:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ed16:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ed1a:	d1dd      	bne.n	800ecd8 <__ieee754_sqrt+0xbc>
 800ed1c:	430a      	orrs	r2, r1
 800ed1e:	d006      	beq.n	800ed2e <__ieee754_sqrt+0x112>
 800ed20:	1c5c      	adds	r4, r3, #1
 800ed22:	bf13      	iteet	ne
 800ed24:	3301      	addne	r3, #1
 800ed26:	3501      	addeq	r5, #1
 800ed28:	4663      	moveq	r3, ip
 800ed2a:	f023 0301 	bicne.w	r3, r3, #1
 800ed2e:	106a      	asrs	r2, r5, #1
 800ed30:	085b      	lsrs	r3, r3, #1
 800ed32:	07e9      	lsls	r1, r5, #31
 800ed34:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ed38:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ed3c:	bf48      	it	mi
 800ed3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ed42:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800ed46:	461c      	mov	r4, r3
 800ed48:	e780      	b.n	800ec4c <__ieee754_sqrt+0x30>
 800ed4a:	0aca      	lsrs	r2, r1, #11
 800ed4c:	3815      	subs	r0, #21
 800ed4e:	0549      	lsls	r1, r1, #21
 800ed50:	2a00      	cmp	r2, #0
 800ed52:	d0fa      	beq.n	800ed4a <__ieee754_sqrt+0x12e>
 800ed54:	02d6      	lsls	r6, r2, #11
 800ed56:	d50a      	bpl.n	800ed6e <__ieee754_sqrt+0x152>
 800ed58:	f1c3 0420 	rsb	r4, r3, #32
 800ed5c:	fa21 f404 	lsr.w	r4, r1, r4
 800ed60:	1e5d      	subs	r5, r3, #1
 800ed62:	4099      	lsls	r1, r3
 800ed64:	4322      	orrs	r2, r4
 800ed66:	1b43      	subs	r3, r0, r5
 800ed68:	e78b      	b.n	800ec82 <__ieee754_sqrt+0x66>
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	e7f0      	b.n	800ed50 <__ieee754_sqrt+0x134>
 800ed6e:	0052      	lsls	r2, r2, #1
 800ed70:	3301      	adds	r3, #1
 800ed72:	e7ef      	b.n	800ed54 <__ieee754_sqrt+0x138>
 800ed74:	46a0      	mov	r8, r4
 800ed76:	e7bf      	b.n	800ecf8 <__ieee754_sqrt+0xdc>
 800ed78:	7ff00000 	.word	0x7ff00000

0800ed7c <fabs>:
 800ed7c:	ec51 0b10 	vmov	r0, r1, d0
 800ed80:	ee10 2a10 	vmov	r2, s0
 800ed84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed88:	ec43 2b10 	vmov	d0, r2, r3
 800ed8c:	4770      	bx	lr

0800ed8e <finite>:
 800ed8e:	ee10 3a90 	vmov	r3, s1
 800ed92:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ed96:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ed9a:	0fc0      	lsrs	r0, r0, #31
 800ed9c:	4770      	bx	lr

0800ed9e <matherr>:
 800ed9e:	2000      	movs	r0, #0
 800eda0:	4770      	bx	lr
 800eda2:	0000      	movs	r0, r0
 800eda4:	0000      	movs	r0, r0
	...

0800eda8 <nan>:
 800eda8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800edb0 <nan+0x8>
 800edac:	4770      	bx	lr
 800edae:	bf00      	nop
 800edb0:	00000000 	.word	0x00000000
 800edb4:	7ff80000 	.word	0x7ff80000

0800edb8 <rint>:
 800edb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edba:	ec51 0b10 	vmov	r0, r1, d0
 800edbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800edc2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800edc6:	2e13      	cmp	r6, #19
 800edc8:	460b      	mov	r3, r1
 800edca:	ee10 4a10 	vmov	r4, s0
 800edce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800edd2:	dc56      	bgt.n	800ee82 <rint+0xca>
 800edd4:	2e00      	cmp	r6, #0
 800edd6:	da2b      	bge.n	800ee30 <rint+0x78>
 800edd8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800eddc:	4302      	orrs	r2, r0
 800edde:	d023      	beq.n	800ee28 <rint+0x70>
 800ede0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ede4:	4302      	orrs	r2, r0
 800ede6:	4254      	negs	r4, r2
 800ede8:	4314      	orrs	r4, r2
 800edea:	0c4b      	lsrs	r3, r1, #17
 800edec:	0b24      	lsrs	r4, r4, #12
 800edee:	045b      	lsls	r3, r3, #17
 800edf0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800edf4:	ea44 0103 	orr.w	r1, r4, r3
 800edf8:	460b      	mov	r3, r1
 800edfa:	492f      	ldr	r1, [pc, #188]	; (800eeb8 <rint+0x100>)
 800edfc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800ee00:	e9d1 6700 	ldrd	r6, r7, [r1]
 800ee04:	4602      	mov	r2, r0
 800ee06:	4639      	mov	r1, r7
 800ee08:	4630      	mov	r0, r6
 800ee0a:	f7f1 f9f7 	bl	80001fc <__adddf3>
 800ee0e:	e9cd 0100 	strd	r0, r1, [sp]
 800ee12:	463b      	mov	r3, r7
 800ee14:	4632      	mov	r2, r6
 800ee16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee1a:	f7f1 f9ed 	bl	80001f8 <__aeabi_dsub>
 800ee1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ee22:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ee26:	4639      	mov	r1, r7
 800ee28:	ec41 0b10 	vmov	d0, r0, r1
 800ee2c:	b003      	add	sp, #12
 800ee2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee30:	4a22      	ldr	r2, [pc, #136]	; (800eebc <rint+0x104>)
 800ee32:	4132      	asrs	r2, r6
 800ee34:	ea01 0702 	and.w	r7, r1, r2
 800ee38:	4307      	orrs	r7, r0
 800ee3a:	d0f5      	beq.n	800ee28 <rint+0x70>
 800ee3c:	0852      	lsrs	r2, r2, #1
 800ee3e:	4011      	ands	r1, r2
 800ee40:	430c      	orrs	r4, r1
 800ee42:	d00b      	beq.n	800ee5c <rint+0xa4>
 800ee44:	ea23 0202 	bic.w	r2, r3, r2
 800ee48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ee4c:	2e13      	cmp	r6, #19
 800ee4e:	fa43 f306 	asr.w	r3, r3, r6
 800ee52:	bf0c      	ite	eq
 800ee54:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ee58:	2400      	movne	r4, #0
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	4916      	ldr	r1, [pc, #88]	; (800eeb8 <rint+0x100>)
 800ee5e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ee62:	4622      	mov	r2, r4
 800ee64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ee68:	4620      	mov	r0, r4
 800ee6a:	4629      	mov	r1, r5
 800ee6c:	f7f1 f9c6 	bl	80001fc <__adddf3>
 800ee70:	e9cd 0100 	strd	r0, r1, [sp]
 800ee74:	4622      	mov	r2, r4
 800ee76:	462b      	mov	r3, r5
 800ee78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee7c:	f7f1 f9bc 	bl	80001f8 <__aeabi_dsub>
 800ee80:	e7d2      	b.n	800ee28 <rint+0x70>
 800ee82:	2e33      	cmp	r6, #51	; 0x33
 800ee84:	dd07      	ble.n	800ee96 <rint+0xde>
 800ee86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ee8a:	d1cd      	bne.n	800ee28 <rint+0x70>
 800ee8c:	ee10 2a10 	vmov	r2, s0
 800ee90:	f7f1 f9b4 	bl	80001fc <__adddf3>
 800ee94:	e7c8      	b.n	800ee28 <rint+0x70>
 800ee96:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800ee9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee9e:	40f2      	lsrs	r2, r6
 800eea0:	4210      	tst	r0, r2
 800eea2:	d0c1      	beq.n	800ee28 <rint+0x70>
 800eea4:	0852      	lsrs	r2, r2, #1
 800eea6:	4210      	tst	r0, r2
 800eea8:	bf1f      	itttt	ne
 800eeaa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800eeae:	ea20 0202 	bicne.w	r2, r0, r2
 800eeb2:	4134      	asrne	r4, r6
 800eeb4:	4314      	orrne	r4, r2
 800eeb6:	e7d1      	b.n	800ee5c <rint+0xa4>
 800eeb8:	0800f0a0 	.word	0x0800f0a0
 800eebc:	000fffff 	.word	0x000fffff

0800eec0 <scalbn>:
 800eec0:	b570      	push	{r4, r5, r6, lr}
 800eec2:	ec55 4b10 	vmov	r4, r5, d0
 800eec6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800eeca:	4606      	mov	r6, r0
 800eecc:	462b      	mov	r3, r5
 800eece:	b9aa      	cbnz	r2, 800eefc <scalbn+0x3c>
 800eed0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eed4:	4323      	orrs	r3, r4
 800eed6:	d03b      	beq.n	800ef50 <scalbn+0x90>
 800eed8:	4b31      	ldr	r3, [pc, #196]	; (800efa0 <scalbn+0xe0>)
 800eeda:	4629      	mov	r1, r5
 800eedc:	2200      	movs	r2, #0
 800eede:	ee10 0a10 	vmov	r0, s0
 800eee2:	f7f1 fb41 	bl	8000568 <__aeabi_dmul>
 800eee6:	4b2f      	ldr	r3, [pc, #188]	; (800efa4 <scalbn+0xe4>)
 800eee8:	429e      	cmp	r6, r3
 800eeea:	4604      	mov	r4, r0
 800eeec:	460d      	mov	r5, r1
 800eeee:	da12      	bge.n	800ef16 <scalbn+0x56>
 800eef0:	a327      	add	r3, pc, #156	; (adr r3, 800ef90 <scalbn+0xd0>)
 800eef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef6:	f7f1 fb37 	bl	8000568 <__aeabi_dmul>
 800eefa:	e009      	b.n	800ef10 <scalbn+0x50>
 800eefc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ef00:	428a      	cmp	r2, r1
 800ef02:	d10c      	bne.n	800ef1e <scalbn+0x5e>
 800ef04:	ee10 2a10 	vmov	r2, s0
 800ef08:	4620      	mov	r0, r4
 800ef0a:	4629      	mov	r1, r5
 800ef0c:	f7f1 f976 	bl	80001fc <__adddf3>
 800ef10:	4604      	mov	r4, r0
 800ef12:	460d      	mov	r5, r1
 800ef14:	e01c      	b.n	800ef50 <scalbn+0x90>
 800ef16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	3a36      	subs	r2, #54	; 0x36
 800ef1e:	4432      	add	r2, r6
 800ef20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ef24:	428a      	cmp	r2, r1
 800ef26:	dd0b      	ble.n	800ef40 <scalbn+0x80>
 800ef28:	ec45 4b11 	vmov	d1, r4, r5
 800ef2c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ef98 <scalbn+0xd8>
 800ef30:	f000 f83c 	bl	800efac <copysign>
 800ef34:	a318      	add	r3, pc, #96	; (adr r3, 800ef98 <scalbn+0xd8>)
 800ef36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3a:	ec51 0b10 	vmov	r0, r1, d0
 800ef3e:	e7da      	b.n	800eef6 <scalbn+0x36>
 800ef40:	2a00      	cmp	r2, #0
 800ef42:	dd08      	ble.n	800ef56 <scalbn+0x96>
 800ef44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef50:	ec45 4b10 	vmov	d0, r4, r5
 800ef54:	bd70      	pop	{r4, r5, r6, pc}
 800ef56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ef5a:	da0d      	bge.n	800ef78 <scalbn+0xb8>
 800ef5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ef60:	429e      	cmp	r6, r3
 800ef62:	ec45 4b11 	vmov	d1, r4, r5
 800ef66:	dce1      	bgt.n	800ef2c <scalbn+0x6c>
 800ef68:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ef90 <scalbn+0xd0>
 800ef6c:	f000 f81e 	bl	800efac <copysign>
 800ef70:	a307      	add	r3, pc, #28	; (adr r3, 800ef90 <scalbn+0xd0>)
 800ef72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef76:	e7e0      	b.n	800ef3a <scalbn+0x7a>
 800ef78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef7c:	3236      	adds	r2, #54	; 0x36
 800ef7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef86:	4620      	mov	r0, r4
 800ef88:	4629      	mov	r1, r5
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	4b06      	ldr	r3, [pc, #24]	; (800efa8 <scalbn+0xe8>)
 800ef8e:	e7b2      	b.n	800eef6 <scalbn+0x36>
 800ef90:	c2f8f359 	.word	0xc2f8f359
 800ef94:	01a56e1f 	.word	0x01a56e1f
 800ef98:	8800759c 	.word	0x8800759c
 800ef9c:	7e37e43c 	.word	0x7e37e43c
 800efa0:	43500000 	.word	0x43500000
 800efa4:	ffff3cb0 	.word	0xffff3cb0
 800efa8:	3c900000 	.word	0x3c900000

0800efac <copysign>:
 800efac:	ec51 0b10 	vmov	r0, r1, d0
 800efb0:	ee11 0a90 	vmov	r0, s3
 800efb4:	ee10 2a10 	vmov	r2, s0
 800efb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800efbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800efc0:	ea41 0300 	orr.w	r3, r1, r0
 800efc4:	ec43 2b10 	vmov	d0, r2, r3
 800efc8:	4770      	bx	lr
	...

0800efcc <__errno>:
 800efcc:	4b01      	ldr	r3, [pc, #4]	; (800efd4 <__errno+0x8>)
 800efce:	6818      	ldr	r0, [r3, #0]
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop
 800efd4:	20000018 	.word	0x20000018

0800efd8 <__libc_init_array>:
 800efd8:	b570      	push	{r4, r5, r6, lr}
 800efda:	4e0d      	ldr	r6, [pc, #52]	; (800f010 <__libc_init_array+0x38>)
 800efdc:	4c0d      	ldr	r4, [pc, #52]	; (800f014 <__libc_init_array+0x3c>)
 800efde:	1ba4      	subs	r4, r4, r6
 800efe0:	10a4      	asrs	r4, r4, #2
 800efe2:	2500      	movs	r5, #0
 800efe4:	42a5      	cmp	r5, r4
 800efe6:	d109      	bne.n	800effc <__libc_init_array+0x24>
 800efe8:	4e0b      	ldr	r6, [pc, #44]	; (800f018 <__libc_init_array+0x40>)
 800efea:	4c0c      	ldr	r4, [pc, #48]	; (800f01c <__libc_init_array+0x44>)
 800efec:	f000 f820 	bl	800f030 <_init>
 800eff0:	1ba4      	subs	r4, r4, r6
 800eff2:	10a4      	asrs	r4, r4, #2
 800eff4:	2500      	movs	r5, #0
 800eff6:	42a5      	cmp	r5, r4
 800eff8:	d105      	bne.n	800f006 <__libc_init_array+0x2e>
 800effa:	bd70      	pop	{r4, r5, r6, pc}
 800effc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f000:	4798      	blx	r3
 800f002:	3501      	adds	r5, #1
 800f004:	e7ee      	b.n	800efe4 <__libc_init_array+0xc>
 800f006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f00a:	4798      	blx	r3
 800f00c:	3501      	adds	r5, #1
 800f00e:	e7f2      	b.n	800eff6 <__libc_init_array+0x1e>
 800f010:	0800f0b8 	.word	0x0800f0b8
 800f014:	0800f0b8 	.word	0x0800f0b8
 800f018:	0800f0b8 	.word	0x0800f0b8
 800f01c:	0800f0c0 	.word	0x0800f0c0

0800f020 <memset>:
 800f020:	4402      	add	r2, r0
 800f022:	4603      	mov	r3, r0
 800f024:	4293      	cmp	r3, r2
 800f026:	d100      	bne.n	800f02a <memset+0xa>
 800f028:	4770      	bx	lr
 800f02a:	f803 1b01 	strb.w	r1, [r3], #1
 800f02e:	e7f9      	b.n	800f024 <memset+0x4>

0800f030 <_init>:
 800f030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f032:	bf00      	nop
 800f034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f036:	bc08      	pop	{r3}
 800f038:	469e      	mov	lr, r3
 800f03a:	4770      	bx	lr

0800f03c <_fini>:
 800f03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f03e:	bf00      	nop
 800f040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f042:	bc08      	pop	{r3}
 800f044:	469e      	mov	lr, r3
 800f046:	4770      	bx	lr
